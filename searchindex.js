Search.setIndex({"docnames": ["Apps/apps", "Apps/nexus", "Apps/qtm", "Apps/settings", "Lib/analysis/analysis", "Lib/analysis/generated/pyCGM2.Lib.analysis.automaticCPdeviations", "Lib/analysis/generated/pyCGM2.Lib.analysis.exportAnalysis", "Lib/analysis/generated/pyCGM2.Lib.analysis.makeAnalysis", "Lib/cgm/cgm", "Lib/cgm/generated/pyCGM2.Lib.CGM.cgm1.calibrate", "Lib/cgm/generated/pyCGM2.Lib.CGM.cgm1.fitting", "Lib/cgm/generated/pyCGM2.Lib.CGM.cgm1_1.calibrate", "Lib/cgm/generated/pyCGM2.Lib.CGM.cgm1_1.fitting", "Lib/cgm/generated/pyCGM2.Lib.CGM.cgm2_1.calibrate", "Lib/cgm/generated/pyCGM2.Lib.CGM.cgm2_1.fitting", "Lib/cgm/generated/pyCGM2.Lib.CGM.cgm2_2.calibrate", "Lib/cgm/generated/pyCGM2.Lib.CGM.cgm2_2.fitting", "Lib/cgm/generated/pyCGM2.Lib.CGM.cgm2_3.calibrate", "Lib/cgm/generated/pyCGM2.Lib.CGM.cgm2_3.fitting", "Lib/cgm/generated/pyCGM2.Lib.CGM.cgm2_4.calibrate", "Lib/cgm/generated/pyCGM2.Lib.CGM.cgm2_4.fitting", "Lib/cgm/generated/pyCGM2.Lib.CGM.cgm2_5.calibrate", "Lib/cgm/generated/pyCGM2.Lib.CGM.cgm2_5.fitting", "Lib/cgm/generated/pyCGM2.Lib.CGM.kneeCalibration.calibration2Dof", "Lib/cgm/generated/pyCGM2.Lib.CGM.kneeCalibration.sara", "Lib/cgm/generated/pyCGM2.Lib.CGM.musculoskeletal.cgm2_2.calibrate", "Lib/cgm/generated/pyCGM2.Lib.CGM.musculoskeletal.cgm2_2.fitting", "Lib/cgm/generated/pyCGM2.Lib.CGM.musculoskeletal.cgm2_3.calibrate", "Lib/cgm/generated/pyCGM2.Lib.CGM.musculoskeletal.cgm2_3.fitting", "Lib/emg/emg", "Lib/emg/generated/pyCGM2.Lib.emg.loadEmg", "Lib/emg/generated/pyCGM2.Lib.emg.normalizedEMG", "Lib/emg/generated/pyCGM2.Lib.emg.processEMG", "Lib/emg/generated/pyCGM2.Lib.emg.processEMG_fromBtkAcq", "Lib/event/eventDetectors", "Lib/event/generated/pyCGM2.Lib.eventDetector.zeni", "Lib/libIndex", "Lib/plot/generated/pyCGM2.Lib.plot.compareEmgEnvelops", "Lib/plot/generated/pyCGM2.Lib.plot.compareKinematic", "Lib/plot/generated/pyCGM2.Lib.plot.compareKinetic", "Lib/plot/generated/pyCGM2.Lib.plot.compareSelectedEmgEvelops", "Lib/plot/generated/pyCGM2.Lib.plot.plotConsistencyEnvelopEMGpanel", "Lib/plot/generated/pyCGM2.Lib.plot.plotDescriptiveEnvelopEMGpanel", "Lib/plot/generated/pyCGM2.Lib.plot.plotPFKE", "Lib/plot/generated/pyCGM2.Lib.plot.plotSaggitalGagePanel", "Lib/plot/generated/pyCGM2.Lib.plot.plotTemporalEMG", "Lib/plot/generated/pyCGM2.Lib.plot.plotTemporalKinematic", "Lib/plot/generated/pyCGM2.Lib.plot.plotTemporalKinetic", "Lib/plot/generated/pyCGM2.Lib.plot.plot_ConsistencyKinematic", "Lib/plot/generated/pyCGM2.Lib.plot.plot_ConsistencyKinetic", "Lib/plot/generated/pyCGM2.Lib.plot.plot_DescriptiveGRF", "Lib/plot/generated/pyCGM2.Lib.plot.plot_DescriptiveGrfIntegration", "Lib/plot/generated/pyCGM2.Lib.plot.plot_DescriptiveKinematic", "Lib/plot/generated/pyCGM2.Lib.plot.plot_DescriptiveKinetic", "Lib/plot/generated/pyCGM2.Lib.plot.plot_DescriptiveMuscleLength", "Lib/plot/generated/pyCGM2.Lib.plot.plot_MAP", "Lib/plot/generated/pyCGM2.Lib.plot.plot_spatioTemporal", "Lib/plot/plot", "Lib/report/generated/pyCGM2.Lib.report.pdfGaitReport", "Lib/report/report", "index", "modules/anomaly/anomaly", "modules/anomaly/generated/pyCGM2.Anomaly.anomalyCorrectionProcedures.AnomalyCorrectionProcedure", "modules/anomaly/generated/pyCGM2.Anomaly.anomalyCorrectionProcedures.MarkerAnomalyCorrectionProcedure", "modules/anomaly/generated/pyCGM2.Anomaly.anomalyDetectionProcedures.AnomalyDetectionProcedure", "modules/anomaly/generated/pyCGM2.Anomaly.anomalyDetectionProcedures.AnthropoDataAnomalyProcedure", "modules/anomaly/generated/pyCGM2.Anomaly.anomalyDetectionProcedures.ForcePlateAnomalyProcedure", "modules/anomaly/generated/pyCGM2.Anomaly.anomalyDetectionProcedures.GaitEventAnomalyProcedure", "modules/anomaly/generated/pyCGM2.Anomaly.anomalyDetectionProcedures.MarkerAnomalyDetectionRollingProcedure", "modules/anomaly/generated/pyCGM2.Anomaly.anomalyFilters.AnomalyCorrectionFilter", "modules/anomaly/generated/pyCGM2.Anomaly.anomalyFilters.AnomalyDetectionFilter", "modules/emg/emg", "modules/emg/generated/pyCGM2.EMG.coactivationProcedures.CoActivationProcedure", "modules/emg/generated/pyCGM2.EMG.coactivationProcedures.FalconerCoActivationProcedure", "modules/emg/generated/pyCGM2.EMG.coactivationProcedures.UnithanCoActivationProcedure", "modules/emg/generated/pyCGM2.EMG.discreteEmgProcedures.AmplitudesProcedure", "modules/emg/generated/pyCGM2.EMG.discreteEmgProcedures.DiscreteEmgProcedure", "modules/emg/generated/pyCGM2.EMG.emgFilters.BasicEmgProcessingFilter", "modules/emg/generated/pyCGM2.EMG.emgFilters.DiscreteEMGFilter", "modules/emg/generated/pyCGM2.EMG.emgFilters.EmgCoActivationFilter", "modules/emg/generated/pyCGM2.EMG.emgFilters.EmgEnvelopProcessingFilter", "modules/emg/generated/pyCGM2.EMG.emgFilters.EmgNormalisationProcessingFilter", "modules/emg/generated/pyCGM2.EMG.emgManager.EmgManager", "modules/enums/enums", "modules/enums/generated/pyCGM2.enums.AnalysisSection", "modules/enums/generated/pyCGM2.enums.BodyPart", "modules/enums/generated/pyCGM2.enums.BodyPartPlot", "modules/enums/generated/pyCGM2.enums.DataType", "modules/enums/generated/pyCGM2.enums.EclipseType", "modules/enums/generated/pyCGM2.enums.EmgAmplitudeNormalization", "modules/enums/generated/pyCGM2.enums.HarringtonPredictor", "modules/enums/generated/pyCGM2.enums.JointCalibrationMethod", "modules/enums/generated/pyCGM2.enums.MomentProjection", "modules/enums/generated/pyCGM2.enums.SegmentSide", "modules/enums/generated/pyCGM2.enums.enumFromtext", "modules/enums/generated/pyCGM2.enums.motionMethod", "modules/events/events", "modules/events/generated/pyCGM2.Events.eventFilters.EventFilter", "modules/events/generated/pyCGM2.Events.eventProcedures.EventProcedure", "modules/events/generated/pyCGM2.Events.eventProcedures.ZeniProcedure", "modules/forcePlates/forcePlates", "modules/forcePlates/generated/pyCGM2.ForcePlates.forceplates.ForcePlateIntegration", "modules/forcePlates/generated/pyCGM2.ForcePlates.forceplates.addForcePlateGeneralEvents", "modules/forcePlates/generated/pyCGM2.ForcePlates.forceplates.appendForcePlateCornerAsMarker", "modules/forcePlates/generated/pyCGM2.ForcePlates.forceplates.combineForcePlate", "modules/forcePlates/generated/pyCGM2.ForcePlates.forceplates.correctForcePlateType5", "modules/forcePlates/generated/pyCGM2.ForcePlates.forceplates.detectGaitConsecutiveForcePlates", "modules/forcePlates/generated/pyCGM2.ForcePlates.forceplates.matchingFootSideOnForceplate", "modules/imu/generated/pyCGM2.IMU.Procedures.imuMotionProcedure.GlobalAngleMotionProcedure", "modules/imu/generated/pyCGM2.IMU.Procedures.imuMotionProcedure.ImuMotionProcedure", "modules/imu/generated/pyCGM2.IMU.Procedures.imuMotionProcedure.QuaternionMotionProcedure", "modules/imu/generated/pyCGM2.IMU.Procedures.imuMotionProcedure.RealignedMotionProcedure", "modules/imu/generated/pyCGM2.IMU.Procedures.imuReaderProcedures.C3dBlueTridentProcedure", "modules/imu/generated/pyCGM2.IMU.Procedures.imuReaderProcedures.CsvProcedure", "modules/imu/generated/pyCGM2.IMU.Procedures.imuReaderProcedures.DataframeProcedure", "modules/imu/generated/pyCGM2.IMU.Procedures.imuReaderProcedures.ImuReaderProcedure", "modules/imu/generated/pyCGM2.IMU.Procedures.relativeImuAngleProcedures.RelativeAnglesProcedure", "modules/imu/generated/pyCGM2.IMU.imu.Imu", "modules/imu/generated/pyCGM2.IMU.imuFilters.ImuReaderFilter", "modules/imu/generated/pyCGM2.IMU.opensense.interface.opensenseFilters.opensenseInterfaceImuInverseKinematicFilter", "modules/imu/generated/pyCGM2.IMU.opensense.interface.opensenseFilters.opensenseInterfaceImuPlacerFilter", "modules/imu/generated/pyCGM2.IMU.opensense.interface.procedures.opensenseImuKinematicFitterProcedure.ImuInverseKinematicXMLProcedure", "modules/imu/generated/pyCGM2.IMU.opensense.interface.procedures.opensenseImuPlacerInterfaceProcedure.ImuPlacerXMLProcedure", "modules/imu/imu", "modules/inspector/generated/pyCGM2.Inspector.inspectorFilters.InspectorFilter", "modules/inspector/generated/pyCGM2.Inspector.inspectorProcedures.InspectorProcedure", "modules/inspector/generated/pyCGM2.Inspector.inspectorProcedures.MarkerPresenceDetectionProcedure", "modules/inspector/inspector", "modules/math/generated/pyCGM2.Math.derivation.firstOrderFiniteDifference", "modules/math/generated/pyCGM2.Math.derivation.matrixFirstDerivation", "modules/math/generated/pyCGM2.Math.derivation.matrixSecondDerivation", "modules/math/generated/pyCGM2.Math.derivation.splineDerivation", "modules/math/generated/pyCGM2.Math.derivation.splineFittingDerivation", "modules/math/generated/pyCGM2.Math.euler.euler_xyz", "modules/math/generated/pyCGM2.Math.euler.euler_xzy", "modules/math/generated/pyCGM2.Math.euler.euler_yxz", "modules/math/generated/pyCGM2.Math.euler.euler_yzx", "modules/math/generated/pyCGM2.Math.euler.euler_zxy", "modules/math/generated/pyCGM2.Math.euler.euler_zyx", "modules/math/generated/pyCGM2.Math.euler.wrapEulerTo", "modules/math/generated/pyCGM2.Math.geometry.LineLineIntersect", "modules/math/generated/pyCGM2.Math.geometry.angleFrom2Vectors", "modules/math/generated/pyCGM2.Math.geometry.computeAngle", "modules/math/generated/pyCGM2.Math.geometry.oppositeVector", "modules/math/generated/pyCGM2.Math.normalisation.timeSequenceNormalisation", "modules/math/generated/pyCGM2.Math.numeric.rms", "modules/math/generated/pyCGM2.Math.numeric.skewMatrix", "modules/math/math", "modules/model/bodySegmentParameters", "modules/model/cgm2", "modules/model/generated/pyCGM2.Model.CGM2.cgm.CGM", "modules/model/generated/pyCGM2.Model.CGM2.cgm.CGM1", "modules/model/generated/pyCGM2.Model.CGM2.cgm2.CGM2_1", "modules/model/generated/pyCGM2.Model.CGM2.cgm2.CGM2_2", "modules/model/generated/pyCGM2.Model.CGM2.cgm2.CGM2_3", "modules/model/generated/pyCGM2.Model.CGM2.cgm2.CGM2_4", "modules/model/generated/pyCGM2.Model.CGM2.cgm2.CGM2_5", "modules/model/generated/pyCGM2.Model.CGM2.decorators.applyBasicDecorators", "modules/model/generated/pyCGM2.Model.CGM2.decorators.applyHJCDecorators", "modules/model/generated/pyCGM2.Model.CGM2.decorators.applyKJC_AJCDecorators", "modules/model/generated/pyCGM2.Model.Opensim.interface.opensimInterface.opensimXmlInterface", "modules/model/generated/pyCGM2.Model.Opensim.interface.opensimInterface.osimCgmInterface", "modules/model/generated/pyCGM2.Model.Opensim.interface.opensimInterface.osimInterface", "modules/model/generated/pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceAnalysesFilter", "modules/model/generated/pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceInverseDynamicsFilter", "modules/model/generated/pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceInverseKinematicsFilter", "modules/model/generated/pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceScalingFilter", "modules/model/generated/pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceStaticOptimizationFilter", "modules/model/generated/pyCGM2.Model.Opensim.interface.procedures.analysisReport.opensimAnalysesInterfaceProcedure.AnalysesXmlCgmDrivenModelProcedure", "modules/model/generated/pyCGM2.Model.Opensim.interface.procedures.analysisReport.opensimAnalysesInterfaceProcedure.AnalysesXmlCgmProcedure", "modules/model/generated/pyCGM2.Model.Opensim.interface.procedures.analysisReport.opensimAnalysesInterfaceProcedure.AnalysesXmlProcedure", "modules/model/generated/pyCGM2.Model.Opensim.interface.procedures.inverseDynamics.opensimInverseDynamicsInterfaceProcedure.InverseDynamicsXmlCgmProcedure", "modules/model/generated/pyCGM2.Model.Opensim.interface.procedures.inverseDynamics.opensimInverseDynamicsInterfaceProcedure.InverseDynamicsXmlProcedure", "modules/model/generated/pyCGM2.Model.Opensim.interface.procedures.inverseKinematics.opensimInverseKinematicsInterfaceProcedure.InverseKinematicXmlCgmProcedure", "modules/model/generated/pyCGM2.Model.Opensim.interface.procedures.inverseKinematics.opensimInverseKinematicsInterfaceProcedure.InverseKinematicXmlProcedure", "modules/model/generated/pyCGM2.Model.Opensim.interface.procedures.scaling.opensimScalingInterfaceProcedure.ScalingXmlCgmProcedure", "modules/model/generated/pyCGM2.Model.Opensim.interface.procedures.scaling.opensimScalingInterfaceProcedure.ScalingXmlProcedure", "modules/model/generated/pyCGM2.Model.Opensim.interface.procedures.staticOptimisation.opensimStaticOptimizationInterfaceProcedure.StaticOptimisationXmlCgmProcedure", "modules/model/generated/pyCGM2.Model.Opensim.interface.procedures.staticOptimisation.opensimStaticOptimizationInterfaceProcedure.StaticOptimisationXmlProcedure", "modules/model/generated/pyCGM2.Model.Procedures.forcePlateIntegrationProcedures.ForcePlateIntegrationProcedure", "modules/model/generated/pyCGM2.Model.Procedures.forcePlateIntegrationProcedures.GaitForcePlateIntegrationProcedure", "modules/model/generated/pyCGM2.Model.Procedures.modelMotionCorrection.ModelCorrectionProcedure", "modules/model/generated/pyCGM2.Model.Procedures.modelMotionCorrection.Naim2019ThighMisaligmentCorrectionProcedure", "modules/model/generated/pyCGM2.Model.Procedures.modelQuality.GeneralScoreResidualProcedure", "modules/model/generated/pyCGM2.Model.Procedures.modelQuality.ModelScoreResidualProcedure", "modules/model/generated/pyCGM2.Model.Procedures.modelQuality.QualityProcedure", "modules/model/generated/pyCGM2.Model.Procedures.modelQuality.WandAngleQualityProcedure", "modules/model/generated/pyCGM2.Model.bodySegmentParameters.Bsp", "modules/model/generated/pyCGM2.Model.bodySegmentParameters.updateFromcustomMp", "modules/model/generated/pyCGM2.Model.frame.Frame", "modules/model/generated/pyCGM2.Model.frame.Node", "modules/model/generated/pyCGM2.Model.frame.angleAxis_TO_quaternion", "modules/model/generated/pyCGM2.Model.frame.angleAxis_TO_rotationMatrix", "modules/model/generated/pyCGM2.Model.frame.quaternion_TO_angleAxis", "modules/model/generated/pyCGM2.Model.frame.quaternion_TO_rotationMatrix", "modules/model/generated/pyCGM2.Model.frame.rotationMatrix_TO_angleAxis", "modules/model/generated/pyCGM2.Model.frame.rotationMatrix_TO_quaternion", "modules/model/generated/pyCGM2.Model.frame.setFrameData", "modules/model/generated/pyCGM2.Model.model.AnatomicalReferential", "modules/model/generated/pyCGM2.Model.model.ClinicalDescriptor", "modules/model/generated/pyCGM2.Model.model.Joint", "modules/model/generated/pyCGM2.Model.model.Model", "modules/model/generated/pyCGM2.Model.model.Model6Dof", "modules/model/generated/pyCGM2.Model.model.Referential", "modules/model/generated/pyCGM2.Model.model.Segment", "modules/model/generated/pyCGM2.Model.model.TechnicalReferential", "modules/model/generated/pyCGM2.Model.modelDecorator.AnkleCalibrationDecorator", "modules/model/generated/pyCGM2.Model.modelDecorator.Cgm1ManualOffsets", "modules/model/generated/pyCGM2.Model.modelDecorator.DecoratorModel", "modules/model/generated/pyCGM2.Model.modelDecorator.HipJointCenterDecorator", "modules/model/generated/pyCGM2.Model.modelDecorator.Kad", "modules/model/generated/pyCGM2.Model.modelDecorator.KneeCalibrationDecorator", "modules/model/generated/pyCGM2.Model.modelDecorator.VCMJointCentre", "modules/model/generated/pyCGM2.Model.modelDecorator.bellRegression", "modules/model/generated/pyCGM2.Model.modelDecorator.calibration2Dof", "modules/model/generated/pyCGM2.Model.modelDecorator.chord", "modules/model/generated/pyCGM2.Model.modelDecorator.davisRegression", "modules/model/generated/pyCGM2.Model.modelDecorator.footJointCentreFromMet", "modules/model/generated/pyCGM2.Model.modelDecorator.haraRegression", "modules/model/generated/pyCGM2.Model.modelDecorator.harringtonRegression", "modules/model/generated/pyCGM2.Model.modelDecorator.midPoint", "modules/model/generated/pyCGM2.Model.modelDecorator.saraCalibration", "modules/model/generated/pyCGM2.Model.modelFilters.CGMLowerlimbInverseDynamicProcedure", "modules/model/generated/pyCGM2.Model.modelFilters.CentreOfMassFilter", "modules/model/generated/pyCGM2.Model.modelFilters.CoordinateSystemDisplayFilter", "modules/model/generated/pyCGM2.Model.modelFilters.ForcePlateAssemblyFilter", "modules/model/generated/pyCGM2.Model.modelFilters.GeneralCalibrationProcedure", "modules/model/generated/pyCGM2.Model.modelFilters.GeneralCoordinateSystemProcedure", "modules/model/generated/pyCGM2.Model.modelFilters.GroundReactionForceAdapterFilter", "modules/model/generated/pyCGM2.Model.modelFilters.GroundReactionIntegrationFilter", "modules/model/generated/pyCGM2.Model.modelFilters.InverseDynamicFilter", "modules/model/generated/pyCGM2.Model.modelFilters.InverseDynamicProcedure", "modules/model/generated/pyCGM2.Model.modelFilters.JointPowerFilter", "modules/model/generated/pyCGM2.Model.modelFilters.ModelAbsoluteAnglesFilter", "modules/model/generated/pyCGM2.Model.modelFilters.ModelCalibrationFilter", "modules/model/generated/pyCGM2.Model.modelFilters.ModelCoordinateSystemProcedure", "modules/model/generated/pyCGM2.Model.modelFilters.ModelJCSFilter", "modules/model/generated/pyCGM2.Model.modelFilters.ModelMotionCorrectionFilter", "modules/model/generated/pyCGM2.Model.modelFilters.ModelMotionFilter", "modules/model/generated/pyCGM2.Model.modelFilters.ModelQualityFilter", "modules/model/generated/pyCGM2.Model.modelFilters.StaticCalibrationProcedure", "modules/model/model", "modules/model/modelComponents", "modules/model/opensim", "modules/moduleIndex", "modules/nexus/eclipse", "modules/nexus/generated/pyCGM2.Nexus.Devices.AnalogDevice", "modules/nexus/generated/pyCGM2.Nexus.Devices.Channel", "modules/nexus/generated/pyCGM2.Nexus.Devices.Device", "modules/nexus/generated/pyCGM2.Nexus.Devices.ForcePlate", "modules/nexus/generated/pyCGM2.Nexus.eclipse.EnfReader", "modules/nexus/generated/pyCGM2.Nexus.eclipse.PatientEnfReader", "modules/nexus/generated/pyCGM2.Nexus.eclipse.SessionEnfReader", "modules/nexus/generated/pyCGM2.Nexus.eclipse.TrialEnfReader", "modules/nexus/generated/pyCGM2.Nexus.eclipse.cleanEnf", "modules/nexus/generated/pyCGM2.Nexus.eclipse.generateEmptyENF", "modules/nexus/generated/pyCGM2.Nexus.eclipse.getCurrentMarkedEnfs", "modules/nexus/generated/pyCGM2.Nexus.eclipse.getCurrentMarkedNodes", "modules/nexus/generated/pyCGM2.Nexus.eclipse.getEnfFiles", "modules/nexus/generated/pyCGM2.Nexus.nexusFilters.NexusConstructAcquisitionFilter", "modules/nexus/generated/pyCGM2.Nexus.nexusFilters.NexusModelFilter", "modules/nexus/generated/pyCGM2.Nexus.nexusTools.appendAnalysisParameters", "modules/nexus/generated/pyCGM2.Nexus.nexusTools.appendAngleFromAcq", "modules/nexus/generated/pyCGM2.Nexus.nexusTools.appendBones", "modules/nexus/generated/pyCGM2.Nexus.nexusTools.appendBtkScalarFromAcq", "modules/nexus/generated/pyCGM2.Nexus.nexusTools.appendForceFromAcq", "modules/nexus/generated/pyCGM2.Nexus.nexusTools.appendModelledMarkerFromAcq", "modules/nexus/generated/pyCGM2.Nexus.nexusTools.appendMomentFromAcq", "modules/nexus/generated/pyCGM2.Nexus.nexusTools.appendPowerFromAcq", "modules/nexus/generated/pyCGM2.Nexus.nexusTools.checkActivatedSubject", "modules/nexus/generated/pyCGM2.Nexus.nexusTools.createEvents", "modules/nexus/generated/pyCGM2.Nexus.nexusTools.createGeneralEvents", "modules/nexus/generated/pyCGM2.Nexus.nexusTools.getActiveSubject", "modules/nexus/generated/pyCGM2.Nexus.nexusTools.getForcePlateAssignment", "modules/nexus/generated/pyCGM2.Nexus.nexusTools.setTrajectoryFromAcq", "modules/nexus/generated/pyCGM2.Nexus.nexusTools.setTrajectoryFromArray", "modules/nexus/generated/pyCGM2.Nexus.nexusUtils.getNexusSubjectMp", "modules/nexus/generated/pyCGM2.Nexus.nexusUtils.updateNexusSubjectMp", "modules/nexus/nexus", "modules/processing/analysis", "modules/processing/classification", "modules/processing/cycle", "modules/processing/discretePoints", "modules/processing/generated/pyCGM2.Processing.C3dManager.c3dManager.C3dManager", "modules/processing/generated/pyCGM2.Processing.C3dManager.c3dManagerFilters.C3dManagerFilter", "modules/processing/generated/pyCGM2.Processing.C3dManager.c3dManagerProcedures.C3dManagerProcedure", "modules/processing/generated/pyCGM2.Processing.C3dManager.c3dManagerProcedures.DistinctC3dSetProcedure", "modules/processing/generated/pyCGM2.Processing.C3dManager.c3dManagerProcedures.UniqueBtkAcqSetProcedure", "modules/processing/generated/pyCGM2.Processing.C3dManager.c3dManagerProcedures.UniqueC3dSetProcedure", "modules/processing/generated/pyCGM2.Processing.Classification.classificationFilters.ClassificationFilter", "modules/processing/generated/pyCGM2.Processing.Classification.classificationProcedures.ClassificationProcedure", "modules/processing/generated/pyCGM2.Processing.Classification.classificationProcedures.PFKEprocedure", "modules/processing/generated/pyCGM2.Processing.DiscretePoints.discretePointFilters.DiscretePointsFilter", "modules/processing/generated/pyCGM2.Processing.DiscretePoints.discretePointProcedures.BenedettiProcedure", "modules/processing/generated/pyCGM2.Processing.DiscretePoints.discretePointProcedures.DiscretePointProcedure", "modules/processing/generated/pyCGM2.Processing.DiscretePoints.discretePointProcedures.GoldbergProcedure", "modules/processing/generated/pyCGM2.Processing.DiscretePoints.discretePointProcedures.MaxMinProcedure", "modules/processing/generated/pyCGM2.Processing.JointPatterns.jointPatternFilters.JointPatternFilter", "modules/processing/generated/pyCGM2.Processing.JointPatterns.jointPatternProcedures.JointPatternProcedure", "modules/processing/generated/pyCGM2.Processing.JointPatterns.jointPatternProcedures.XlsJointPatternProcedure", "modules/processing/generated/pyCGM2.Processing.ProgressionFrame.progressionFrameFilters.ProgressionFrameFilter", "modules/processing/generated/pyCGM2.Processing.ProgressionFrame.progressionFrameProcedures.PelvisProgressionFrameProcedure", "modules/processing/generated/pyCGM2.Processing.ProgressionFrame.progressionFrameProcedures.PointProgressionFrameProcedure", "modules/processing/generated/pyCGM2.Processing.ProgressionFrame.progressionFrameProcedures.ProgressionFrameProcedure", "modules/processing/generated/pyCGM2.Processing.ProgressionFrame.progressionFrameProcedures.ThoraxProgressionFrameProcedure", "modules/processing/generated/pyCGM2.Processing.Representative.representativeFilters.RepresentativeCycleFilter", "modules/processing/generated/pyCGM2.Processing.Representative.representativeProcedures.RepresentativeProcedure", "modules/processing/generated/pyCGM2.Processing.Representative.representativeProcedures.Sangeux2015Procedure", "modules/processing/generated/pyCGM2.Processing.Scores.scoreFilters.ScoreFilter", "modules/processing/generated/pyCGM2.Processing.Scores.scoreProcedures.CGM1_GPS", "modules/processing/generated/pyCGM2.Processing.Scores.scoreProcedures.ScoreProcedure", "modules/processing/generated/pyCGM2.Processing.analysis.AbstractBuilder", "modules/processing/generated/pyCGM2.Processing.analysis.Analysis", "modules/processing/generated/pyCGM2.Processing.analysis.AnalysisBuilder", "modules/processing/generated/pyCGM2.Processing.analysis.AnalysisFilter", "modules/processing/generated/pyCGM2.Processing.analysis.AnalysisStructure", "modules/processing/generated/pyCGM2.Processing.analysis.GaitAnalysisBuilder", "modules/processing/generated/pyCGM2.Processing.analysisHandler.getAnalysisSection", "modules/processing/generated/pyCGM2.Processing.analysisHandler.getNumberOfCycle", "modules/processing/generated/pyCGM2.Processing.analysisHandler.getPhases", "modules/processing/generated/pyCGM2.Processing.analysisHandler.getValues", "modules/processing/generated/pyCGM2.Processing.analysisHandler.isKeyExist", "modules/processing/generated/pyCGM2.Processing.analysisHandler.normalizedMuscleLength_withPose", "modules/processing/generated/pyCGM2.Processing.cycle.Cycle", "modules/processing/generated/pyCGM2.Processing.cycle.Cycles", "modules/processing/generated/pyCGM2.Processing.cycle.CyclesBuilder", "modules/processing/generated/pyCGM2.Processing.cycle.CyclesFilter", "modules/processing/generated/pyCGM2.Processing.cycle.GaitCycle", "modules/processing/generated/pyCGM2.Processing.cycle.GaitCyclesBuilder", "modules/processing/generated/pyCGM2.Processing.cycle.analog_descriptiveStats", "modules/processing/generated/pyCGM2.Processing.cycle.construcGaitCycle", "modules/processing/generated/pyCGM2.Processing.cycle.point_descriptiveStats", "modules/processing/generated/pyCGM2.Processing.cycle.spatioTemporelParameter_descriptiveStats", "modules/processing/generated/pyCGM2.Processing.exporter.AnalysisExportFilter", "modules/processing/generated/pyCGM2.Processing.exporter.XlsAnalysisExportFilter", "modules/processing/generated/pyCGM2.Processing.exporter.XlsExportDataFrameFilter", "modules/processing/jointPatterns", "modules/processing/manager", "modules/processing/processing", "modules/processing/progression", "modules/processing/representative", "modules/processing/scores", "modules/qtm/generated/pyCGM2.QTM.qtmTools.SubjectMp", "modules/qtm/generated/pyCGM2.QTM.qtmTools.detectMeasurementType", "modules/qtm/generated/pyCGM2.QTM.qtmTools.findDynamic", "modules/qtm/generated/pyCGM2.QTM.qtmTools.findKneeCalibration", "modules/qtm/generated/pyCGM2.QTM.qtmTools.findStatic", "modules/qtm/generated/pyCGM2.QTM.qtmTools.getFilename", "modules/qtm/generated/pyCGM2.QTM.qtmTools.getForcePlateAssigment", "modules/qtm/generated/pyCGM2.QTM.qtmTools.getKneeFunctionCalibMethod", "modules/qtm/generated/pyCGM2.QTM.qtmTools.get_creation_date", "modules/qtm/generated/pyCGM2.QTM.qtmTools.get_modelled_trials", "modules/qtm/generated/pyCGM2.QTM.qtmTools.isType", "modules/qtm/qtm", "modules/report/generated/pyCGM2.Report.Viewers.comparisonPlotViewers.KinematicsPlotComparisonViewer", "modules/report/generated/pyCGM2.Report.Viewers.comparisonPlotViewers.KineticsPlotComparisonViewer", "modules/report/generated/pyCGM2.Report.Viewers.customPlotViewers.SaggitalGagePlotViewer", "modules/report/generated/pyCGM2.Report.Viewers.emgPlotViewers.CoactivationEmgPlotViewer", "modules/report/generated/pyCGM2.Report.Viewers.emgPlotViewers.EnvEmgGaitPlotPanelViewer", "modules/report/generated/pyCGM2.Report.Viewers.emgPlotViewers.MultipleAnalysis_EnvEmgPlotPanelViewer", "modules/report/generated/pyCGM2.Report.Viewers.emgPlotViewers.TemporalEmgPlotViewer", "modules/report/generated/pyCGM2.Report.Viewers.groundReactionPlotViewers.NormalizedGaitGrfIntegrationPlotViewer", "modules/report/generated/pyCGM2.Report.Viewers.groundReactionPlotViewers.NormalizedGaitMeanGrfIntegrationPlotViewer", "modules/report/generated/pyCGM2.Report.Viewers.groundReactionPlotViewers.NormalizedGroundReactionForcePlotViewer", "modules/report/generated/pyCGM2.Report.Viewers.musclePlotViewers.MuscleNormalizedPlotPanelViewer", "modules/report/generated/pyCGM2.Report.Viewers.plotViewers.GpsMapPlotViewer", "modules/report/generated/pyCGM2.Report.Viewers.plotViewers.NormalizedKinematicsPlotViewer", "modules/report/generated/pyCGM2.Report.Viewers.plotViewers.NormalizedKineticsPlotViewer", "modules/report/generated/pyCGM2.Report.Viewers.plotViewers.PlotViewer", "modules/report/generated/pyCGM2.Report.Viewers.plotViewers.SpatioTemporalPlotViewer", "modules/report/generated/pyCGM2.Report.Viewers.plotViewers.TemporalKinematicsPlotViewer", "modules/report/generated/pyCGM2.Report.Viewers.plotViewers.TemporalKineticsPlotViewer", "modules/report/generated/pyCGM2.Report.normativeDatasets.NormalSTP", "modules/report/generated/pyCGM2.Report.normativeDatasets.NormativeData", "modules/report/generated/pyCGM2.Report.plot.addNormalActivationLayer", "modules/report/generated/pyCGM2.Report.plot.addRectanglePatches", "modules/report/generated/pyCGM2.Report.plot.addTemporalNormalActivationLayer", "modules/report/generated/pyCGM2.Report.plot.consistencyPlot", "modules/report/generated/pyCGM2.Report.plot.descriptivePlot", "modules/report/generated/pyCGM2.Report.plot.gaitConsistencyPlot", "modules/report/generated/pyCGM2.Report.plot.gaitDescriptivePlot", "modules/report/generated/pyCGM2.Report.plot.gaitMeanPlot", "modules/report/generated/pyCGM2.Report.plot.meanPlot", "modules/report/generated/pyCGM2.Report.plot.stpHorizontalHistogram", "modules/report/generated/pyCGM2.Report.plot.temporalPlot", "modules/report/generated/pyCGM2.Report.plotFilters.PlottingFilter", "modules/report/generated/pyCGM2.Report.plotUtils.colorContext", "modules/report/normativeData", "modules/report/plot", "modules/report/report", "modules/signal/generated/pyCGM2.Signal.detector.detectStart_fromThreshold", "modules/signal/generated/pyCGM2.Signal.detector.detect_cusum", "modules/signal/generated/pyCGM2.Signal.detector.detect_onset", "modules/signal/generated/pyCGM2.Signal.detector.detect_peaks", "modules/signal/generated/pyCGM2.Signal.detector.detect_seq", "modules/signal/generated/pyCGM2.Signal.signal_processing.arrayLowPassFiltering", "modules/signal/generated/pyCGM2.Signal.signal_processing.downsample", "modules/signal/generated/pyCGM2.Signal.signal_processing.enveloppe", "modules/signal/generated/pyCGM2.Signal.signal_processing.forcePlateFiltering", "modules/signal/generated/pyCGM2.Signal.signal_processing.highPass", "modules/signal/generated/pyCGM2.Signal.signal_processing.markerFiltering", "modules/signal/generated/pyCGM2.Signal.signal_processing.rectify", "modules/signal/generated/pyCGM2.Signal.signal_processing.remove50hz", "modules/signal/signal", "modules/tools/generated/pyCGM2.Tools.btkTools.GetAnalogNames", "modules/tools/generated/pyCGM2.Tools.btkTools.GetMarkerNames", "modules/tools/generated/pyCGM2.Tools.btkTools._getSectionFromMd", "modules/tools/generated/pyCGM2.Tools.btkTools.applyOnValidFrames", "modules/tools/generated/pyCGM2.Tools.btkTools.applyRotation", "modules/tools/generated/pyCGM2.Tools.btkTools.applyTranslators", "modules/tools/generated/pyCGM2.Tools.btkTools.applyValidFramesOnOutput", "modules/tools/generated/pyCGM2.Tools.btkTools.automaticKineticDetection", "modules/tools/generated/pyCGM2.Tools.btkTools.btkAnalogToKtkTimeseries", "modules/tools/generated/pyCGM2.Tools.btkTools.btkPointToKtkTimeseries", "modules/tools/generated/pyCGM2.Tools.btkTools.buildTrials", "modules/tools/generated/pyCGM2.Tools.btkTools.calculateAngleFrom3points", "modules/tools/generated/pyCGM2.Tools.btkTools.changeSubjectName", "modules/tools/generated/pyCGM2.Tools.btkTools.checkForcePlateExist", "modules/tools/generated/pyCGM2.Tools.btkTools.checkGap", "modules/tools/generated/pyCGM2.Tools.btkTools.checkMarkers", "modules/tools/generated/pyCGM2.Tools.btkTools.checkMetadata", "modules/tools/generated/pyCGM2.Tools.btkTools.checkMultipleSubject", "modules/tools/generated/pyCGM2.Tools.btkTools.cleanAcq", "modules/tools/generated/pyCGM2.Tools.btkTools.clearEvents", "modules/tools/generated/pyCGM2.Tools.btkTools.clearPoints", "modules/tools/generated/pyCGM2.Tools.btkTools.constructMarker", "modules/tools/generated/pyCGM2.Tools.btkTools.constructPhantom", "modules/tools/generated/pyCGM2.Tools.btkTools.createPhantoms", "modules/tools/generated/pyCGM2.Tools.btkTools.deleteContextEvents", "modules/tools/generated/pyCGM2.Tools.btkTools.findMarkerGap", "modules/tools/generated/pyCGM2.Tools.btkTools.findValidFrames", "modules/tools/generated/pyCGM2.Tools.btkTools.getAllParamAnalysis", "modules/tools/generated/pyCGM2.Tools.btkTools.getForcePlateWrench", "modules/tools/generated/pyCGM2.Tools.btkTools.getFrameBoundaries", "modules/tools/generated/pyCGM2.Tools.btkTools.getLabelsFromScalar", "modules/tools/generated/pyCGM2.Tools.btkTools.getNumberOfForcePlate", "modules/tools/generated/pyCGM2.Tools.btkTools.getNumberOfModelOutputs", "modules/tools/generated/pyCGM2.Tools.btkTools.getParamAnalysis", "modules/tools/generated/pyCGM2.Tools.btkTools.getScalar", "modules/tools/generated/pyCGM2.Tools.btkTools.getStartEndEvents", "modules/tools/generated/pyCGM2.Tools.btkTools.getValidFrames", "modules/tools/generated/pyCGM2.Tools.btkTools.getVisibleMarkersAtFrame", "modules/tools/generated/pyCGM2.Tools.btkTools.hasChild", "modules/tools/generated/pyCGM2.Tools.btkTools.isAnalogExist", "modules/tools/generated/pyCGM2.Tools.btkTools.isEventExist", "modules/tools/generated/pyCGM2.Tools.btkTools.isGap", "modules/tools/generated/pyCGM2.Tools.btkTools.isKineticFlag", "modules/tools/generated/pyCGM2.Tools.btkTools.isPhantom", "modules/tools/generated/pyCGM2.Tools.btkTools.isPointExist", "modules/tools/generated/pyCGM2.Tools.btkTools.isPointsExist", "modules/tools/generated/pyCGM2.Tools.btkTools.keepAndDeleteOtherPoints", "modules/tools/generated/pyCGM2.Tools.btkTools.markerUnitConverter", "modules/tools/generated/pyCGM2.Tools.btkTools.markersToArray", "modules/tools/generated/pyCGM2.Tools.btkTools.modifyEventSubject", "modules/tools/generated/pyCGM2.Tools.btkTools.modifySubject", "modules/tools/generated/pyCGM2.Tools.btkTools.renameEvent", "modules/tools/generated/pyCGM2.Tools.btkTools.smartAppendAnalog", "modules/tools/generated/pyCGM2.Tools.btkTools.smartAppendParamAnalysis", "modules/tools/generated/pyCGM2.Tools.btkTools.smartAppendPoint", "modules/tools/generated/pyCGM2.Tools.btkTools.smartCreateEvent", "modules/tools/generated/pyCGM2.Tools.btkTools.smartGetEvents", "modules/tools/generated/pyCGM2.Tools.btkTools.smartGetMetadata", "modules/tools/generated/pyCGM2.Tools.btkTools.smartReader", "modules/tools/generated/pyCGM2.Tools.btkTools.smartSetMetadata", "modules/tools/generated/pyCGM2.Tools.btkTools.smartWriter", "modules/tools/generated/pyCGM2.Tools.btkTools.sortedEvents", "modules/tools/generated/pyCGM2.Tools.opensimTools.export_CgmToMot", "modules/tools/generated/pyCGM2.Tools.opensimTools.footReactionMotFile", "modules/tools/generated/pyCGM2.Tools.opensimTools.mot2pointValues", "modules/tools/generated/pyCGM2.Tools.opensimTools.smartGetValues", "modules/tools/generated/pyCGM2.Tools.opensimTools.sto2pointValues", "modules/tools/generated/pyCGM2.Tools.opensimTools.transformMarker_ToOsimReferencial", "modules/tools/tools", "modules/utils/generated/pyCGM2.Utils.files.concatenateExcelFiles", "modules/utils/generated/pyCGM2.Utils.files.copyPaste", "modules/utils/generated/pyCGM2.Utils.files.copyPasteDirectory", "modules/utils/generated/pyCGM2.Utils.files.copySessionFolder", "modules/utils/generated/pyCGM2.Utils.files.createDir", "modules/utils/generated/pyCGM2.Utils.files.deleteDirectory", "modules/utils/generated/pyCGM2.Utils.files.getC3dFiles", "modules/utils/generated/pyCGM2.Utils.files.getDirname", "modules/utils/generated/pyCGM2.Utils.files.getDirs", "modules/utils/generated/pyCGM2.Utils.files.getFileCreationDate", "modules/utils/generated/pyCGM2.Utils.files.getFilename", "modules/utils/generated/pyCGM2.Utils.files.getFiles", "modules/utils/generated/pyCGM2.Utils.files.getIKweightSet", "modules/utils/generated/pyCGM2.Utils.files.getMp", "modules/utils/generated/pyCGM2.Utils.files.getMpFileContent", "modules/utils/generated/pyCGM2.Utils.files.getTranslators", "modules/utils/generated/pyCGM2.Utils.files.is_json", "modules/utils/generated/pyCGM2.Utils.files.is_yaml", "modules/utils/generated/pyCGM2.Utils.files.loadAnalysis", "modules/utils/generated/pyCGM2.Utils.files.loadModel", "modules/utils/generated/pyCGM2.Utils.files.loadModelSettings", "modules/utils/generated/pyCGM2.Utils.files.loadMp", "modules/utils/generated/pyCGM2.Utils.files.loadSettings", "modules/utils/generated/pyCGM2.Utils.files.openFile", "modules/utils/generated/pyCGM2.Utils.files.openJson", "modules/utils/generated/pyCGM2.Utils.files.openPickleFile", "modules/utils/generated/pyCGM2.Utils.files.openYaml", "modules/utils/generated/pyCGM2.Utils.files.readContent", "modules/utils/generated/pyCGM2.Utils.files.readXml", "modules/utils/generated/pyCGM2.Utils.files.renameFile", "modules/utils/generated/pyCGM2.Utils.files.saveAnalysis", "modules/utils/generated/pyCGM2.Utils.files.saveJson", "modules/utils/generated/pyCGM2.Utils.files.saveModel", "modules/utils/generated/pyCGM2.Utils.files.saveMp", "modules/utils/generated/pyCGM2.Utils.files.savePickleFile", "modules/utils/generated/pyCGM2.Utils.files.saveYaml", "modules/utils/generated/pyCGM2.Utils.files.try_as", "modules/utils/generated/pyCGM2.Utils.utils.checkSimilarElement", "modules/utils/generated/pyCGM2.Utils.utils.getSimilarElement", "modules/utils/generated/pyCGM2.Utils.utils.homogeneizeArguments", "modules/utils/generated/pyCGM2.Utils.utils.isInRange", "modules/utils/generated/pyCGM2.Utils.utils.str", "modules/utils/generated/pyCGM2.Utils.utils.toBool", "modules/utils/utils", "thirdparty/thirdpartyIndex"], "filenames": ["Apps/apps.rst", "Apps/nexus.rst", "Apps/qtm.rst", "Apps/settings.rst", "Lib/analysis/analysis.rst", "Lib/analysis/generated/pyCGM2.Lib.analysis.automaticCPdeviations.rst", "Lib/analysis/generated/pyCGM2.Lib.analysis.exportAnalysis.rst", "Lib/analysis/generated/pyCGM2.Lib.analysis.makeAnalysis.rst", "Lib/cgm/cgm.rst", "Lib/cgm/generated/pyCGM2.Lib.CGM.cgm1.calibrate.rst", "Lib/cgm/generated/pyCGM2.Lib.CGM.cgm1.fitting.rst", "Lib/cgm/generated/pyCGM2.Lib.CGM.cgm1_1.calibrate.rst", "Lib/cgm/generated/pyCGM2.Lib.CGM.cgm1_1.fitting.rst", "Lib/cgm/generated/pyCGM2.Lib.CGM.cgm2_1.calibrate.rst", "Lib/cgm/generated/pyCGM2.Lib.CGM.cgm2_1.fitting.rst", "Lib/cgm/generated/pyCGM2.Lib.CGM.cgm2_2.calibrate.rst", "Lib/cgm/generated/pyCGM2.Lib.CGM.cgm2_2.fitting.rst", "Lib/cgm/generated/pyCGM2.Lib.CGM.cgm2_3.calibrate.rst", "Lib/cgm/generated/pyCGM2.Lib.CGM.cgm2_3.fitting.rst", "Lib/cgm/generated/pyCGM2.Lib.CGM.cgm2_4.calibrate.rst", "Lib/cgm/generated/pyCGM2.Lib.CGM.cgm2_4.fitting.rst", "Lib/cgm/generated/pyCGM2.Lib.CGM.cgm2_5.calibrate.rst", "Lib/cgm/generated/pyCGM2.Lib.CGM.cgm2_5.fitting.rst", "Lib/cgm/generated/pyCGM2.Lib.CGM.kneeCalibration.calibration2Dof.rst", "Lib/cgm/generated/pyCGM2.Lib.CGM.kneeCalibration.sara.rst", "Lib/cgm/generated/pyCGM2.Lib.CGM.musculoskeletal.cgm2_2.calibrate.rst", "Lib/cgm/generated/pyCGM2.Lib.CGM.musculoskeletal.cgm2_2.fitting.rst", "Lib/cgm/generated/pyCGM2.Lib.CGM.musculoskeletal.cgm2_3.calibrate.rst", "Lib/cgm/generated/pyCGM2.Lib.CGM.musculoskeletal.cgm2_3.fitting.rst", "Lib/emg/emg.rst", "Lib/emg/generated/pyCGM2.Lib.emg.loadEmg.rst", "Lib/emg/generated/pyCGM2.Lib.emg.normalizedEMG.rst", "Lib/emg/generated/pyCGM2.Lib.emg.processEMG.rst", "Lib/emg/generated/pyCGM2.Lib.emg.processEMG_fromBtkAcq.rst", "Lib/event/eventDetectors.rst", "Lib/event/generated/pyCGM2.Lib.eventDetector.zeni.rst", "Lib/libIndex.rst", "Lib/plot/generated/pyCGM2.Lib.plot.compareEmgEnvelops.rst", "Lib/plot/generated/pyCGM2.Lib.plot.compareKinematic.rst", "Lib/plot/generated/pyCGM2.Lib.plot.compareKinetic.rst", "Lib/plot/generated/pyCGM2.Lib.plot.compareSelectedEmgEvelops.rst", "Lib/plot/generated/pyCGM2.Lib.plot.plotConsistencyEnvelopEMGpanel.rst", "Lib/plot/generated/pyCGM2.Lib.plot.plotDescriptiveEnvelopEMGpanel.rst", "Lib/plot/generated/pyCGM2.Lib.plot.plotPFKE.rst", "Lib/plot/generated/pyCGM2.Lib.plot.plotSaggitalGagePanel.rst", "Lib/plot/generated/pyCGM2.Lib.plot.plotTemporalEMG.rst", "Lib/plot/generated/pyCGM2.Lib.plot.plotTemporalKinematic.rst", "Lib/plot/generated/pyCGM2.Lib.plot.plotTemporalKinetic.rst", "Lib/plot/generated/pyCGM2.Lib.plot.plot_ConsistencyKinematic.rst", "Lib/plot/generated/pyCGM2.Lib.plot.plot_ConsistencyKinetic.rst", "Lib/plot/generated/pyCGM2.Lib.plot.plot_DescriptiveGRF.rst", "Lib/plot/generated/pyCGM2.Lib.plot.plot_DescriptiveGrfIntegration.rst", "Lib/plot/generated/pyCGM2.Lib.plot.plot_DescriptiveKinematic.rst", "Lib/plot/generated/pyCGM2.Lib.plot.plot_DescriptiveKinetic.rst", "Lib/plot/generated/pyCGM2.Lib.plot.plot_DescriptiveMuscleLength.rst", "Lib/plot/generated/pyCGM2.Lib.plot.plot_MAP.rst", "Lib/plot/generated/pyCGM2.Lib.plot.plot_spatioTemporal.rst", "Lib/plot/plot.rst", "Lib/report/generated/pyCGM2.Lib.report.pdfGaitReport.rst", "Lib/report/report.rst", "index.rst", "modules/anomaly/anomaly.rst", "modules/anomaly/generated/pyCGM2.Anomaly.anomalyCorrectionProcedures.AnomalyCorrectionProcedure.rst", "modules/anomaly/generated/pyCGM2.Anomaly.anomalyCorrectionProcedures.MarkerAnomalyCorrectionProcedure.rst", "modules/anomaly/generated/pyCGM2.Anomaly.anomalyDetectionProcedures.AnomalyDetectionProcedure.rst", "modules/anomaly/generated/pyCGM2.Anomaly.anomalyDetectionProcedures.AnthropoDataAnomalyProcedure.rst", "modules/anomaly/generated/pyCGM2.Anomaly.anomalyDetectionProcedures.ForcePlateAnomalyProcedure.rst", "modules/anomaly/generated/pyCGM2.Anomaly.anomalyDetectionProcedures.GaitEventAnomalyProcedure.rst", "modules/anomaly/generated/pyCGM2.Anomaly.anomalyDetectionProcedures.MarkerAnomalyDetectionRollingProcedure.rst", "modules/anomaly/generated/pyCGM2.Anomaly.anomalyFilters.AnomalyCorrectionFilter.rst", "modules/anomaly/generated/pyCGM2.Anomaly.anomalyFilters.AnomalyDetectionFilter.rst", "modules/emg/emg.rst", "modules/emg/generated/pyCGM2.EMG.coactivationProcedures.CoActivationProcedure.rst", "modules/emg/generated/pyCGM2.EMG.coactivationProcedures.FalconerCoActivationProcedure.rst", "modules/emg/generated/pyCGM2.EMG.coactivationProcedures.UnithanCoActivationProcedure.rst", "modules/emg/generated/pyCGM2.EMG.discreteEmgProcedures.AmplitudesProcedure.rst", "modules/emg/generated/pyCGM2.EMG.discreteEmgProcedures.DiscreteEmgProcedure.rst", "modules/emg/generated/pyCGM2.EMG.emgFilters.BasicEmgProcessingFilter.rst", "modules/emg/generated/pyCGM2.EMG.emgFilters.DiscreteEMGFilter.rst", "modules/emg/generated/pyCGM2.EMG.emgFilters.EmgCoActivationFilter.rst", "modules/emg/generated/pyCGM2.EMG.emgFilters.EmgEnvelopProcessingFilter.rst", "modules/emg/generated/pyCGM2.EMG.emgFilters.EmgNormalisationProcessingFilter.rst", "modules/emg/generated/pyCGM2.EMG.emgManager.EmgManager.rst", "modules/enums/enums.rst", "modules/enums/generated/pyCGM2.enums.AnalysisSection.rst", "modules/enums/generated/pyCGM2.enums.BodyPart.rst", "modules/enums/generated/pyCGM2.enums.BodyPartPlot.rst", "modules/enums/generated/pyCGM2.enums.DataType.rst", "modules/enums/generated/pyCGM2.enums.EclipseType.rst", "modules/enums/generated/pyCGM2.enums.EmgAmplitudeNormalization.rst", "modules/enums/generated/pyCGM2.enums.HarringtonPredictor.rst", "modules/enums/generated/pyCGM2.enums.JointCalibrationMethod.rst", "modules/enums/generated/pyCGM2.enums.MomentProjection.rst", "modules/enums/generated/pyCGM2.enums.SegmentSide.rst", "modules/enums/generated/pyCGM2.enums.enumFromtext.rst", "modules/enums/generated/pyCGM2.enums.motionMethod.rst", "modules/events/events.rst", "modules/events/generated/pyCGM2.Events.eventFilters.EventFilter.rst", "modules/events/generated/pyCGM2.Events.eventProcedures.EventProcedure.rst", "modules/events/generated/pyCGM2.Events.eventProcedures.ZeniProcedure.rst", "modules/forcePlates/forcePlates.rst", "modules/forcePlates/generated/pyCGM2.ForcePlates.forceplates.ForcePlateIntegration.rst", "modules/forcePlates/generated/pyCGM2.ForcePlates.forceplates.addForcePlateGeneralEvents.rst", "modules/forcePlates/generated/pyCGM2.ForcePlates.forceplates.appendForcePlateCornerAsMarker.rst", "modules/forcePlates/generated/pyCGM2.ForcePlates.forceplates.combineForcePlate.rst", "modules/forcePlates/generated/pyCGM2.ForcePlates.forceplates.correctForcePlateType5.rst", "modules/forcePlates/generated/pyCGM2.ForcePlates.forceplates.detectGaitConsecutiveForcePlates.rst", "modules/forcePlates/generated/pyCGM2.ForcePlates.forceplates.matchingFootSideOnForceplate.rst", "modules/imu/generated/pyCGM2.IMU.Procedures.imuMotionProcedure.GlobalAngleMotionProcedure.rst", "modules/imu/generated/pyCGM2.IMU.Procedures.imuMotionProcedure.ImuMotionProcedure.rst", "modules/imu/generated/pyCGM2.IMU.Procedures.imuMotionProcedure.QuaternionMotionProcedure.rst", "modules/imu/generated/pyCGM2.IMU.Procedures.imuMotionProcedure.RealignedMotionProcedure.rst", "modules/imu/generated/pyCGM2.IMU.Procedures.imuReaderProcedures.C3dBlueTridentProcedure.rst", "modules/imu/generated/pyCGM2.IMU.Procedures.imuReaderProcedures.CsvProcedure.rst", "modules/imu/generated/pyCGM2.IMU.Procedures.imuReaderProcedures.DataframeProcedure.rst", "modules/imu/generated/pyCGM2.IMU.Procedures.imuReaderProcedures.ImuReaderProcedure.rst", "modules/imu/generated/pyCGM2.IMU.Procedures.relativeImuAngleProcedures.RelativeAnglesProcedure.rst", "modules/imu/generated/pyCGM2.IMU.imu.Imu.rst", "modules/imu/generated/pyCGM2.IMU.imuFilters.ImuReaderFilter.rst", "modules/imu/generated/pyCGM2.IMU.opensense.interface.opensenseFilters.opensenseInterfaceImuInverseKinematicFilter.rst", "modules/imu/generated/pyCGM2.IMU.opensense.interface.opensenseFilters.opensenseInterfaceImuPlacerFilter.rst", "modules/imu/generated/pyCGM2.IMU.opensense.interface.procedures.opensenseImuKinematicFitterProcedure.ImuInverseKinematicXMLProcedure.rst", "modules/imu/generated/pyCGM2.IMU.opensense.interface.procedures.opensenseImuPlacerInterfaceProcedure.ImuPlacerXMLProcedure.rst", "modules/imu/imu.rst", "modules/inspector/generated/pyCGM2.Inspector.inspectorFilters.InspectorFilter.rst", "modules/inspector/generated/pyCGM2.Inspector.inspectorProcedures.InspectorProcedure.rst", "modules/inspector/generated/pyCGM2.Inspector.inspectorProcedures.MarkerPresenceDetectionProcedure.rst", "modules/inspector/inspector.rst", "modules/math/generated/pyCGM2.Math.derivation.firstOrderFiniteDifference.rst", "modules/math/generated/pyCGM2.Math.derivation.matrixFirstDerivation.rst", "modules/math/generated/pyCGM2.Math.derivation.matrixSecondDerivation.rst", "modules/math/generated/pyCGM2.Math.derivation.splineDerivation.rst", "modules/math/generated/pyCGM2.Math.derivation.splineFittingDerivation.rst", "modules/math/generated/pyCGM2.Math.euler.euler_xyz.rst", "modules/math/generated/pyCGM2.Math.euler.euler_xzy.rst", "modules/math/generated/pyCGM2.Math.euler.euler_yxz.rst", "modules/math/generated/pyCGM2.Math.euler.euler_yzx.rst", "modules/math/generated/pyCGM2.Math.euler.euler_zxy.rst", "modules/math/generated/pyCGM2.Math.euler.euler_zyx.rst", "modules/math/generated/pyCGM2.Math.euler.wrapEulerTo.rst", "modules/math/generated/pyCGM2.Math.geometry.LineLineIntersect.rst", "modules/math/generated/pyCGM2.Math.geometry.angleFrom2Vectors.rst", "modules/math/generated/pyCGM2.Math.geometry.computeAngle.rst", "modules/math/generated/pyCGM2.Math.geometry.oppositeVector.rst", "modules/math/generated/pyCGM2.Math.normalisation.timeSequenceNormalisation.rst", "modules/math/generated/pyCGM2.Math.numeric.rms.rst", "modules/math/generated/pyCGM2.Math.numeric.skewMatrix.rst", "modules/math/math.rst", "modules/model/bodySegmentParameters.rst", "modules/model/cgm2.rst", "modules/model/generated/pyCGM2.Model.CGM2.cgm.CGM.rst", "modules/model/generated/pyCGM2.Model.CGM2.cgm.CGM1.rst", "modules/model/generated/pyCGM2.Model.CGM2.cgm2.CGM2_1.rst", "modules/model/generated/pyCGM2.Model.CGM2.cgm2.CGM2_2.rst", "modules/model/generated/pyCGM2.Model.CGM2.cgm2.CGM2_3.rst", "modules/model/generated/pyCGM2.Model.CGM2.cgm2.CGM2_4.rst", "modules/model/generated/pyCGM2.Model.CGM2.cgm2.CGM2_5.rst", "modules/model/generated/pyCGM2.Model.CGM2.decorators.applyBasicDecorators.rst", "modules/model/generated/pyCGM2.Model.CGM2.decorators.applyHJCDecorators.rst", "modules/model/generated/pyCGM2.Model.CGM2.decorators.applyKJC_AJCDecorators.rst", "modules/model/generated/pyCGM2.Model.Opensim.interface.opensimInterface.opensimXmlInterface.rst", "modules/model/generated/pyCGM2.Model.Opensim.interface.opensimInterface.osimCgmInterface.rst", "modules/model/generated/pyCGM2.Model.Opensim.interface.opensimInterface.osimInterface.rst", "modules/model/generated/pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceAnalysesFilter.rst", "modules/model/generated/pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceInverseDynamicsFilter.rst", "modules/model/generated/pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceInverseKinematicsFilter.rst", "modules/model/generated/pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceScalingFilter.rst", "modules/model/generated/pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceStaticOptimizationFilter.rst", "modules/model/generated/pyCGM2.Model.Opensim.interface.procedures.analysisReport.opensimAnalysesInterfaceProcedure.AnalysesXmlCgmDrivenModelProcedure.rst", "modules/model/generated/pyCGM2.Model.Opensim.interface.procedures.analysisReport.opensimAnalysesInterfaceProcedure.AnalysesXmlCgmProcedure.rst", "modules/model/generated/pyCGM2.Model.Opensim.interface.procedures.analysisReport.opensimAnalysesInterfaceProcedure.AnalysesXmlProcedure.rst", "modules/model/generated/pyCGM2.Model.Opensim.interface.procedures.inverseDynamics.opensimInverseDynamicsInterfaceProcedure.InverseDynamicsXmlCgmProcedure.rst", "modules/model/generated/pyCGM2.Model.Opensim.interface.procedures.inverseDynamics.opensimInverseDynamicsInterfaceProcedure.InverseDynamicsXmlProcedure.rst", "modules/model/generated/pyCGM2.Model.Opensim.interface.procedures.inverseKinematics.opensimInverseKinematicsInterfaceProcedure.InverseKinematicXmlCgmProcedure.rst", "modules/model/generated/pyCGM2.Model.Opensim.interface.procedures.inverseKinematics.opensimInverseKinematicsInterfaceProcedure.InverseKinematicXmlProcedure.rst", "modules/model/generated/pyCGM2.Model.Opensim.interface.procedures.scaling.opensimScalingInterfaceProcedure.ScalingXmlCgmProcedure.rst", "modules/model/generated/pyCGM2.Model.Opensim.interface.procedures.scaling.opensimScalingInterfaceProcedure.ScalingXmlProcedure.rst", "modules/model/generated/pyCGM2.Model.Opensim.interface.procedures.staticOptimisation.opensimStaticOptimizationInterfaceProcedure.StaticOptimisationXmlCgmProcedure.rst", "modules/model/generated/pyCGM2.Model.Opensim.interface.procedures.staticOptimisation.opensimStaticOptimizationInterfaceProcedure.StaticOptimisationXmlProcedure.rst", "modules/model/generated/pyCGM2.Model.Procedures.forcePlateIntegrationProcedures.ForcePlateIntegrationProcedure.rst", "modules/model/generated/pyCGM2.Model.Procedures.forcePlateIntegrationProcedures.GaitForcePlateIntegrationProcedure.rst", "modules/model/generated/pyCGM2.Model.Procedures.modelMotionCorrection.ModelCorrectionProcedure.rst", "modules/model/generated/pyCGM2.Model.Procedures.modelMotionCorrection.Naim2019ThighMisaligmentCorrectionProcedure.rst", "modules/model/generated/pyCGM2.Model.Procedures.modelQuality.GeneralScoreResidualProcedure.rst", "modules/model/generated/pyCGM2.Model.Procedures.modelQuality.ModelScoreResidualProcedure.rst", "modules/model/generated/pyCGM2.Model.Procedures.modelQuality.QualityProcedure.rst", "modules/model/generated/pyCGM2.Model.Procedures.modelQuality.WandAngleQualityProcedure.rst", "modules/model/generated/pyCGM2.Model.bodySegmentParameters.Bsp.rst", "modules/model/generated/pyCGM2.Model.bodySegmentParameters.updateFromcustomMp.rst", "modules/model/generated/pyCGM2.Model.frame.Frame.rst", "modules/model/generated/pyCGM2.Model.frame.Node.rst", "modules/model/generated/pyCGM2.Model.frame.angleAxis_TO_quaternion.rst", "modules/model/generated/pyCGM2.Model.frame.angleAxis_TO_rotationMatrix.rst", "modules/model/generated/pyCGM2.Model.frame.quaternion_TO_angleAxis.rst", "modules/model/generated/pyCGM2.Model.frame.quaternion_TO_rotationMatrix.rst", "modules/model/generated/pyCGM2.Model.frame.rotationMatrix_TO_angleAxis.rst", "modules/model/generated/pyCGM2.Model.frame.rotationMatrix_TO_quaternion.rst", "modules/model/generated/pyCGM2.Model.frame.setFrameData.rst", "modules/model/generated/pyCGM2.Model.model.AnatomicalReferential.rst", "modules/model/generated/pyCGM2.Model.model.ClinicalDescriptor.rst", "modules/model/generated/pyCGM2.Model.model.Joint.rst", "modules/model/generated/pyCGM2.Model.model.Model.rst", "modules/model/generated/pyCGM2.Model.model.Model6Dof.rst", "modules/model/generated/pyCGM2.Model.model.Referential.rst", "modules/model/generated/pyCGM2.Model.model.Segment.rst", "modules/model/generated/pyCGM2.Model.model.TechnicalReferential.rst", "modules/model/generated/pyCGM2.Model.modelDecorator.AnkleCalibrationDecorator.rst", "modules/model/generated/pyCGM2.Model.modelDecorator.Cgm1ManualOffsets.rst", "modules/model/generated/pyCGM2.Model.modelDecorator.DecoratorModel.rst", "modules/model/generated/pyCGM2.Model.modelDecorator.HipJointCenterDecorator.rst", "modules/model/generated/pyCGM2.Model.modelDecorator.Kad.rst", "modules/model/generated/pyCGM2.Model.modelDecorator.KneeCalibrationDecorator.rst", "modules/model/generated/pyCGM2.Model.modelDecorator.VCMJointCentre.rst", "modules/model/generated/pyCGM2.Model.modelDecorator.bellRegression.rst", "modules/model/generated/pyCGM2.Model.modelDecorator.calibration2Dof.rst", "modules/model/generated/pyCGM2.Model.modelDecorator.chord.rst", "modules/model/generated/pyCGM2.Model.modelDecorator.davisRegression.rst", "modules/model/generated/pyCGM2.Model.modelDecorator.footJointCentreFromMet.rst", "modules/model/generated/pyCGM2.Model.modelDecorator.haraRegression.rst", "modules/model/generated/pyCGM2.Model.modelDecorator.harringtonRegression.rst", "modules/model/generated/pyCGM2.Model.modelDecorator.midPoint.rst", "modules/model/generated/pyCGM2.Model.modelDecorator.saraCalibration.rst", "modules/model/generated/pyCGM2.Model.modelFilters.CGMLowerlimbInverseDynamicProcedure.rst", "modules/model/generated/pyCGM2.Model.modelFilters.CentreOfMassFilter.rst", "modules/model/generated/pyCGM2.Model.modelFilters.CoordinateSystemDisplayFilter.rst", "modules/model/generated/pyCGM2.Model.modelFilters.ForcePlateAssemblyFilter.rst", "modules/model/generated/pyCGM2.Model.modelFilters.GeneralCalibrationProcedure.rst", "modules/model/generated/pyCGM2.Model.modelFilters.GeneralCoordinateSystemProcedure.rst", "modules/model/generated/pyCGM2.Model.modelFilters.GroundReactionForceAdapterFilter.rst", "modules/model/generated/pyCGM2.Model.modelFilters.GroundReactionIntegrationFilter.rst", "modules/model/generated/pyCGM2.Model.modelFilters.InverseDynamicFilter.rst", "modules/model/generated/pyCGM2.Model.modelFilters.InverseDynamicProcedure.rst", "modules/model/generated/pyCGM2.Model.modelFilters.JointPowerFilter.rst", "modules/model/generated/pyCGM2.Model.modelFilters.ModelAbsoluteAnglesFilter.rst", "modules/model/generated/pyCGM2.Model.modelFilters.ModelCalibrationFilter.rst", "modules/model/generated/pyCGM2.Model.modelFilters.ModelCoordinateSystemProcedure.rst", "modules/model/generated/pyCGM2.Model.modelFilters.ModelJCSFilter.rst", "modules/model/generated/pyCGM2.Model.modelFilters.ModelMotionCorrectionFilter.rst", "modules/model/generated/pyCGM2.Model.modelFilters.ModelMotionFilter.rst", "modules/model/generated/pyCGM2.Model.modelFilters.ModelQualityFilter.rst", "modules/model/generated/pyCGM2.Model.modelFilters.StaticCalibrationProcedure.rst", "modules/model/model.rst", "modules/model/modelComponents.rst", "modules/model/opensim.rst", "modules/moduleIndex.rst", "modules/nexus/eclipse.rst", "modules/nexus/generated/pyCGM2.Nexus.Devices.AnalogDevice.rst", "modules/nexus/generated/pyCGM2.Nexus.Devices.Channel.rst", "modules/nexus/generated/pyCGM2.Nexus.Devices.Device.rst", "modules/nexus/generated/pyCGM2.Nexus.Devices.ForcePlate.rst", "modules/nexus/generated/pyCGM2.Nexus.eclipse.EnfReader.rst", "modules/nexus/generated/pyCGM2.Nexus.eclipse.PatientEnfReader.rst", "modules/nexus/generated/pyCGM2.Nexus.eclipse.SessionEnfReader.rst", "modules/nexus/generated/pyCGM2.Nexus.eclipse.TrialEnfReader.rst", "modules/nexus/generated/pyCGM2.Nexus.eclipse.cleanEnf.rst", "modules/nexus/generated/pyCGM2.Nexus.eclipse.generateEmptyENF.rst", "modules/nexus/generated/pyCGM2.Nexus.eclipse.getCurrentMarkedEnfs.rst", "modules/nexus/generated/pyCGM2.Nexus.eclipse.getCurrentMarkedNodes.rst", "modules/nexus/generated/pyCGM2.Nexus.eclipse.getEnfFiles.rst", "modules/nexus/generated/pyCGM2.Nexus.nexusFilters.NexusConstructAcquisitionFilter.rst", "modules/nexus/generated/pyCGM2.Nexus.nexusFilters.NexusModelFilter.rst", "modules/nexus/generated/pyCGM2.Nexus.nexusTools.appendAnalysisParameters.rst", "modules/nexus/generated/pyCGM2.Nexus.nexusTools.appendAngleFromAcq.rst", "modules/nexus/generated/pyCGM2.Nexus.nexusTools.appendBones.rst", "modules/nexus/generated/pyCGM2.Nexus.nexusTools.appendBtkScalarFromAcq.rst", "modules/nexus/generated/pyCGM2.Nexus.nexusTools.appendForceFromAcq.rst", "modules/nexus/generated/pyCGM2.Nexus.nexusTools.appendModelledMarkerFromAcq.rst", "modules/nexus/generated/pyCGM2.Nexus.nexusTools.appendMomentFromAcq.rst", "modules/nexus/generated/pyCGM2.Nexus.nexusTools.appendPowerFromAcq.rst", "modules/nexus/generated/pyCGM2.Nexus.nexusTools.checkActivatedSubject.rst", "modules/nexus/generated/pyCGM2.Nexus.nexusTools.createEvents.rst", "modules/nexus/generated/pyCGM2.Nexus.nexusTools.createGeneralEvents.rst", "modules/nexus/generated/pyCGM2.Nexus.nexusTools.getActiveSubject.rst", "modules/nexus/generated/pyCGM2.Nexus.nexusTools.getForcePlateAssignment.rst", "modules/nexus/generated/pyCGM2.Nexus.nexusTools.setTrajectoryFromAcq.rst", "modules/nexus/generated/pyCGM2.Nexus.nexusTools.setTrajectoryFromArray.rst", "modules/nexus/generated/pyCGM2.Nexus.nexusUtils.getNexusSubjectMp.rst", "modules/nexus/generated/pyCGM2.Nexus.nexusUtils.updateNexusSubjectMp.rst", "modules/nexus/nexus.rst", "modules/processing/analysis.rst", "modules/processing/classification.rst", "modules/processing/cycle.rst", "modules/processing/discretePoints.rst", "modules/processing/generated/pyCGM2.Processing.C3dManager.c3dManager.C3dManager.rst", "modules/processing/generated/pyCGM2.Processing.C3dManager.c3dManagerFilters.C3dManagerFilter.rst", "modules/processing/generated/pyCGM2.Processing.C3dManager.c3dManagerProcedures.C3dManagerProcedure.rst", "modules/processing/generated/pyCGM2.Processing.C3dManager.c3dManagerProcedures.DistinctC3dSetProcedure.rst", "modules/processing/generated/pyCGM2.Processing.C3dManager.c3dManagerProcedures.UniqueBtkAcqSetProcedure.rst", "modules/processing/generated/pyCGM2.Processing.C3dManager.c3dManagerProcedures.UniqueC3dSetProcedure.rst", "modules/processing/generated/pyCGM2.Processing.Classification.classificationFilters.ClassificationFilter.rst", "modules/processing/generated/pyCGM2.Processing.Classification.classificationProcedures.ClassificationProcedure.rst", "modules/processing/generated/pyCGM2.Processing.Classification.classificationProcedures.PFKEprocedure.rst", "modules/processing/generated/pyCGM2.Processing.DiscretePoints.discretePointFilters.DiscretePointsFilter.rst", "modules/processing/generated/pyCGM2.Processing.DiscretePoints.discretePointProcedures.BenedettiProcedure.rst", "modules/processing/generated/pyCGM2.Processing.DiscretePoints.discretePointProcedures.DiscretePointProcedure.rst", "modules/processing/generated/pyCGM2.Processing.DiscretePoints.discretePointProcedures.GoldbergProcedure.rst", "modules/processing/generated/pyCGM2.Processing.DiscretePoints.discretePointProcedures.MaxMinProcedure.rst", "modules/processing/generated/pyCGM2.Processing.JointPatterns.jointPatternFilters.JointPatternFilter.rst", "modules/processing/generated/pyCGM2.Processing.JointPatterns.jointPatternProcedures.JointPatternProcedure.rst", "modules/processing/generated/pyCGM2.Processing.JointPatterns.jointPatternProcedures.XlsJointPatternProcedure.rst", "modules/processing/generated/pyCGM2.Processing.ProgressionFrame.progressionFrameFilters.ProgressionFrameFilter.rst", "modules/processing/generated/pyCGM2.Processing.ProgressionFrame.progressionFrameProcedures.PelvisProgressionFrameProcedure.rst", "modules/processing/generated/pyCGM2.Processing.ProgressionFrame.progressionFrameProcedures.PointProgressionFrameProcedure.rst", "modules/processing/generated/pyCGM2.Processing.ProgressionFrame.progressionFrameProcedures.ProgressionFrameProcedure.rst", "modules/processing/generated/pyCGM2.Processing.ProgressionFrame.progressionFrameProcedures.ThoraxProgressionFrameProcedure.rst", "modules/processing/generated/pyCGM2.Processing.Representative.representativeFilters.RepresentativeCycleFilter.rst", "modules/processing/generated/pyCGM2.Processing.Representative.representativeProcedures.RepresentativeProcedure.rst", "modules/processing/generated/pyCGM2.Processing.Representative.representativeProcedures.Sangeux2015Procedure.rst", "modules/processing/generated/pyCGM2.Processing.Scores.scoreFilters.ScoreFilter.rst", "modules/processing/generated/pyCGM2.Processing.Scores.scoreProcedures.CGM1_GPS.rst", "modules/processing/generated/pyCGM2.Processing.Scores.scoreProcedures.ScoreProcedure.rst", "modules/processing/generated/pyCGM2.Processing.analysis.AbstractBuilder.rst", "modules/processing/generated/pyCGM2.Processing.analysis.Analysis.rst", "modules/processing/generated/pyCGM2.Processing.analysis.AnalysisBuilder.rst", "modules/processing/generated/pyCGM2.Processing.analysis.AnalysisFilter.rst", "modules/processing/generated/pyCGM2.Processing.analysis.AnalysisStructure.rst", "modules/processing/generated/pyCGM2.Processing.analysis.GaitAnalysisBuilder.rst", "modules/processing/generated/pyCGM2.Processing.analysisHandler.getAnalysisSection.rst", "modules/processing/generated/pyCGM2.Processing.analysisHandler.getNumberOfCycle.rst", "modules/processing/generated/pyCGM2.Processing.analysisHandler.getPhases.rst", "modules/processing/generated/pyCGM2.Processing.analysisHandler.getValues.rst", "modules/processing/generated/pyCGM2.Processing.analysisHandler.isKeyExist.rst", "modules/processing/generated/pyCGM2.Processing.analysisHandler.normalizedMuscleLength_withPose.rst", "modules/processing/generated/pyCGM2.Processing.cycle.Cycle.rst", "modules/processing/generated/pyCGM2.Processing.cycle.Cycles.rst", "modules/processing/generated/pyCGM2.Processing.cycle.CyclesBuilder.rst", "modules/processing/generated/pyCGM2.Processing.cycle.CyclesFilter.rst", "modules/processing/generated/pyCGM2.Processing.cycle.GaitCycle.rst", "modules/processing/generated/pyCGM2.Processing.cycle.GaitCyclesBuilder.rst", "modules/processing/generated/pyCGM2.Processing.cycle.analog_descriptiveStats.rst", "modules/processing/generated/pyCGM2.Processing.cycle.construcGaitCycle.rst", "modules/processing/generated/pyCGM2.Processing.cycle.point_descriptiveStats.rst", "modules/processing/generated/pyCGM2.Processing.cycle.spatioTemporelParameter_descriptiveStats.rst", "modules/processing/generated/pyCGM2.Processing.exporter.AnalysisExportFilter.rst", "modules/processing/generated/pyCGM2.Processing.exporter.XlsAnalysisExportFilter.rst", "modules/processing/generated/pyCGM2.Processing.exporter.XlsExportDataFrameFilter.rst", "modules/processing/jointPatterns.rst", "modules/processing/manager.rst", "modules/processing/processing.rst", "modules/processing/progression.rst", "modules/processing/representative.rst", "modules/processing/scores.rst", "modules/qtm/generated/pyCGM2.QTM.qtmTools.SubjectMp.rst", "modules/qtm/generated/pyCGM2.QTM.qtmTools.detectMeasurementType.rst", "modules/qtm/generated/pyCGM2.QTM.qtmTools.findDynamic.rst", "modules/qtm/generated/pyCGM2.QTM.qtmTools.findKneeCalibration.rst", "modules/qtm/generated/pyCGM2.QTM.qtmTools.findStatic.rst", "modules/qtm/generated/pyCGM2.QTM.qtmTools.getFilename.rst", "modules/qtm/generated/pyCGM2.QTM.qtmTools.getForcePlateAssigment.rst", "modules/qtm/generated/pyCGM2.QTM.qtmTools.getKneeFunctionCalibMethod.rst", "modules/qtm/generated/pyCGM2.QTM.qtmTools.get_creation_date.rst", "modules/qtm/generated/pyCGM2.QTM.qtmTools.get_modelled_trials.rst", "modules/qtm/generated/pyCGM2.QTM.qtmTools.isType.rst", "modules/qtm/qtm.rst", "modules/report/generated/pyCGM2.Report.Viewers.comparisonPlotViewers.KinematicsPlotComparisonViewer.rst", "modules/report/generated/pyCGM2.Report.Viewers.comparisonPlotViewers.KineticsPlotComparisonViewer.rst", "modules/report/generated/pyCGM2.Report.Viewers.customPlotViewers.SaggitalGagePlotViewer.rst", "modules/report/generated/pyCGM2.Report.Viewers.emgPlotViewers.CoactivationEmgPlotViewer.rst", "modules/report/generated/pyCGM2.Report.Viewers.emgPlotViewers.EnvEmgGaitPlotPanelViewer.rst", "modules/report/generated/pyCGM2.Report.Viewers.emgPlotViewers.MultipleAnalysis_EnvEmgPlotPanelViewer.rst", "modules/report/generated/pyCGM2.Report.Viewers.emgPlotViewers.TemporalEmgPlotViewer.rst", "modules/report/generated/pyCGM2.Report.Viewers.groundReactionPlotViewers.NormalizedGaitGrfIntegrationPlotViewer.rst", "modules/report/generated/pyCGM2.Report.Viewers.groundReactionPlotViewers.NormalizedGaitMeanGrfIntegrationPlotViewer.rst", "modules/report/generated/pyCGM2.Report.Viewers.groundReactionPlotViewers.NormalizedGroundReactionForcePlotViewer.rst", "modules/report/generated/pyCGM2.Report.Viewers.musclePlotViewers.MuscleNormalizedPlotPanelViewer.rst", "modules/report/generated/pyCGM2.Report.Viewers.plotViewers.GpsMapPlotViewer.rst", "modules/report/generated/pyCGM2.Report.Viewers.plotViewers.NormalizedKinematicsPlotViewer.rst", "modules/report/generated/pyCGM2.Report.Viewers.plotViewers.NormalizedKineticsPlotViewer.rst", "modules/report/generated/pyCGM2.Report.Viewers.plotViewers.PlotViewer.rst", "modules/report/generated/pyCGM2.Report.Viewers.plotViewers.SpatioTemporalPlotViewer.rst", "modules/report/generated/pyCGM2.Report.Viewers.plotViewers.TemporalKinematicsPlotViewer.rst", "modules/report/generated/pyCGM2.Report.Viewers.plotViewers.TemporalKineticsPlotViewer.rst", "modules/report/generated/pyCGM2.Report.normativeDatasets.NormalSTP.rst", "modules/report/generated/pyCGM2.Report.normativeDatasets.NormativeData.rst", "modules/report/generated/pyCGM2.Report.plot.addNormalActivationLayer.rst", "modules/report/generated/pyCGM2.Report.plot.addRectanglePatches.rst", "modules/report/generated/pyCGM2.Report.plot.addTemporalNormalActivationLayer.rst", "modules/report/generated/pyCGM2.Report.plot.consistencyPlot.rst", "modules/report/generated/pyCGM2.Report.plot.descriptivePlot.rst", "modules/report/generated/pyCGM2.Report.plot.gaitConsistencyPlot.rst", "modules/report/generated/pyCGM2.Report.plot.gaitDescriptivePlot.rst", "modules/report/generated/pyCGM2.Report.plot.gaitMeanPlot.rst", "modules/report/generated/pyCGM2.Report.plot.meanPlot.rst", "modules/report/generated/pyCGM2.Report.plot.stpHorizontalHistogram.rst", "modules/report/generated/pyCGM2.Report.plot.temporalPlot.rst", "modules/report/generated/pyCGM2.Report.plotFilters.PlottingFilter.rst", "modules/report/generated/pyCGM2.Report.plotUtils.colorContext.rst", "modules/report/normativeData.rst", "modules/report/plot.rst", "modules/report/report.rst", "modules/signal/generated/pyCGM2.Signal.detector.detectStart_fromThreshold.rst", "modules/signal/generated/pyCGM2.Signal.detector.detect_cusum.rst", "modules/signal/generated/pyCGM2.Signal.detector.detect_onset.rst", "modules/signal/generated/pyCGM2.Signal.detector.detect_peaks.rst", "modules/signal/generated/pyCGM2.Signal.detector.detect_seq.rst", "modules/signal/generated/pyCGM2.Signal.signal_processing.arrayLowPassFiltering.rst", "modules/signal/generated/pyCGM2.Signal.signal_processing.downsample.rst", "modules/signal/generated/pyCGM2.Signal.signal_processing.enveloppe.rst", "modules/signal/generated/pyCGM2.Signal.signal_processing.forcePlateFiltering.rst", "modules/signal/generated/pyCGM2.Signal.signal_processing.highPass.rst", "modules/signal/generated/pyCGM2.Signal.signal_processing.markerFiltering.rst", "modules/signal/generated/pyCGM2.Signal.signal_processing.rectify.rst", "modules/signal/generated/pyCGM2.Signal.signal_processing.remove50hz.rst", "modules/signal/signal.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.GetAnalogNames.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.GetMarkerNames.rst", "modules/tools/generated/pyCGM2.Tools.btkTools._getSectionFromMd.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.applyOnValidFrames.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.applyRotation.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.applyTranslators.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.applyValidFramesOnOutput.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.automaticKineticDetection.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.btkAnalogToKtkTimeseries.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.btkPointToKtkTimeseries.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.buildTrials.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.calculateAngleFrom3points.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.changeSubjectName.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.checkForcePlateExist.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.checkGap.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.checkMarkers.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.checkMetadata.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.checkMultipleSubject.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.cleanAcq.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.clearEvents.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.clearPoints.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.constructMarker.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.constructPhantom.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.createPhantoms.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.deleteContextEvents.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.findMarkerGap.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.findValidFrames.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.getAllParamAnalysis.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.getForcePlateWrench.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.getFrameBoundaries.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.getLabelsFromScalar.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.getNumberOfForcePlate.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.getNumberOfModelOutputs.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.getParamAnalysis.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.getScalar.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.getStartEndEvents.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.getValidFrames.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.getVisibleMarkersAtFrame.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.hasChild.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.isAnalogExist.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.isEventExist.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.isGap.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.isKineticFlag.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.isPhantom.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.isPointExist.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.isPointsExist.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.keepAndDeleteOtherPoints.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.markerUnitConverter.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.markersToArray.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.modifyEventSubject.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.modifySubject.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.renameEvent.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.smartAppendAnalog.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.smartAppendParamAnalysis.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.smartAppendPoint.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.smartCreateEvent.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.smartGetEvents.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.smartGetMetadata.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.smartReader.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.smartSetMetadata.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.smartWriter.rst", "modules/tools/generated/pyCGM2.Tools.btkTools.sortedEvents.rst", "modules/tools/generated/pyCGM2.Tools.opensimTools.export_CgmToMot.rst", "modules/tools/generated/pyCGM2.Tools.opensimTools.footReactionMotFile.rst", "modules/tools/generated/pyCGM2.Tools.opensimTools.mot2pointValues.rst", "modules/tools/generated/pyCGM2.Tools.opensimTools.smartGetValues.rst", "modules/tools/generated/pyCGM2.Tools.opensimTools.sto2pointValues.rst", "modules/tools/generated/pyCGM2.Tools.opensimTools.transformMarker_ToOsimReferencial.rst", "modules/tools/tools.rst", "modules/utils/generated/pyCGM2.Utils.files.concatenateExcelFiles.rst", "modules/utils/generated/pyCGM2.Utils.files.copyPaste.rst", "modules/utils/generated/pyCGM2.Utils.files.copyPasteDirectory.rst", "modules/utils/generated/pyCGM2.Utils.files.copySessionFolder.rst", "modules/utils/generated/pyCGM2.Utils.files.createDir.rst", "modules/utils/generated/pyCGM2.Utils.files.deleteDirectory.rst", "modules/utils/generated/pyCGM2.Utils.files.getC3dFiles.rst", "modules/utils/generated/pyCGM2.Utils.files.getDirname.rst", "modules/utils/generated/pyCGM2.Utils.files.getDirs.rst", "modules/utils/generated/pyCGM2.Utils.files.getFileCreationDate.rst", "modules/utils/generated/pyCGM2.Utils.files.getFilename.rst", "modules/utils/generated/pyCGM2.Utils.files.getFiles.rst", "modules/utils/generated/pyCGM2.Utils.files.getIKweightSet.rst", "modules/utils/generated/pyCGM2.Utils.files.getMp.rst", "modules/utils/generated/pyCGM2.Utils.files.getMpFileContent.rst", "modules/utils/generated/pyCGM2.Utils.files.getTranslators.rst", "modules/utils/generated/pyCGM2.Utils.files.is_json.rst", "modules/utils/generated/pyCGM2.Utils.files.is_yaml.rst", "modules/utils/generated/pyCGM2.Utils.files.loadAnalysis.rst", "modules/utils/generated/pyCGM2.Utils.files.loadModel.rst", "modules/utils/generated/pyCGM2.Utils.files.loadModelSettings.rst", "modules/utils/generated/pyCGM2.Utils.files.loadMp.rst", "modules/utils/generated/pyCGM2.Utils.files.loadSettings.rst", "modules/utils/generated/pyCGM2.Utils.files.openFile.rst", "modules/utils/generated/pyCGM2.Utils.files.openJson.rst", "modules/utils/generated/pyCGM2.Utils.files.openPickleFile.rst", "modules/utils/generated/pyCGM2.Utils.files.openYaml.rst", "modules/utils/generated/pyCGM2.Utils.files.readContent.rst", "modules/utils/generated/pyCGM2.Utils.files.readXml.rst", "modules/utils/generated/pyCGM2.Utils.files.renameFile.rst", "modules/utils/generated/pyCGM2.Utils.files.saveAnalysis.rst", "modules/utils/generated/pyCGM2.Utils.files.saveJson.rst", "modules/utils/generated/pyCGM2.Utils.files.saveModel.rst", "modules/utils/generated/pyCGM2.Utils.files.saveMp.rst", "modules/utils/generated/pyCGM2.Utils.files.savePickleFile.rst", "modules/utils/generated/pyCGM2.Utils.files.saveYaml.rst", "modules/utils/generated/pyCGM2.Utils.files.try_as.rst", "modules/utils/generated/pyCGM2.Utils.utils.checkSimilarElement.rst", "modules/utils/generated/pyCGM2.Utils.utils.getSimilarElement.rst", "modules/utils/generated/pyCGM2.Utils.utils.homogeneizeArguments.rst", "modules/utils/generated/pyCGM2.Utils.utils.isInRange.rst", "modules/utils/generated/pyCGM2.Utils.utils.str.rst", "modules/utils/generated/pyCGM2.Utils.utils.toBool.rst", "modules/utils/utils.rst", "thirdparty/thirdpartyIndex.rst"], "titles": ["Apps", "The NEXUS sub-command", "The QTM sub-command", "The SETTINGS sub-command", "pyCGM2.Lib.analysis module", "pyCGM2.Lib.analysis.automaticCPdeviations", "pyCGM2.Lib.analysis.exportAnalysis", "pyCGM2.Lib.analysis.makeAnalysis", "pyCGM2.Lib.CGM", "pyCGM2.Lib.CGM.cgm1.calibrate", "pyCGM2.Lib.CGM.cgm1.fitting", "pyCGM2.Lib.CGM.cgm1_1.calibrate", "pyCGM2.Lib.CGM.cgm1_1.fitting", "pyCGM2.Lib.CGM.cgm2_1.calibrate", "pyCGM2.Lib.CGM.cgm2_1.fitting", "pyCGM2.Lib.CGM.cgm2_2.calibrate", "pyCGM2.Lib.CGM.cgm2_2.fitting", "pyCGM2.Lib.CGM.cgm2_3.calibrate", "pyCGM2.Lib.CGM.cgm2_3.fitting", "pyCGM2.Lib.CGM.cgm2_4.calibrate", "pyCGM2.Lib.CGM.cgm2_4.fitting", "pyCGM2.Lib.CGM.cgm2_5.calibrate", "pyCGM2.Lib.CGM.cgm2_5.fitting", "pyCGM2.Lib.CGM.kneeCalibration.calibration2Dof", "pyCGM2.Lib.CGM.kneeCalibration.sara", "pyCGM2.Lib.CGM.musculoskeletal.cgm2_2.calibrate", "pyCGM2.Lib.CGM.musculoskeletal.cgm2_2.fitting", "pyCGM2.Lib.CGM.musculoskeletal.cgm2_3.calibrate", "pyCGM2.Lib.CGM.musculoskeletal.cgm2_3.fitting", "pyCGM2.Lib.emg module", "pyCGM2.Lib.emg.loadEmg", "pyCGM2.Lib.emg.normalizedEMG", "pyCGM2.Lib.emg.processEMG", "pyCGM2.Lib.emg.processEMG_fromBtkAcq", "pyCGM2.Lib.eventDetector module", "pyCGM2.Lib.eventDetector.zeni", "High Level functions", "pyCGM2.Lib.plot.compareEmgEnvelops", "pyCGM2.Lib.plot.compareKinematic", "pyCGM2.Lib.plot.compareKinetic", "pyCGM2.Lib.plot.compareSelectedEmgEvelops", "pyCGM2.Lib.plot.plotConsistencyEnvelopEMGpanel", "pyCGM2.Lib.plot.plotDescriptiveEnvelopEMGpanel", "pyCGM2.Lib.plot.plotPFKE", "pyCGM2.Lib.plot.plotSaggitalGagePanel", "pyCGM2.Lib.plot.plotTemporalEMG", "pyCGM2.Lib.plot.plotTemporalKinematic", "pyCGM2.Lib.plot.plotTemporalKinetic", "pyCGM2.Lib.plot.plot_ConsistencyKinematic", "pyCGM2.Lib.plot.plot_ConsistencyKinetic", "pyCGM2.Lib.plot.plot_DescriptiveGRF", "pyCGM2.Lib.plot.plot_DescriptiveGrfIntegration", "pyCGM2.Lib.plot.plot_DescriptiveKinematic", "pyCGM2.Lib.plot.plot_DescriptiveKinetic", "pyCGM2.Lib.plot.plot_DescriptiveMuscleLength", "pyCGM2.Lib.plot.plot_MAP", "pyCGM2.Lib.plot.plot_spatioTemporal", "pyCGM2.Lib.plot module", "pyCGM2.Lib.report.pdfGaitReport", "pyCGM2.Lib.report module", "pyCGM2 overview", "pyCGM2.Anomaly", "AnomalyCorrectionProcedure", "MarkerAnomalyCorrectionProcedure", "AnomalyDetectionProcedure", "AnthropoDataAnomalyProcedure", "ForcePlateAnomalyProcedure", "GaitEventAnomalyProcedure", "MarkerAnomalyDetectionRollingProcedure", "AnomalyCorrectionFilter", "AnomalyDetectionFilter", "pyCGM2.EMG", "CoActivationProcedure", "FalconerCoActivationProcedure", "UnithanCoActivationProcedure", "AmplitudesProcedure", "DiscreteEmgProcedure", "BasicEmgProcessingFilter", "DiscreteEMGFilter", "EmgCoActivationFilter", "EmgEnvelopProcessingFilter", "EmgNormalisationProcessingFilter", "EmgManager", "pyCGM2.enums", "AnalysisSection", "BodyPart", "BodyPartPlot", "DataType", "EclipseType", "EmgAmplitudeNormalization", "HarringtonPredictor", "JointCalibrationMethod", "MomentProjection", "SegmentSide", "pyCGM2.enums.enumFromtext", "motionMethod", "pyCGM2.Events", "EventFilter", "EventProcedure", "ZeniProcedure", "pyCGM2.forceplates", "ForcePlateIntegration", "addForcePlateGeneralEvents", "appendForcePlateCornerAsMarker", "combineForcePlate", "correctForcePlateType5", "detectGaitConsecutiveForcePlates", "matchingFootSideOnForceplate", "GlobalAngleMotionProcedure", "ImuMotionProcedure", "QuaternionMotionProcedure", "RealignedMotionProcedure", "C3dBlueTridentProcedure", "CsvProcedure", "DataframeProcedure", "ImuReaderProcedure", "RelativeAnglesProcedure", "Imu", "ImuReaderFilter", "opensenseInterfaceImuInverseKinematicFilter", "opensenseInterfaceImuPlacerFilter", "ImuInverseKinematicXMLProcedure", "ImuPlacerXMLProcedure", "pyCGM2.IMU", "InspectorFilter", "InspectorProcedure", "MarkerPresenceDetectionProcedure", "pyCGM2.Inspector", "firstOrderFiniteDifference", "matrixFirstDerivation", "matrixSecondDerivation", "splineDerivation", "splineFittingDerivation", "euler_xyz", "euler_xzy", "euler_yxz", "euler_yzx", "euler_zxy", "euler_zyx", "wrapEulerTo", "LineLineIntersect", "angleFrom2Vectors", "computeAngle", "oppositeVector", "timeSequenceNormalisation", "rms", "skewMatrix", "pyCGM2.Math", "body segment parameters", "pyCGM2.Model.CGM2", "CGM", "CGM1", "CGM2_1", "CGM2_2", "CGM2_3", "CGM2_4", "CGM2_5", "pyCGM2.Model.CGM2.decorators.applyBasicDecorators", "pyCGM2.Model.CGM2.decorators.applyHJCDecorators", "pyCGM2.Model.CGM2.decorators.applyKJC_AJCDecorators", "opensimXmlInterface", "osimCgmInterface", "osimInterface", "opensimInterfaceAnalysesFilter", "opensimInterfaceInverseDynamicsFilter", "opensimInterfaceInverseKinematicsFilter", "opensimInterfaceScalingFilter", "opensimInterfaceStaticOptimizationFilter", "AnalysesXmlCgmDrivenModelProcedure", "AnalysesXmlCgmProcedure", "AnalysesXmlProcedure", "InverseDynamicsXmlCgmProcedure", "InverseDynamicsXmlProcedure", "InverseKinematicXmlCgmProcedure", "InverseKinematicXmlProcedure", "ScalingXmlCgmProcedure", "ScalingXmlProcedure", "StaticOptimisationXmlCgmProcedure", "StaticOptimisationXmlProcedure", "ForcePlateIntegrationProcedure", "GaitForcePlateIntegrationProcedure", "ModelCorrectionProcedure", "Naim2019ThighMisaligmentCorrectionProcedure", "GeneralScoreResidualProcedure", "ModelScoreResidualProcedure", "QualityProcedure", "WandAngleQualityProcedure", "Bsp", "pyCGM2.Model.bodySegmentParameters.updateFromcustomMp", "Frame", "Node", "pyCGM2.Model.frame.angleAxis_TO_quaternion", "pyCGM2.Model.frame.angleAxis_TO_rotationMatrix", "pyCGM2.Model.frame.quaternion_TO_angleAxis", "pyCGM2.Model.frame.quaternion_TO_rotationMatrix", "pyCGM2.Model.frame.rotationMatrix_TO_angleAxis", "pyCGM2.Model.frame.rotationMatrix_TO_quaternion", "pyCGM2.Model.frame.setFrameData", "AnatomicalReferential", "ClinicalDescriptor", "Joint", "Model", "Model6Dof", "Referential", "Segment", "TechnicalReferential", "AnkleCalibrationDecorator", "Cgm1ManualOffsets", "DecoratorModel", "HipJointCenterDecorator", "Kad", "KneeCalibrationDecorator", "pyCGM2.Model.modelDecorator.VCMJointCentre", "pyCGM2.Model.modelDecorator.bellRegression", "pyCGM2.Model.modelDecorator.calibration2Dof", "pyCGM2.Model.modelDecorator.chord", "pyCGM2.Model.modelDecorator.davisRegression", "pyCGM2.Model.modelDecorator.footJointCentreFromMet", "pyCGM2.Model.modelDecorator.haraRegression", "pyCGM2.Model.modelDecorator.harringtonRegression", "pyCGM2.Model.modelDecorator.midPoint", "pyCGM2.Model.modelDecorator.saraCalibration", "CGMLowerlimbInverseDynamicProcedure", "CentreOfMassFilter", "CoordinateSystemDisplayFilter", "ForcePlateAssemblyFilter", "GeneralCalibrationProcedure", "GeneralCoordinateSystemProcedure", "GroundReactionForceAdapterFilter", "GroundReactionIntegrationFilter", "InverseDynamicFilter", "InverseDynamicProcedure", "JointPowerFilter", "ModelAbsoluteAnglesFilter", "ModelCalibrationFilter", "ModelCoordinateSystemProcedure", "ModelJCSFilter", "ModelMotionCorrectionFilter", "ModelMotionFilter", "ModelQualityFilter", "StaticCalibrationProcedure", "pyCGM2.Model", "Componants", "pyCGM2.Model.Opensim.interface", "API Reference", "pyCGM2.Nexus.eclipse", "AnalogDevice", "Channel", "Device", "ForcePlate", "EnfReader", "PatientEnfReader", "SessionEnfReader", "TrialEnfReader", "cleanEnf", "generateEmptyENF", "getCurrentMarkedEnfs", "getCurrentMarkedNodes", "getEnfFiles", "NexusConstructAcquisitionFilter", "NexusModelFilter", "appendAnalysisParameters", "appendAngleFromAcq", "appendBones", "appendBtkScalarFromAcq", "appendForceFromAcq", "appendModelledMarkerFromAcq", "appendMomentFromAcq", "appendPowerFromAcq", "checkActivatedSubject", "createEvents", "createGeneralEvents", "getActiveSubject", "getForcePlateAssignment", "setTrajectoryFromAcq", "setTrajectoryFromArray", "getNexusSubjectMp", "updateNexusSubjectMp", "pyCGM2.Nexus", "pyCGM2.Processing.analysis", "pyCGM2.Processing.Classification", "pyCGM2.Processing.cycle", "pyCGM2.Processing.JointPatterns", "C3dManager", "C3dManagerFilter", "C3dManagerProcedure", "DistinctC3dSetProcedure", "UniqueBtkAcqSetProcedure", "UniqueC3dSetProcedure", "ClassificationFilter", "ClassificationProcedure", "PFKEprocedure", "DiscretePointsFilter", "BenedettiProcedure", "DiscretePointProcedure", "GoldbergProcedure", "MaxMinProcedure", "JointPatternFilter", "JointPatternProcedure", "XlsJointPatternProcedure", "ProgressionFrameFilter", "PelvisProgressionFrameProcedure", "PointProgressionFrameProcedure", "ProgressionFrameProcedure", "ThoraxProgressionFrameProcedure", "RepresentativeCycleFilter", "RepresentativeProcedure", "Sangeux2015Procedure", "ScoreFilter", "CGM1_GPS", "ScoreProcedure", "AbstractBuilder", "Analysis", "AnalysisBuilder", "AnalysisFilter", "AnalysisStructure", "GaitAnalysisBuilder", "pyCGM2.Processing.analysisHandler.getAnalysisSection", "pyCGM2.Processing.analysisHandler.getNumberOfCycle", "pyCGM2.Processing.analysisHandler.getPhases", "pyCGM2.Processing.analysisHandler.getValues", "pyCGM2.Processing.analysisHandler.isKeyExist", "pyCGM2.Processing.analysisHandler.normalizedMuscleLength_withPose", "Cycle", "Cycles", "CyclesBuilder", "CyclesFilter", "GaitCycle", "GaitCyclesBuilder", "pyCGM2.Processing.cycle.analog_descriptiveStats", "pyCGM2.Processing.cycle.construcGaitCycle", "pyCGM2.Processing.cycle.point_descriptiveStats", "pyCGM2.Processing.cycle.spatioTemporelParameter_descriptiveStats", "AnalysisExportFilter", "XlsAnalysisExportFilter", "XlsExportDataFrameFilter", "pyCGM2.Processing.JointPatterns", "pyCGM2.Processing.C3dManager", "pyCGM2.Processing", "pyCGM2.Processing.ProgressionFrame", "pyCGM2.Processing.Representative", "pyCGM2.Processing.Scores", "SubjectMp", "detectMeasurementType", "findDynamic", "findKneeCalibration", "findStatic", "getFilename", "getForcePlateAssigment", "getKneeFunctionCalibMethod", "get_creation_date", "get_modelled_trials", "isType", "pyCGM2.QTM", "KinematicsPlotComparisonViewer", "KineticsPlotComparisonViewer", "SaggitalGagePlotViewer", "CoactivationEmgPlotViewer", "EnvEmgGaitPlotPanelViewer", "MultipleAnalysis_EnvEmgPlotPanelViewer", "TemporalEmgPlotViewer", "NormalizedGaitGrfIntegrationPlotViewer", "NormalizedGaitMeanGrfIntegrationPlotViewer", "NormalizedGroundReactionForcePlotViewer", "MuscleNormalizedPlotPanelViewer", "GpsMapPlotViewer", "NormalizedKinematicsPlotViewer", "NormalizedKineticsPlotViewer", "PlotViewer", "SpatioTemporalPlotViewer", "TemporalKinematicsPlotViewer", "TemporalKineticsPlotViewer", "NormalSTP", "NormativeData", "pyCGM2.Report.plot.addNormalActivationLayer", "pyCGM2.Report.plot.addRectanglePatches", "pyCGM2.Report.plot.addTemporalNormalActivationLayer", "pyCGM2.Report.plot.consistencyPlot", "pyCGM2.Report.plot.descriptivePlot", "pyCGM2.Report.plot.gaitConsistencyPlot", "pyCGM2.Report.plot.gaitDescriptivePlot", "pyCGM2.Report.plot.gaitMeanPlot", "pyCGM2.Report.plot.meanPlot", "pyCGM2.Report.plot.stpHorizontalHistogram", "pyCGM2.Report.plot.temporalPlot", "PlottingFilter", "pyCGM2.Report.plotUtils.colorContext", "pyCGM2.Report.normativeDatasets", "pyCGM2.Report.plot", "pyCGM2.Report", "detectStart_fromThreshold", "detect_cusum", "detect_onset", "detect_peaks", "detect_seq", "arrayLowPassFiltering", "downsample", "enveloppe", "forcePlateFiltering", "highPass", "markerFiltering", "rectify", "remove50hz", "pyCGM2.Signal", "GetAnalogNames", "GetMarkerNames", "_getSectionFromMd", "applyOnValidFrames", "applyRotation", "applyTranslators", "applyValidFramesOnOutput", "automaticKineticDetection", "btkAnalogToKtkTimeseries", "btkPointToKtkTimeseries", "buildTrials", "calculateAngleFrom3points", "changeSubjectName", "checkForcePlateExist", "checkGap", "checkMarkers", "checkMetadata", "checkMultipleSubject", "cleanAcq", "clearEvents", "clearPoints", "constructMarker", "constructPhantom", "createPhantoms", "deleteContextEvents", "findMarkerGap", "findValidFrames", "getAllParamAnalysis", "getForcePlateWrench", "getFrameBoundaries", "getLabelsFromScalar", "getNumberOfForcePlate", "getNumberOfModelOutputs", "getParamAnalysis", "getScalar", "getStartEndEvents", "getValidFrames", "getVisibleMarkersAtFrame", "hasChild", "isAnalogExist", "isEventExist", "isGap", "isKineticFlag", "isPhantom", "isPointExist", "isPointsExist", "keepAndDeleteOtherPoints", "markerUnitConverter", "markersToArray", "modifyEventSubject", "modifySubject", "renameEvent", "smartAppendAnalog", "smartAppendParamAnalysis", "smartAppendPoint", "smartCreateEvent", "smartGetEvents", "smartGetMetadata", "smartReader", "smartSetMetadata", "smartWriter", "sortedEvents", "export_CgmToMot", "footReactionMotFile", "mot2pointValues", "smartGetValues", "sto2pointValues", "transformMarker_ToOsimReferencial", "pyCGM2.Tools", "concatenateExcelFiles", "copyPaste", "copyPasteDirectory", "copySessionFolder", "createDir", "deleteDirectory", "getC3dFiles", "getDirname", "getDirs", "getFileCreationDate", "getFilename", "getFiles", "getIKweightSet", "getMp", "getMpFileContent", "getTranslators", "is_json", "is_yaml", "loadAnalysis", "loadModel", "loadModelSettings", "loadMp", "loadSettings", "openFile", "openJson", "openPickleFile", "openYaml", "readContent", "readXml", "renameFile", "saveAnalysis", "saveJson", "saveModel", "saveMp", "savePickleFile", "saveYaml", "try_as", "checkSimilarElement", "getSimilarElement", "homogeneizeArguments", "isInRange", "str", "toBool", "pyCGM2.Utils", "Third party package"], "terms": {"A": [0, 5, 31, 32, 33, 35, 43, 44, 45, 48, 49, 51, 52, 53, 54, 55, 64, 65, 66, 68, 69, 70, 73, 74, 75, 78, 79, 81, 97, 99, 102, 103, 104, 105, 106, 107, 121, 122, 126, 146, 151, 157, 158, 159, 162, 163, 164, 165, 174, 182, 189, 190, 192, 193, 194, 195, 196, 199, 200, 201, 203, 204, 205, 206, 207, 209, 210, 211, 213, 216, 219, 221, 225, 227, 230, 235, 240, 246, 247, 248, 249, 250, 251, 252, 253, 256, 260, 264, 273, 276, 277, 283, 284, 287, 289, 293, 295, 296, 300, 301, 302, 304, 305, 306, 307, 308, 312, 315, 335, 347, 348, 349, 352, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 366, 367, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 391, 392, 412, 413, 427, 431, 468, 470, 473, 476, 479, 481, 484, 506, 511, 514], "singl": [0, 63, 258, 302, 305, 335, 473, 512], "execut": [0, 63, 69, 70, 118, 121, 124, 126, 165, 166, 170, 171, 172, 174, 178, 224, 228, 229, 230, 237, 239, 289, 291, 300, 305, 365, 366, 368, 369, 370, 371], "rule": [0, 5, 226], "out": [0, 82, 126, 151, 155, 400], "packag": [0, 60], "propos": [0, 140, 356], "3": [0, 101, 116, 121, 122, 146, 154, 155, 158, 190, 191, 192, 197, 201, 204, 213, 219, 293, 309, 312, 391, 452], "subcommand": 0, "descript": [0, 37, 38, 39, 40, 42, 75, 79, 99, 189, 190, 209, 233, 236, 247, 249, 312, 313, 316, 329, 331, 332, 354, 355, 366, 378, 380, 425, 426, 434, 456, 457, 458, 459], "set": [0, 1, 2, 7, 30, 31, 37, 38, 39, 40, 41, 42, 44, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 77, 78, 79, 80, 81, 82, 99, 113, 114, 115, 121, 122, 145, 150, 151, 153, 154, 160, 168, 170, 171, 172, 174, 176, 178, 183, 188, 189, 190, 197, 201, 203, 204, 205, 224, 227, 234, 236, 238, 251, 252, 253, 274, 275, 284, 286, 292, 303, 307, 308, 312, 314, 326, 333, 334, 335, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 385, 391, 394, 407, 410, 454, 463, 493, 494, 495, 504], "edit": 0, "modifi": [0, 45, 50, 155, 168, 219, 398, 400, 408], "nexu": [0, 151, 155, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277], "call": [0, 7], "vicon": [0, 88, 112, 151, 155, 201, 212, 230, 234, 238, 246, 248, 249, 251, 252, 253, 256, 257, 260, 263, 276, 277, 517], "qtm": [0, 244, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352], "usag": [1, 2, 3], "pycgm2": [1, 2, 3, 36, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 323, 324, 325, 326, 327, 328, 333, 334, 335, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 385, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515], "ex": [1, 2, 3], "h": [1, 2, 3, 212, 291, 309], "possibl": [1, 2, 3], "choic": [1, 2, 3, 31, 38, 39, 44, 46, 47, 48, 49, 50, 52, 53, 219, 291, 356], "cgm10": 1, "l": [1, 218, 309], "leftflatfoot": [1, 9, 11, 13, 15, 17, 19, 21, 25, 27, 234], "r": [1, 182, 189, 204, 216, 218, 221, 295, 356], "rightflatfoot": [1, 9, 11, 13, 15, 17, 19, 21, 25, 27, 234], "hf": 1, "headflat": [1, 9, 11, 13, 15, 17, 19, 21, 25, 27, 234], "md": [1, 356, 406, 442], "markerdiamet": [1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 157, 159, 206, 207, 209, 210, 211, 213, 216, 217, 218, 219, 234, 238], "p": [1, 293, 309], "pointsuffix": [1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 38, 39, 58, 151, 155, 260, 289, 291, 293, 295, 296, 299, 309], "check": [1, 65, 66, 126, 189, 201, 204, 253, 269, 321, 352, 411, 417, 418, 419, 420, 421, 440, 442, 443, 444, 445, 446, 447, 448, 449, 489, 490, 493, 495, 510, 513], "resetmp": 1, "forcemp": [1, 9, 11, 13, 15, 17, 19, 21, 25, 27, 159], "ae": 1, "offlin": 1, "left": [1, 7, 23, 24, 38, 39, 40, 78, 81, 82, 93, 99, 104, 106, 107, 151, 155, 158, 162, 180, 182, 206, 207, 209, 210, 211, 213, 216, 217, 218, 219, 225, 228, 234, 238, 291, 305, 307, 312, 323, 327, 329, 331, 332, 345, 357, 361, 428, 459], "flat": [1, 9, 11, 13, 15, 17, 19, 21, 25, 27, 393], "foot": [1, 9, 11, 13, 15, 17, 19, 21, 25, 27, 35, 41, 42, 50, 97, 99, 102, 104, 106, 107, 151, 170, 172, 178, 217, 225, 228, 234, 374, 459, 467], "option": [1, 5, 7, 9, 11, 13, 15, 17, 19, 21, 25, 27, 31, 32, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 63, 64, 65, 66, 67, 68, 78, 81, 82, 101, 106, 107, 113, 114, 116, 117, 121, 122, 126, 131, 132, 133, 134, 135, 136, 137, 138, 141, 145, 151, 154, 155, 157, 159, 160, 162, 163, 168, 169, 170, 171, 172, 173, 174, 177, 178, 182, 189, 190, 199, 201, 202, 204, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 228, 229, 230, 232, 233, 234, 236, 238, 257, 259, 260, 263, 276, 289, 291, 292, 293, 295, 296, 297, 299, 302, 309, 312, 313, 314, 315, 316, 323, 325, 328, 333, 334, 335, 342, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 370, 371, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 391, 392, 393, 394, 395, 398, 400, 411, 413, 418, 425, 426, 432, 434, 439, 440, 448, 449, 452, 456, 457, 458, 459, 461, 462, 464, 467, 468, 476, 479, 484, 486, 488, 494, 495, 504], "right": [1, 7, 23, 24, 38, 39, 40, 78, 81, 82, 93, 99, 104, 106, 107, 151, 155, 158, 162, 180, 182, 206, 207, 209, 210, 211, 213, 216, 217, 218, 219, 225, 228, 234, 238, 291, 305, 307, 312, 323, 327, 329, 331, 332, 345, 357, 361, 428, 459], "head": [1, 9, 11, 13, 15, 17, 19, 21, 25, 27, 122, 155, 234], "marker": [1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 35, 63, 68, 87, 91, 99, 103, 106, 107, 126, 150, 151, 153, 154, 155, 157, 159, 165, 174, 198, 201, 204, 205, 206, 207, 209, 210, 211, 212, 213, 216, 217, 218, 219, 220, 226, 234, 238, 259, 266, 301, 302, 303, 304, 385, 400, 405, 408, 409, 413, 418, 419, 422, 425, 426, 427, 429, 430, 433, 440, 441, 445, 448, 449, 451, 452, 458, 462, 471, 485, 488], "diamet": [1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 157, 159, 206, 207, 209, 210, 211, 213, 216, 217, 218, 219, 234, 238], "suffix": [1, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 32, 38, 39, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 81, 151, 155, 223, 225, 228, 230, 232, 233, 236, 260, 263, 266, 289, 291, 293, 295, 296, 299, 309, 313, 316, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 370, 371, 384], "model": [1, 3, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 38, 39, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 85, 87, 120, 121, 122, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 259, 260, 266, 277, 289, 291, 292, 293, 295, 296, 297, 299, 307, 309, 312, 313, 314, 316, 351, 354, 355, 373, 410, 436, 448, 466, 492, 493, 505, 506], "output": [1, 5, 7, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 64, 78, 87, 124, 133, 134, 135, 136, 137, 138, 144, 145, 151, 155, 160, 163, 199, 201, 228, 230, 232, 248, 259, 260, 263, 266, 289, 291, 292, 293, 295, 296, 299, 300, 307, 309, 313, 316, 333, 334, 335, 354, 355, 357, 358, 359, 364, 373, 398, 410, 436, 448, 456, 466, 467, 473, 487], "forc": [1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 50, 51, 66, 81, 87, 101, 102, 103, 104, 105, 106, 107, 155, 159, 179, 180, 225, 228, 229, 230, 249, 253, 259, 265, 273, 348, 361, 362, 363, 398, 417, 422, 432, 435, 436, 446, 458, 467], "ouput": [1, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 50, 317, 318, 320, 321], "default": [1, 2, 3, 5, 7, 31, 32, 33, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 63, 68, 82, 101, 106, 107, 113, 114, 116, 117, 121, 122, 126, 131, 132, 133, 134, 135, 136, 137, 138, 141, 151, 152, 153, 154, 155, 157, 159, 168, 169, 170, 171, 177, 178, 182, 189, 201, 204, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 228, 229, 230, 234, 257, 260, 276, 289, 297, 301, 302, 304, 307, 309, 323, 327, 354, 355, 356, 361, 362, 363, 366, 367, 368, 370, 371, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 391, 392, 393, 394, 395, 398, 400, 411, 413, 425, 426, 432, 434, 439, 448, 449, 452, 456, 457, 458, 459, 461, 464, 467, 468, 476, 479, 484, 486, 488, 495, 504], "fals": [1, 2, 3, 5, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 63, 68, 97, 107, 152, 153, 154, 157, 159, 189, 201, 204, 224, 230, 253, 260, 276, 297, 321, 352, 360, 383, 391, 392, 393, 394, 417, 418, 420, 440, 443, 444, 445, 446, 447, 448, 449, 484, 485, 488, 489, 490, 504, 509, 510, 513, 515], "reset": [1, 204, 276, 486], "anthropometr": [1, 9, 11, 13, 15, 17, 19, 21, 25, 27, 65, 157, 159, 188, 201, 206, 211, 213, 216, 218, 219, 276, 277, 342, 486, 487, 494, 506], "paramet": [1, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 77, 78, 79, 80, 81, 82, 94, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 180, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 273, 274, 275, 276, 277, 284, 286, 287, 288, 289, 291, 292, 293, 295, 296, 297, 299, 300, 301, 302, 304, 305, 307, 308, 309, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515], "us": [1, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 63, 65, 66, 68, 69, 70, 73, 78, 79, 81, 82, 95, 97, 99, 106, 116, 118, 121, 122, 124, 128, 133, 134, 135, 136, 137, 138, 141, 144, 145, 146, 150, 151, 153, 154, 155, 158, 159, 164, 168, 169, 170, 171, 172, 173, 174, 177, 178, 180, 182, 183, 186, 190, 199, 201, 204, 205, 206, 209, 210, 211, 215, 219, 221, 224, 226, 229, 234, 236, 238, 240, 269, 274, 275, 284, 286, 287, 288, 289, 291, 297, 299, 301, 302, 303, 304, 305, 308, 312, 313, 323, 324, 325, 326, 327, 328, 333, 334, 335, 349, 354, 355, 359, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 385, 392, 393, 394, 397, 422, 425, 462, 466, 503, 505, 509], "mp": [1, 9, 11, 13, 15, 17, 19, 21, 25, 27, 65, 159, 188, 494, 506], "offset": [1, 9, 11, 13, 15, 17, 19, 21, 25, 27, 35, 99, 151, 155, 159, 199, 201, 207, 209, 212, 214, 215, 217, 220, 221, 451], "comput": [1, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 72, 73, 74, 75, 79, 95, 101, 108, 110, 111, 116, 141, 142, 143, 145, 146, 151, 155, 157, 159, 180, 187, 190, 202, 204, 206, 207, 209, 210, 211, 213, 216, 218, 219, 220, 221, 222, 223, 225, 228, 229, 230, 232, 233, 234, 236, 238, 283, 284, 286, 287, 288, 300, 301, 302, 304, 307, 308, 309, 313, 316, 323, 324, 325, 327, 328, 329, 331, 332], "knee": [1, 9, 11, 13, 15, 17, 19, 21, 24, 25, 27, 91, 150, 151, 182, 210, 211, 238, 291, 295, 345, 349], "ankl": [1, 9, 11, 13, 15, 17, 19, 21, 25, 27, 73, 91, 150, 151, 206, 238, 291], "joint": [1, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 73, 91, 92, 150, 151, 155, 158, 162, 168, 184, 199, 201, 206, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 221, 230, 232, 233, 236, 238, 297, 298, 299, 338, 371], "centr": [1, 9, 11, 13, 15, 17, 19, 21, 25, 27, 150, 158, 206, 210, 211, 218, 219], "anomalyexcept": [1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28], "rais": [1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 46, 47, 94, 163, 170, 308, 321, 354, 355, 396, 419, 421, 484, 491, 492, 496, 497, 499, 500], "an": [1, 5, 6, 7, 30, 31, 35, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 63, 64, 67, 69, 70, 75, 77, 78, 79, 81, 84, 94, 97, 105, 108, 110, 111, 117, 118, 121, 122, 125, 128, 131, 132, 144, 145, 160, 162, 188, 189, 191, 192, 193, 195, 198, 201, 204, 206, 207, 209, 210, 211, 217, 220, 223, 224, 225, 229, 230, 232, 234, 238, 246, 254, 259, 260, 262, 275, 284, 289, 293, 294, 295, 296, 299, 300, 305, 308, 309, 314, 317, 318, 319, 320, 321, 323, 326, 327, 330, 333, 334, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 377, 378, 379, 380, 381, 382, 383, 384, 394, 396, 415, 425, 426, 429, 431, 443, 444, 451, 455, 456, 457, 458, 459, 467, 468, 469, 470, 484, 501, 507], "except": [1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 46, 47, 94, 170, 308, 321, 354, 355, 419, 421, 450, 484, 491, 492, 496, 497, 499, 500, 509], "anomali": [1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 62, 63, 64, 65, 66, 67, 68, 69, 70, 244], "i": [1, 35, 37, 41, 46, 47, 50, 55, 56, 65, 66, 73, 78, 81, 82, 94, 97, 104, 106, 116, 117, 125, 140, 144, 145, 146, 151, 155, 157, 159, 163, 170, 178, 180, 182, 183, 189, 198, 200, 201, 203, 204, 205, 215, 220, 224, 225, 227, 238, 244, 260, 265, 284, 287, 289, 295, 300, 303, 305, 308, 309, 313, 316, 333, 334, 335, 354, 355, 356, 357, 359, 360, 364, 373, 385, 391, 392, 393, 394, 396, 407, 408, 422, 445, 447, 448, 449, 455, 457, 458, 459, 467, 471, 484, 489, 490, 496, 497, 498, 499, 500, 501, 509, 513, 515, 517], "detect": [1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 35, 63, 64, 65, 66, 67, 68, 70, 75, 97, 98, 99, 106, 107, 150, 151, 157, 159, 170, 186, 293, 295, 296, 297, 299, 301, 302, 303, 304, 307, 391, 392, 393, 394, 411, 421, 429, 496], "subject": [1, 7, 51, 78, 102, 175, 176, 180, 187, 228, 229, 230, 233, 259, 264, 269, 270, 271, 272, 276, 277, 292, 300, 312, 313, 314, 316, 416, 421, 437, 453, 454, 457, 459, 487], "static": [1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 122, 151, 153, 154, 155, 157, 159, 167, 176, 177, 178, 198, 201, 203, 207, 210, 224, 234, 260, 346], "c3d": [1, 7, 32, 45, 46, 47, 81, 112, 124, 126, 201, 207, 210, 228, 238, 253, 255, 257, 259, 284, 285, 286, 287, 288, 347, 414, 462, 464, 479], "file": [1, 5, 6, 7, 9, 11, 13, 15, 17, 19, 21, 25, 27, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 69, 70, 81, 82, 112, 113, 120, 121, 122, 124, 126, 151, 155, 157, 159, 160, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 188, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 265, 266, 267, 268, 271, 274, 275, 285, 286, 287, 288, 299, 333, 334, 335, 344, 345, 346, 347, 348, 349, 352, 372, 373, 385, 414, 462, 464, 466, 467, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509], "fi": 1, "frameinit": [1, 10, 12, 14, 16, 18, 20, 22, 26, 28, 101, 217], "fe": 1, "frameend": [1, 10, 12, 14, 16, 18, 20, 22, 26, 28, 101, 217], "proj": 1, "first": [1, 73, 74, 79, 111, 116, 128, 129, 140, 141, 142, 170, 172, 174, 178, 197, 234, 275, 312, 357, 415, 420, 430, 433, 461, 463, 493, 495], "frame": [1, 10, 12, 14, 16, 18, 20, 22, 23, 24, 26, 28, 66, 70, 99, 101, 108, 110, 111, 116, 117, 129, 130, 151, 170, 172, 174, 178, 180, 182, 190, 201, 202, 203, 204, 211, 212, 214, 217, 221, 228, 229, 230, 233, 234, 238, 275, 291, 300, 301, 302, 303, 304, 307, 323, 327, 338, 374, 385, 407, 408, 410, 415, 418, 422, 430, 433, 439, 440, 441, 459, 460, 471], "process": [1, 5, 7, 32, 33, 45, 50, 63, 64, 65, 66, 67, 68, 77, 78, 80, 81, 82, 112, 113, 114, 122, 145, 151, 155, 163, 168, 169, 170, 171, 172, 175, 176, 177, 178, 206, 209, 211, 214, 228, 235, 238, 244, 260, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 323, 324, 325, 326, 327, 328, 333, 334, 335, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 411, 414, 430], "last": [1, 170, 172, 174, 178, 211, 430, 433], "dynam": [1, 7, 146, 164, 170, 171, 172, 174, 178, 202, 203, 222, 224, 225, 228, 229, 230, 232, 284, 286, 287, 288, 312, 313, 316, 325, 328, 344, 362], "mfpa": [1, 10, 12, 14, 16, 18, 20, 22, 26, 28, 107, 170, 172, 178, 228, 467], "load": [1, 30, 32, 45, 46, 47, 82, 170, 172, 178, 226, 372, 373, 485, 487, 488, 491, 492, 493, 494, 495, 509], "thi": [1, 5, 7, 30, 31, 32, 33, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 54, 55, 56, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 97, 98, 99, 101, 104, 106, 116, 119, 120, 121, 140, 144, 145, 146, 151, 152, 153, 154, 155, 168, 169, 171, 172, 174, 177, 178, 180, 182, 183, 184, 186, 198, 204, 205, 215, 223, 224, 225, 227, 228, 229, 230, 233, 235, 236, 237, 239, 244, 284, 285, 289, 291, 295, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 313, 316, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 366, 368, 370, 385, 422, 455, 508, 517], "oper": 1, "avoid": [1, 215], "data": [1, 5, 6, 7, 30, 31, 32, 33, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 63, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 87, 97, 99, 104, 108, 109, 110, 112, 113, 114, 115, 117, 118, 121, 122, 125, 128, 129, 130, 131, 132, 144, 151, 154, 155, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 186, 187, 199, 201, 202, 204, 216, 223, 228, 229, 230, 234, 238, 239, 249, 259, 262, 264, 265, 267, 268, 274, 275, 289, 291, 292, 293, 295, 296, 297, 299, 300, 301, 302, 304, 305, 307, 308, 309, 312, 313, 315, 316, 319, 323, 354, 355, 356, 357, 358, 359, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 383, 391, 392, 393, 394, 397, 399, 401, 402, 411, 412, 413, 418, 421, 422, 425, 430, 445, 446, 452, 466, 467, 468, 469, 470, 485, 487, 488, 493, 495, 514], "from": [1, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 37, 38, 39, 40, 41, 42, 45, 46, 47, 50, 51, 54, 56, 65, 66, 67, 68, 76, 78, 80, 82, 94, 104, 108, 109, 110, 112, 113, 114, 115, 117, 121, 122, 133, 134, 135, 136, 137, 138, 140, 146, 150, 151, 155, 157, 159, 160, 161, 162, 165, 170, 172, 174, 176, 178, 188, 189, 190, 197, 201, 202, 203, 204, 205, 206, 209, 211, 213, 217, 219, 220, 226, 230, 234, 235, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 289, 292, 296, 297, 299, 306, 309, 312, 313, 316, 318, 320, 324, 327, 329, 330, 331, 332, 344, 345, 346, 348, 350, 351, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 370, 371, 372, 373, 377, 378, 379, 380, 381, 382, 383, 384, 386, 392, 396, 402, 404, 405, 406, 412, 413, 414, 421, 422, 424, 425, 431, 433, 434, 437, 438, 450, 452, 460, 462, 467, 468, 469, 470, 471, 474, 475, 479, 480, 483, 484, 485, 486, 487, 488, 491, 492, 493, 495, 498, 511], "api": [1, 60, 259, 276, 277], "sure": [1, 209], "you": [1, 7, 209, 312], "save": [1, 5, 32, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 121, 175, 176, 251, 252, 253, 385, 503, 504, 505, 506, 507, 508], "beforehand": 1, "referenti": [1, 10, 12, 14, 16, 18, 20, 22, 26, 28, 151, 155, 198, 201, 204, 205, 209, 214, 221, 226, 227, 470, 471], "project": [1, 10, 12, 14, 16, 18, 20, 22, 26, 28, 151, 199, 201, 230, 391, 392, 393, 394], "moment": [1, 10, 12, 14, 16, 18, 20, 22, 26, 28, 87, 104, 155, 199, 201, 225, 230, 249, 267, 367, 371, 422, 436], "distal": [1, 92, 183, 200, 201, 214, 221, 222, 230, 234, 238], "proxim": [1, 92, 183, 200, 201, 204, 212, 214, 221, 230, 234, 238], "global": [1, 92, 94, 108, 117, 121, 122, 180, 189, 190, 192, 204, 228, 229, 230, 233, 249, 300, 301, 302, 304, 327, 408, 486, 506], "cgm11": 1, "jc": [1, 92], "cgm21": [1, 13], "forcelhjc": 1, "forcerhjc": 1, "cgm22": [1, 15, 16, 25, 26], "msm": 1, "musculoskeletalmodel": 1, "musculoskelet": 1, "accuraci": [1, 28, 174, 213, 229], "noik": 1, "invers": [1, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 119, 121, 151, 153, 154, 155, 164, 165, 171, 172, 173, 174, 222, 230, 393], "cancel": 1, "cgm23": [1, 17, 18, 27, 28], "cgm24": [1, 19, 20], "cgm25": [1, 21, 22], "cgm26": 1, "function": [1, 5, 7, 30, 31, 32, 33, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 54, 55, 56, 60, 64, 65, 72, 101, 104, 106, 119, 120, 121, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 211, 215, 221, 345, 349, 354, 355, 357, 358, 359, 361, 363, 364, 366, 367, 392, 393, 394, 398, 400, 408, 422, 425, 455, 508, 509], "": [1, 35, 55, 90, 106, 121, 151, 155, 160, 180, 182, 187, 189, 196, 204, 209, 216, 219, 228, 229, 233, 235, 239, 246, 247, 250, 293, 295, 302, 307, 309, 335, 354, 355, 416, 454, 463, 489, 490, 509], "side": [1, 23, 24, 78, 82, 93, 102, 104, 151, 155, 162, 180, 182, 201, 204, 206, 207, 209, 210, 211, 217, 225, 229, 249, 253, 291, 345, 361], "base": [1, 5, 31, 35, 42, 43, 62, 64, 72, 76, 86, 89, 90, 91, 99, 104, 106, 107, 109, 115, 116, 118, 122, 124, 125, 150, 151, 160, 178, 179, 180, 181, 182, 184, 185, 187, 189, 201, 208, 213, 216, 218, 219, 224, 225, 229, 230, 234, 238, 253, 258, 284, 285, 289, 290, 291, 293, 294, 295, 298, 299, 301, 302, 303, 304, 306, 307, 309, 333, 334, 335, 354, 355, 362, 368, 385, 392, 393, 408, 409, 423, 430, 434, 439, 460, 461, 465, 469, 496, 503, 505], "fso": 1, "footstrikeoffset": [1, 35, 99], "foo": 1, "footoffoffset": [1, 35, 99], "systenat": 1, "strike": [1, 35, 41, 42, 50, 97, 99, 459], "both": [1, 106, 151, 155, 180, 182, 189, 206, 209, 210, 211, 234, 238, 289, 291, 305, 307, 319, 361, 393, 494], "off": [1, 32, 33, 35, 41, 42, 50, 80, 97, 99, 374, 395, 397, 398, 400, 459], "fill": 1, "list": [1, 7, 23, 24, 32, 33, 37, 38, 39, 40, 45, 54, 58, 63, 66, 68, 70, 73, 74, 75, 77, 78, 80, 81, 82, 101, 106, 112, 117, 121, 122, 126, 129, 130, 150, 151, 153, 154, 155, 158, 160, 162, 163, 189, 199, 201, 203, 204, 209, 211, 214, 221, 227, 233, 235, 238, 246, 248, 256, 257, 258, 264, 270, 271, 286, 287, 288, 297, 301, 304, 307, 312, 313, 316, 323, 324, 325, 328, 330, 335, 343, 344, 351, 354, 355, 358, 359, 360, 364, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 400, 404, 405, 406, 407, 408, 410, 411, 414, 418, 419, 423, 424, 425, 427, 429, 430, 431, 433, 434, 440, 441, 445, 449, 450, 452, 460, 468, 473, 476, 479, 481, 484, 510, 511], "spatiotemporalparamet": 1, "ad": [1, 35, 38, 39, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 78, 81, 97, 103, 108, 110, 204, 223, 228, 230, 233, 236, 260, 263, 266, 289, 291, 293, 295, 296, 299, 309, 357, 358, 359, 360, 361, 362, 363, 364, 384, 385, 392, 459], "time": [1, 7, 37, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 97, 113, 114, 121, 144, 170, 172, 174, 178, 189, 203, 312, 323, 334, 350, 360, 361, 362, 363, 366, 367, 370, 371, 374, 377, 378, 382, 391, 465], "nd": 1, "normativedata": [1, 38, 39, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 58, 291, 308, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 369], "ndm": 1, "normativedatamod": 1, "c": [1, 6, 50, 218], "norm": [1, 38, 39, 43, 50, 51, 54, 55, 221, 291, 308, 309, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 372, 373], "schwartz2008": 1, "pinzone2014": 1, "veryslow": 1, "slow": 1, "free": 1, "fast": [1, 196], "veryfast": 1, "centreon": 1, "centretwo": 1, "consist": [1, 37, 38, 39, 40, 41, 201, 228, 234, 334, 356, 366], "slowfre": 1, "mouvement": 1, "analysi": [1, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 66, 75, 76, 78, 79, 81, 84, 98, 121, 155, 163, 168, 169, 170, 171, 172, 174, 178, 180, 182, 199, 216, 230, 259, 261, 289, 291, 292, 293, 295, 296, 297, 299, 300, 302, 303, 304, 305, 306, 308, 309, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 333, 334, 338, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 369, 377, 378, 379, 380, 381, 382, 383, 431, 437, 457, 491, 503], "profil": [1, 55, 308, 309, 312], "bpf": 1, "bandpassfrequ": 1, "elf": 1, "enveloplowpassfrequ": 1, "ina": 1, "bandpass": [1, 32, 399], "filter": [1, 5, 10, 12, 14, 16, 18, 20, 22, 23, 24, 26, 28, 32, 33, 35, 65, 66, 67, 68, 69, 70, 77, 78, 79, 80, 81, 82, 97, 118, 119, 120, 124, 155, 163, 164, 165, 166, 167, 204, 223, 224, 225, 226, 228, 229, 230, 232, 233, 234, 236, 237, 238, 239, 257, 259, 260, 284, 289, 292, 297, 300, 305, 308, 314, 326, 333, 334, 335, 351, 385, 391, 395, 397, 398, 399, 400, 402, 434, 479, 484], "cutoff": [1, 10, 12, 14, 16, 18, 20, 22, 23, 24, 26, 28], "frequenc": [1, 10, 12, 14, 16, 18, 20, 22, 23, 24, 26, 28, 32, 33, 35, 77, 80, 101, 113, 114, 115, 117, 121, 122, 128, 129, 130, 131, 132, 204, 248, 395, 396, 397, 398, 399, 400, 402], "envelop": [1, 7, 33, 37, 40, 41, 42, 44, 80, 81, 313, 316, 356, 358, 359, 364, 397], "raw": [1, 44, 45, 356, 360], "non": [1, 254, 504], "rectifi": [1, 44, 45, 80, 356], "ignorenormalact": [1, 45], "do": 1, "displai": [1, 7, 37, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 63, 107, 189, 201, 224, 357, 359, 360, 364, 365, 366, 367, 369, 370, 371, 374, 375, 376, 385], "activ": [1, 37, 40, 45, 72, 73, 74, 79, 82, 238, 269, 272, 358, 359, 360, 364, 368, 374, 376], "get": [1, 78, 94, 120, 150, 153, 154, 204, 251, 252, 253, 292, 312, 319, 323, 325, 328, 433, 440, 481, 482, 511], "devic": [1, 112, 204, 210, 246, 247, 249], "detail": [1, 42, 151, 182, 358, 359, 360], "debug": 2, "logger": [2, 228], "mode": [2, 6, 150, 224, 260, 334], "folder": [3, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 50, 58, 81, 82, 250, 254, 255, 258, 259, 286, 288, 385, 476, 481, 493, 495], "initialis": 3, "m": [3, 212, 218, 219, 221, 293, 307], "e": [3, 5, 37, 38, 39, 40, 48, 49, 51, 52, 53, 54, 81, 82, 102, 104, 106, 107, 163, 180, 197, 199, 293, 307, 312, 323, 327, 329, 331, 332, 357, 364, 385, 408, 413, 428, 447, 458, 459], "copi": [3, 189, 201, 474, 475, 476], "cgm": [3, 7, 36, 46, 47, 151, 152, 153, 154, 157, 158, 159, 161, 168, 169, 171, 173, 175, 177, 206, 207, 209, 210, 211, 213, 219, 222, 241, 466, 488], "emg": [3, 7, 36, 37, 40, 41, 42, 44, 45, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 89, 244, 284, 286, 287, 288, 305, 312, 313, 316, 317, 324, 325, 328, 356, 357, 358, 359, 360], "data_path": [5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 82, 121, 122, 162, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 228, 286, 287, 288, 469, 485, 487, 488, 493, 495, 501, 506], "str": [5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 86, 88, 89, 90, 91, 92, 94, 99, 102, 104, 106, 107, 112, 113, 114, 116, 117, 120, 121, 122, 124, 126, 150, 151, 152, 153, 154, 155, 160, 161, 162, 163, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 187, 189, 190, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 234, 236, 238, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 274, 275, 276, 277, 286, 287, 288, 289, 291, 293, 295, 296, 297, 299, 301, 302, 304, 305, 307, 309, 312, 313, 316, 317, 318, 319, 320, 321, 323, 327, 329, 331, 332, 333, 334, 335, 343, 345, 347, 348, 349, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 393, 400, 404, 405, 408, 411, 414, 415, 416, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 515], "refer": [5, 35, 60, 73, 74, 81, 82, 151, 154, 168, 180, 182, 187, 202, 212, 213, 216, 218, 219, 221, 228, 291, 293, 295, 307, 309, 364, 366, 367, 369, 390, 391, 392, 393, 394], "nieuwenhuys2017": 5, "pointlabelsuffix": [5, 7, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 223, 225, 228, 230, 232, 233, 236, 313, 316, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 371, 384], "none": [5, 7, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 78, 81, 82, 101, 102, 104, 106, 107, 117, 121, 126, 141, 145, 150, 151, 153, 154, 155, 157, 158, 159, 160, 163, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 189, 190, 201, 202, 204, 206, 209, 211, 221, 222, 223, 225, 226, 228, 230, 232, 233, 236, 256, 259, 263, 289, 291, 292, 293, 295, 296, 299, 309, 311, 313, 314, 316, 325, 328, 333, 334, 335, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 371, 374, 377, 378, 379, 380, 381, 382, 383, 384, 391, 392, 393, 394, 398, 400, 408, 411, 418, 432, 434, 440, 442, 452, 457, 458, 459, 462, 464, 467, 476, 479, 484], "filtertru": 5, "bool": [5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 63, 68, 97, 107, 133, 134, 135, 136, 137, 138, 150, 151, 152, 153, 154, 155, 157, 159, 170, 172, 174, 178, 180, 189, 201, 204, 206, 211, 213, 219, 224, 228, 229, 230, 233, 234, 236, 238, 253, 260, 265, 267, 268, 276, 284, 286, 287, 288, 297, 301, 302, 304, 321, 323, 327, 352, 358, 359, 360, 368, 377, 378, 382, 383, 391, 392, 393, 394, 400, 408, 411, 417, 418, 420, 440, 443, 444, 445, 446, 447, 448, 449, 467, 471, 479, 484, 486, 489, 490, 504, 509, 510, 513, 515], "export": [5, 6, 7, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 151, 155, 204, 230, 259, 313, 333, 334, 335, 385, 466], "true": [5, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 97, 107, 133, 134, 135, 136, 137, 138, 189, 201, 204, 206, 211, 213, 219, 224, 228, 229, 230, 233, 234, 236, 238, 253, 265, 267, 268, 286, 287, 288, 297, 323, 327, 352, 360, 368, 377, 378, 382, 391, 392, 393, 394, 400, 417, 418, 420, 440, 443, 444, 445, 446, 447, 448, 449, 484, 486, 489, 490, 509, 513, 515], "outputnam": [5, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 333, 334, 335], "languag": 5, "fr": 5, "calcul": [5, 75, 101, 116, 140, 145, 151, 155, 164, 180, 183, 184, 186, 187, 204, 212, 214, 215, 217, 220, 222, 223, 225, 230, 233, 236, 238, 308, 309, 415], "pattern": [5, 37, 40, 41, 291, 297, 298, 299, 305, 338], "deviat": [5, 42, 50, 51, 52, 53, 54, 68, 307, 309, 372, 373], "specifi": [5, 7, 30, 31, 32, 35, 44, 45, 46, 47, 66, 69, 70, 77, 78, 79, 80, 81, 97, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 124, 126, 144, 145, 151, 160, 163, 170, 178, 182, 189, 201, 203, 225, 228, 233, 239, 247, 250, 251, 252, 253, 257, 258, 284, 289, 291, 300, 302, 305, 307, 308, 323, 327, 345, 351, 355, 385, 393, 394, 400, 408, 413, 414, 418, 419, 420, 424, 425, 427, 428, 437, 440, 441, 442, 444, 445, 450, 455, 460, 461, 464, 479, 484, 485, 487, 488, 493, 495, 513, 514], "defin": [5, 7, 50, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 151, 154, 155, 163, 164, 167, 183, 186, 187, 198, 201, 224, 226, 227, 229, 236, 291, 297, 327, 354, 355, 364, 365, 366, 369, 370, 371], "extern": [5, 170, 172, 178, 204, 213], "excel": [5, 6, 299, 372, 473], "retriev": [5, 82, 151, 160, 162, 163, 164, 165, 166, 167, 189, 201, 204, 246, 250, 251, 252, 253, 256, 257, 258, 269, 272, 273, 276, 350, 404, 405, 406, 431, 432, 434, 437, 438, 439, 460, 461, 479, 484, 485, 487, 488], "can": [5, 7, 31, 35, 38, 39, 42, 45, 46, 47, 62, 66, 144, 146, 151, 312, 334, 359, 366, 393], "result": [5, 69, 78, 79, 120, 121, 122, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 177, 178, 230, 289, 291, 297, 312, 315, 366, 367, 369, 473], "The": [5, 7, 30, 31, 32, 33, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 63, 64, 65, 66, 67, 69, 70, 73, 75, 79, 82, 94, 97, 105, 106, 116, 117, 118, 119, 120, 121, 122, 124, 126, 140, 145, 155, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 184, 186, 189, 190, 197, 200, 201, 202, 204, 215, 223, 224, 225, 228, 229, 230, 233, 234, 236, 237, 238, 239, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 286, 287, 288, 289, 291, 297, 299, 301, 302, 304, 305, 307, 309, 333, 334, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 360, 361, 362, 364, 372, 373, 393, 395, 396, 397, 398, 399, 400, 401, 402, 408, 422, 435, 438, 444, 455, 457, 459, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 515], "path": [5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 81, 82, 112, 113, 121, 122, 160, 162, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 250, 251, 252, 253, 254, 255, 257, 258, 259, 286, 287, 288, 299, 333, 334, 335, 385, 411, 414, 462, 464, 466, 469, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508], "where": [5, 30, 63, 82, 106, 116, 121, 122, 140, 151, 163, 164, 165, 167, 189, 204, 233, 238, 287, 305, 385, 394, 459, 460, 496, 497, 498, 499, 501], "object": [5, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 63, 64, 67, 104, 151, 155, 160, 165, 166, 170, 172, 174, 176, 178, 187, 221, 246, 247, 248, 249, 250, 251, 252, 253, 259, 262, 265, 266, 267, 268, 274, 283, 284, 286, 287, 288, 324, 333, 350, 354, 355, 361, 362, 363, 385, 393, 394, 398, 400, 408, 412, 413, 414, 457, 459, 470, 498, 501, 507], "contain": [5, 7, 32, 33, 35, 41, 42, 43, 44, 48, 49, 51, 52, 53, 54, 55, 56, 64, 65, 69, 70, 73, 74, 75, 77, 78, 79, 80, 81, 82, 97, 99, 104, 106, 112, 113, 114, 126, 129, 130, 145, 151, 164, 221, 227, 228, 233, 234, 236, 238, 250, 251, 252, 253, 254, 255, 276, 284, 286, 288, 289, 291, 292, 297, 299, 300, 301, 302, 304, 305, 308, 312, 313, 316, 324, 329, 331, 332, 356, 357, 358, 359, 360, 364, 366, 367, 369, 385, 391, 397, 399, 401, 402, 411, 412, 413, 414, 421, 427, 430, 431, 437, 455, 466, 467, 470, 471, 486, 487, 491, 492, 494, 514], "necessari": [5, 151, 169, 171, 172, 177, 368], "name": [5, 6, 7, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 69, 70, 75, 78, 81, 82, 102, 113, 114, 120, 121, 122, 126, 150, 151, 155, 162, 166, 168, 169, 170, 171, 172, 173, 174, 177, 178, 201, 202, 226, 248, 250, 251, 252, 253, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 357, 358, 359, 360, 364, 385, 386, 400, 404, 405, 408, 409, 416, 419, 437, 453, 454, 457, 459, 466, 467, 473, 476, 477, 481, 485, 487, 488, 493, 495, 501, 502, 504, 508], "point": [5, 7, 37, 140, 144, 151, 155, 186, 190, 201, 204, 220, 223, 233, 236, 263, 292, 293, 294, 295, 296, 323, 331, 338, 356, 364, 366, 367, 370, 371, 377, 378, 379, 380, 381, 382, 384, 393, 407, 413, 415, 422, 424, 434, 438, 447, 448, 449, 450, 458, 468, 470], "label": [5, 7, 31, 37, 38, 39, 40, 63, 68, 73, 74, 75, 77, 78, 79, 80, 81, 82, 94, 107, 113, 114, 150, 151, 153, 154, 155, 160, 168, 183, 187, 189, 190, 199, 200, 201, 203, 204, 205, 206, 209, 211, 220, 222, 223, 225, 226, 227, 228, 230, 232, 233, 234, 236, 238, 247, 251, 252, 253, 262, 263, 264, 265, 266, 267, 268, 270, 271, 274, 275, 301, 302, 304, 307, 312, 313, 316, 317, 318, 320, 321, 323, 327, 329, 331, 332, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 370, 371, 372, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 406, 415, 418, 420, 423, 424, 425, 426, 427, 430, 433, 434, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 452, 455, 456, 458, 459, 460, 461, 463, 468, 469, 470], "If": [5, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 66, 82, 94, 104, 113, 114, 117, 144, 145, 160, 163, 168, 169, 170, 171, 172, 174, 177, 178, 189, 204, 234, 236, 238, 286, 287, 288, 297, 308, 312, 333, 334, 335, 354, 355, 391, 392, 393, 394, 396, 419, 421, 422, 432, 434, 452, 455, 479, 484, 486, 491, 492, 496, 497, 499, 500, 504, 511], "appli": [5, 10, 12, 14, 16, 18, 20, 22, 23, 24, 26, 28, 32, 33, 35, 63, 77, 78, 80, 97, 99, 151, 155, 157, 158, 159, 163, 164, 165, 166, 167, 182, 199, 201, 206, 207, 209, 211, 237, 239, 300, 305, 308, 395, 398, 399, 400, 408, 451, 453], "addit": [5, 7, 44, 45, 54, 65, 66, 67, 68, 126, 151, 154, 155, 156, 162, 202, 203, 204, 230, 312, 313, 315, 316], "g": [5, 35, 37, 38, 39, 40, 48, 49, 51, 52, 53, 54, 74, 81, 82, 102, 104, 106, 107, 163, 180, 197, 199, 221, 293, 307, 312, 323, 327, 329, 331, 332, 357, 364, 374, 385, 391, 408, 413, 428, 458, 459], "french": 5, "return": [5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 33, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 63, 64, 69, 70, 73, 74, 75, 78, 82, 94, 97, 99, 101, 104, 105, 106, 107, 112, 113, 114, 116, 117, 118, 120, 124, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 153, 154, 155, 157, 159, 160, 162, 163, 164, 165, 166, 167, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 201, 203, 204, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 269, 272, 273, 276, 284, 289, 291, 292, 293, 295, 296, 297, 299, 301, 302, 304, 305, 312, 313, 316, 317, 318, 320, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 385, 386, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 408, 409, 411, 412, 413, 414, 415, 417, 418, 420, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 457, 459, 460, 461, 462, 464, 468, 469, 470, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 509, 510, 511, 513, 514, 515], "pd": [5, 31, 75, 78, 114, 292, 297, 299, 335], "datafram": [5, 31, 75, 78, 114, 292, 293, 295, 296, 297, 299, 335], "requir": [5, 9, 11, 13, 15, 17, 19, 21, 25, 27, 35, 45, 117, 176, 201, 203, 276, 342, 392, 486, 494], "locat": [5, 30, 82, 121, 209, 213, 218, 219, 238, 249, 414, 496, 497, 498, 499, 501], "pycgm2_settings_fold": 5, "exampl": [5, 6, 7, 30, 31, 32, 33, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 94, 199, 201, 307, 312, 391, 392, 393, 394], "analysisobj": 5, "analysisinst": [6, 7, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 75, 289, 293, 295, 296, 305, 317, 318, 320, 321, 322, 333, 334, 503], "advanc": [6, 334, 467], "instanc": [6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 33, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 63, 64, 65, 66, 67, 68, 69, 70, 75, 77, 78, 79, 80, 81, 84, 97, 99, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 118, 119, 120, 121, 122, 126, 129, 130, 157, 158, 159, 162, 163, 164, 165, 167, 182, 188, 189, 201, 203, 204, 206, 207, 209, 210, 211, 222, 223, 224, 225, 228, 229, 230, 232, 233, 234, 235, 236, 238, 240, 260, 261, 263, 264, 270, 271, 277, 283, 284, 286, 287, 288, 289, 291, 292, 293, 295, 296, 297, 299, 300, 305, 308, 313, 314, 316, 317, 318, 319, 320, 321, 323, 326, 327, 329, 330, 331, 332, 333, 334, 344, 345, 346, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 377, 378, 379, 380, 381, 382, 383, 385, 391, 392, 393, 398, 400, 404, 405, 406, 407, 408, 409, 410, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 491, 492, 503, 505, 506, 507], "spreadsheet": [6, 7, 334, 335], "your": [6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 50], "basic": [6, 32, 33, 64, 91, 313, 334], "johndo": 6, "filenam": [7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 63, 64, 65, 66, 67, 68, 69, 70, 81, 82, 112, 113, 121, 122, 124, 126, 160, 162, 174, 176, 201, 250, 253, 254, 256, 258, 259, 283, 286, 287, 288, 333, 334, 335, 347, 351, 373, 385, 411, 414, 462, 464, 466, 467, 468, 469, 479, 480, 483, 484, 491, 492, 494, 496, 497, 498, 499, 501, 503, 504, 505, 506, 507, 508], "eventtyp": [7, 37, 38, 39, 40, 41, 42, 48, 49, 50, 51, 52, 53, 54], "gait": [7, 10, 12, 14, 16, 18, 20, 22, 23, 24, 26, 28, 35, 37, 38, 39, 40, 41, 42, 44, 48, 49, 50, 51, 52, 53, 54, 56, 58, 67, 74, 75, 98, 99, 106, 150, 151, 180, 182, 204, 216, 218, 219, 230, 234, 238, 289, 291, 293, 295, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 316, 327, 328, 330, 356, 358, 362, 364, 369, 379, 380], "kinematiclabelsdict": [7, 313, 316], "dict": [7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 64, 65, 66, 67, 68, 70, 78, 82, 106, 113, 114, 121, 122, 126, 150, 151, 154, 155, 157, 158, 159, 162, 164, 168, 174, 188, 199, 201, 202, 203, 213, 216, 218, 219, 227, 235, 250, 251, 252, 253, 276, 289, 291, 292, 297, 305, 312, 313, 314, 315, 316, 329, 331, 332, 333, 342, 372, 373, 385, 409, 431, 437, 462, 485, 486, 487, 488, 493, 494, 495, 496, 497, 499, 500, 504, 506, 508, 512], "lhipangl": [7, 307, 312], "lkneeangl": [7, 317, 318, 320, 321], "lankleangl": 7, "lfootprogressangl": 7, "lpelvisangl": 7, "lforefootangl": 7, "lthoraxangl": 7, "lspineangl": 7, "lneckangl": 7, "lheadangl": 7, "lshoulderangl": 7, "lelbowangl": 7, "lwristangl": 7, "rhipangl": 7, "rkneeangl": 7, "rankleangl": 7, "rfootprogressangl": 7, "rpelvisangl": 7, "rforefootangl": 7, "rthoraxangl": 7, "rspineangl": 7, "rneckangl": 7, "rheadangl": 7, "rshoulderangl": 7, "relbowangl": 7, "rwristangl": 7, "kineticlabelsdict": [7, 313, 316], "lhipmoment": 7, "lkneemoment": 7, "lanklemo": 7, "lhippow": 7, "lkneepow": 7, "lanklepow": 7, "lstangroundreactionforc": 7, "lgroundreactionforc": 7, "rhipmoment": 7, "rkneemoment": 7, "ranklemo": 7, "rhippow": 7, "rkneepow": 7, "ranklepow": 7, "rstangroundreactionforc": 7, "rgroundreactionforc": 7, "emgchannel": [7, 32, 33, 40], "voltag": [7, 32, 33], "emg1": [7, 32, 33, 40, 73, 74], "emg2": [7, 32, 33, 40, 73, 74], "emg3": 7, "emg4": 7, "emg5": 7, "emg6": 7, "emg7": 7, "emg8": 7, "emg9": 7, "emg10": 7, "emg11": 7, "emg12": 7, "emg13": 7, "emg14": 7, "emg15": 7, "emg16": 7, "geometrymusclelabelsdict": [7, 313, 316], "dynamicmusclelabelsdict": [7, 313, 316], "subjectinfo": [7, 312, 313, 316], "experimentalinfo": [7, 312, 313, 316], "modelinfo": [7, 292, 312, 313, 316], "kwarg": [7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 35, 37, 41, 42, 44, 45, 46, 47, 58, 63, 68, 70, 124, 199, 201, 211, 234, 238, 512], "normalis": [7, 144], "ie": [7, 158, 317], "nest": 7, "dictionari": [7, 64, 65, 66, 78, 82, 106, 113, 114, 121, 122, 126, 150, 151, 154, 155, 157, 158, 159, 162, 164, 168, 174, 183, 201, 202, 213, 216, 218, 219, 227, 250, 251, 252, 253, 273, 276, 305, 312, 313, 315, 316, 329, 331, 332, 333, 372, 373, 385, 409, 431, 437, 462, 486, 496, 497, 499, 500, 504, 506, 508, 512], "spatiotempor": [7, 312, 313, 315, 316, 324], "normal": [7, 31, 37, 40, 41, 42, 45, 48, 49, 50, 51, 52, 53, 54, 81, 82, 89, 265, 267, 268, 312, 323, 334, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 374, 376, 377, 378, 382], "kinemat": [7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 35, 38, 43, 44, 46, 48, 49, 52, 53, 58, 84, 119, 121, 151, 153, 154, 155, 165, 170, 173, 174, 180, 212, 284, 286, 287, 288, 295, 305, 307, 312, 313, 316, 317, 324, 325, 328, 354, 355, 356, 361, 362, 366, 370, 466, 485], "kinet": [7, 39, 44, 47, 49, 53, 58, 84, 92, 155, 284, 286, 287, 288, 295, 305, 312, 313, 316, 317, 324, 325, 328, 355, 356, 367, 371, 411, 412, 413, 446], "By": [7, 50, 327, 391], "channel": [7, 31, 32, 33, 40, 45, 75, 77, 80, 82, 246, 357, 358, 359, 360], "also": [7, 31, 140, 144, 312], "differ": [7, 31, 37, 38, 39, 40, 45, 55, 62, 64, 72, 75, 128, 155, 220, 228, 283, 284, 286, 287, 288, 294, 303, 354, 355, 356, 359, 366, 385, 392, 393, 394, 436, 511], "For": [7, 155, 393], "argument": [7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 35, 37, 41, 42, 44, 45, 46, 47, 68, 151, 155, 230, 512], "pstfilenam": 7, "kinematicfilenam": 7, "kineticfilenam": 7, "emgfilenam": 7, "type": [7, 37, 38, 39, 40, 41, 42, 44, 48, 49, 50, 51, 52, 53, 54, 62, 63, 64, 65, 68, 72, 75, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 98, 99, 105, 152, 153, 154, 155, 162, 163, 170, 172, 178, 199, 201, 202, 203, 205, 227, 235, 236, 240, 246, 247, 248, 250, 257, 258, 259, 264, 272, 291, 305, 312, 315, 333, 334, 335, 343, 351, 352, 354, 355, 356, 364, 368, 372, 373, 385, 390, 413, 425, 436, 458, 459, 461, 508, 509], "event": [7, 35, 37, 38, 39, 40, 41, 42, 48, 49, 50, 51, 52, 53, 54, 67, 75, 79, 81, 97, 98, 99, 102, 244, 259, 270, 271, 291, 305, 307, 312, 317, 318, 319, 320, 321, 323, 329, 331, 332, 354, 355, 376, 377, 378, 379, 380, 381, 382, 386, 392, 423, 428, 437, 439, 444, 446, 453, 455, 457, 459, 460, 465], "includ": [7, 31, 44, 46, 47, 65, 66, 68, 81, 82, 105, 121, 122, 151, 155, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 189, 312, 327, 354, 355, 359, 361, 364, 385, 452, 473, 476, 480, 483, 494], "unknown": [7, 95], "emg_channel": 7, "muscl": [7, 28, 37, 40, 54, 73, 74, 75, 78, 82, 162, 284, 286, 287, 288, 312, 313, 316, 325, 328, 357, 358, 359, 364, 374, 376], "geometri": [7, 140, 141, 142, 143, 151, 284, 286, 287, 288, 312, 313, 316, 325, 328], "associ": [7, 68, 69, 70, 75, 82, 121, 122, 124, 126, 183, 200, 204, 225, 246, 247, 248, 283, 312, 313, 315, 316, 359, 437, 457, 459], "metadata": [7, 259, 406, 416, 420, 442, 454, 461, 463], "inform": [7, 78, 82, 151, 180, 203, 204, 233, 236, 249, 251, 252, 253, 292, 300, 312, 313, 314, 316, 391, 392, 393, 431, 437, 461], "about": [7, 203, 204, 249, 292, 312, 313, 316, 431, 437], "experi": [7, 78, 312], "keyword": [7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 35, 37, 41, 42, 44, 45, 46, 47, 68, 512], "btkacq": [7, 45, 46, 47, 102, 103, 105, 107, 204, 222, 223, 224, 225, 228, 229, 230, 232, 398, 400, 437], "btk": [7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 35, 45, 46, 47, 63, 64, 65, 66, 67, 68, 69, 70, 77, 80, 97, 99, 102, 103, 104, 105, 106, 107, 124, 126, 150, 151, 154, 155, 157, 159, 163, 164, 165, 167, 170, 172, 174, 176, 178, 180, 186, 201, 202, 204, 206, 207, 209, 210, 211, 217, 220, 222, 223, 224, 225, 228, 229, 230, 232, 233, 234, 236, 238, 239, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 274, 283, 286, 287, 288, 300, 301, 302, 304, 323, 325, 327, 328, 330, 360, 370, 371, 376, 384, 398, 400, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 471], "btkacquisit": [7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 35, 63, 64, 65, 66, 67, 68, 69, 70, 77, 80, 97, 99, 102, 103, 104, 105, 106, 107, 124, 126, 150, 151, 154, 155, 157, 159, 163, 164, 165, 167, 170, 172, 174, 176, 178, 180, 201, 202, 204, 206, 207, 209, 210, 211, 217, 220, 222, 223, 224, 225, 228, 229, 230, 232, 233, 234, 236, 238, 239, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 274, 286, 287, 288, 300, 301, 302, 304, 323, 325, 327, 328, 330, 360, 370, 371, 376, 384, 398, 400, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 471], "file1": [7, 45, 46, 47], "file2": 7, "code": [7, 31, 32, 140, 204, 312], "take": [7, 228, 308, 401], "2": [7, 32, 121, 122, 153, 187, 199, 201, 213, 214, 216, 218, 219, 291, 307, 391, 395, 400, 459], "ar": [7, 30, 63, 66, 75, 81, 82, 92, 97, 106, 121, 151, 155, 158, 163, 164, 165, 167, 189, 198, 204, 219, 224, 228, 230, 232, 233, 236, 256, 267, 268, 305, 307, 313, 324, 327, 391, 393, 418, 419, 421, 422, 432, 441, 446, 455, 504, 510], "analysisinstance2": 7, "doe": [7, 155, 313, 391, 491, 492], "firstnam": 7, "john": 7, "barefoot": 7, "No": 7, "cgm1": [7, 11, 12, 152, 153, 154, 157, 159, 207, 488], "specif": [7, 31, 35, 37, 41, 42, 45, 54, 62, 64, 72, 75, 76, 98, 104, 117, 151, 152, 153, 154, 155, 156, 159, 160, 168, 169, 170, 171, 172, 173, 175, 177, 178, 183, 189, 192, 201, 202, 203, 212, 218, 229, 235, 259, 270, 285, 303, 312, 354, 355, 357, 358, 359, 360, 367, 368, 373, 385, 432, 437, 441, 469, 476, 484, 509], "In": [7, 126, 309, 334], "add": [7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 62, 64, 72, 102, 201, 204, 364], "experiment": [7, 78, 292, 312, 313, 314, 316], "These": 7, "calibratefilenamelabel": [9, 11, 13, 15, 17, 19, 21, 25, 27], "translat": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 113, 114, 189, 190, 409, 462, 488], "required_mp": [9, 11, 13, 15, 17, 19, 21, 25, 27], "optional_mp": [9, 11, 13, 15, 17, 19, 21, 25, 27, 157, 159], "float": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 32, 33, 35, 51, 68, 77, 80, 81, 101, 121, 133, 134, 135, 136, 137, 138, 141, 142, 157, 159, 164, 170, 172, 174, 175, 176, 178, 180, 182, 187, 199, 201, 204, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 229, 230, 234, 238, 248, 327, 361, 362, 374, 375, 381, 385, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 451, 457, 461, 513], "argv": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 512], "forcebtkacq": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], "instead": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 45, 46, 47, 269, 393], "build": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 151, 155, 259, 314, 324, 326], "displaycoordinatesystem": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28], "virtual": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 206, 209, 211, 238], "visualis": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28], "anatom": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 151, 154, 155, 182, 198, 201, 202, 203, 204, 205, 226, 234, 236, 237, 238, 303], "refenti": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28], "nokinematicscalcul": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28], "disabl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 45, 234, 284, 323, 358, 359, 360, 394], "acqstat": [9, 11, 13, 15, 17, 19, 21, 25, 150, 157, 159], "detectanomali": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26], "presenc": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 35, 126, 263, 411, 419], "reconstructfilenamelabel": [10, 12, 14, 16, 18, 20, 22, 23, 24, 26, 28], "momentproject": [10, 12, 14, 16, 18, 20, 22, 26, 28, 94, 199, 201, 230], "calibr": [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 91, 120, 121, 122, 150, 151, 154, 155, 157, 159, 198, 201, 204, 211, 214, 219, 226, 234, 240, 345, 349], "trial": [10, 12, 14, 16, 18, 20, 22, 23, 24, 26, 28, 58, 88, 170, 172, 174, 176, 178, 203, 225, 228, 229, 230, 232, 234, 253, 258, 284, 285, 300, 351], "plate": [10, 12, 14, 16, 18, 20, 22, 23, 24, 26, 28, 66, 102, 103, 104, 105, 106, 107, 179, 180, 213, 216, 218, 219, 225, 228, 229, 234, 238, 249, 253, 259, 273, 348, 398, 417, 432, 435, 446, 467], "assign": [10, 12, 14, 16, 18, 20, 22, 26, 28, 102, 104, 106, 107, 121, 122, 228, 253, 263, 273, 348, 364], "int": [10, 12, 14, 16, 18, 20, 22, 23, 24, 26, 28, 32, 33, 35, 63, 66, 68, 70, 85, 87, 93, 95, 99, 101, 106, 107, 112, 115, 117, 121, 122, 128, 129, 130, 131, 132, 144, 145, 170, 172, 174, 178, 189, 199, 201, 204, 211, 214, 217, 221, 275, 305, 307, 312, 323, 327, 374, 377, 378, 379, 380, 381, 382, 384, 385, 391, 392, 393, 394, 395, 398, 400, 407, 410, 418, 430, 432, 433, 435, 440, 441, 459, 460, 461, 463, 468], "index": [10, 12, 14, 16, 18, 20, 22, 23, 24, 26, 28, 43, 60, 72, 73, 74, 79, 117, 189, 199, 201, 204, 214, 221, 291, 307, 375, 377, 378, 379, 380, 381, 382, 384, 385, 391, 394, 432, 441, 463], "fc_lowpass_mark": [10, 12, 14, 16, 18, 20, 22, 23, 24, 26, 28, 35], "low": [10, 12, 14, 16, 18, 20, 22, 23, 24, 26, 27, 28, 32, 33, 35, 65, 77, 80, 395, 397, 398, 400], "pass": [10, 12, 14, 16, 18, 20, 22, 23, 24, 26, 28, 32, 33, 35, 65, 66, 67, 68, 77, 80, 151, 395, 397, 398, 400], "fiter": [10, 12, 14, 16, 18, 20, 22, 23, 24, 26, 28], "trajectori": [10, 12, 14, 16, 18, 20, 22, 23, 24, 26, 28, 63, 68, 180, 201, 203, 204, 206, 209, 211, 212, 220, 223, 274, 275, 301, 302, 304, 452], "order_lowpass_mark": [10, 12, 14, 16, 18, 20, 22, 23, 24, 26, 28, 35], "order": [10, 12, 14, 16, 18, 20, 22, 23, 24, 26, 28, 35, 121, 122, 128, 129, 130, 131, 132, 395, 398, 400], "fc_lowpass_forcepl": [10, 12, 14, 16, 18, 20, 22, 23, 24, 26, 28], "measur": [10, 12, 14, 16, 18, 20, 22, 23, 24, 26, 28, 65, 117, 145, 155, 186, 188, 201, 212, 213, 216, 218, 219, 230, 246, 247, 249, 309, 343, 344, 345, 346, 347, 348, 349, 351, 352], "order_lowpass_forcepl": [10, 12, 14, 16, 18, 20, 22, 23, 24, 26, 28], "acqgait": [10, 12, 14, 16, 18, 20, 22, 26, 35], "1": [11, 12, 14, 121, 122, 131, 132, 145, 151, 152, 158, 199, 201, 214, 221, 230, 374, 390, 391, 392, 393, 394, 407, 459, 468], "acquisit": [12, 23, 24, 33, 35, 45, 46, 47, 63, 64, 65, 66, 67, 68, 69, 70, 77, 80, 97, 99, 102, 103, 104, 105, 106, 107, 124, 125, 126, 151, 154, 155, 157, 159, 163, 164, 165, 167, 170, 172, 174, 176, 178, 180, 186, 201, 202, 204, 206, 207, 209, 210, 211, 217, 220, 222, 223, 224, 225, 228, 229, 230, 232, 233, 234, 236, 238, 239, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 274, 275, 283, 287, 300, 301, 302, 304, 323, 325, 327, 328, 330, 360, 370, 371, 376, 384, 398, 400, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 471], "hjcmethod": [13, 15, 17, 19, 21, 25, 27], "hip": [13, 15, 17, 19, 21, 25, 27, 158, 206, 209, 211, 213, 216, 218, 219, 312], "regress": [13, 15, 17, 19, 21, 25, 27, 90, 209, 213, 216, 218, 219], "cgm2": [14, 150, 151, 152, 153, 154, 155, 156, 232], "weight": [15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 151, 154, 155, 174, 485], "ik_flag": [15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28], "enabl": [16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 68, 107, 150, 157, 159, 234, 260, 284, 321, 323, 354, 355, 358, 359, 360, 400], "beginfram": [23, 24], "endfram": [23, 24, 323, 327], "jointrang": [23, 24, 211, 214], "bodi": [23, 24, 38, 39, 46, 47, 48, 49, 50, 51, 52, 53, 65, 85, 86, 101, 121, 122, 146, 151, 155, 162, 164, 180, 182, 187, 201, 204, 206, 207, 209, 210, 211, 217, 225, 229, 354, 355, 361, 362, 366, 367, 370, 371], "rang": [23, 24, 66, 70, 170, 172, 174, 178, 214, 513], "motion": [23, 24, 97, 99, 108, 109, 110, 111, 117, 151, 155, 165, 180, 201, 202, 203, 204, 205, 214, 221, 223, 224, 233, 237, 238, 239, 422], "boundari": [23, 24, 32, 45, 50, 77, 209, 211, 221, 291, 377, 378, 379, 380, 381, 382, 383, 384, 385, 418, 433, 440], "updat": [23, 24, 31, 35, 69, 79, 81, 103, 117, 121, 122, 155, 160, 165, 188, 189, 201, 234, 238, 277, 300, 308, 453, 454, 455, 456, 458], "acqfunc": [23, 24], "level": [27, 28, 60, 212, 319, 420, 461, 463], "arg": [27, 28, 45, 175], "detec": [27, 28], "musclelength": [28, 364], "length": [28, 54, 90, 144, 163, 187, 204, 312, 364, 369], "ikaccuraci": 28, "ik": [28, 151, 174], "solver": 28, "creat": [30, 44, 81, 104, 108, 110, 121, 122, 189, 251, 252, 253, 356, 358, 364, 365, 366, 368, 369, 370, 371, 414, 427, 459, 467, 476, 477], "manag": [30, 44, 82, 174, 212, 284, 285, 293, 338, 356, 358, 359, 360, 385], "initi": [30, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 97, 99, 101, 108, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 204, 246, 247, 248, 249, 250, 251, 252, 253, 259, 260, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 370, 371, 372, 373, 385, 392, 394, 396], "emgmanag": [30, 31, 37, 41, 42, 45, 356, 358, 359, 360], "emg_manag": 30, "method": [31, 35, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 89, 91, 95, 97, 98, 99, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 128, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 247, 248, 249, 250, 251, 252, 253, 259, 260, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 323, 324, 325, 326, 327, 328, 333, 334, 335, 349, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 385, 425], "meanmax": [31, 89], "fromotheranalysi": 31, "mvcset": 31, "amplitud": [31, 37, 40, 41, 42, 75, 76, 81, 89, 267, 268, 358, 359, 391, 392, 393], "signal": [31, 44, 45, 66, 75, 76, 77, 79, 80, 81, 82, 104, 145, 244, 356, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404], "It": [31, 32, 35, 37, 38, 39, 40, 41, 42, 45, 51, 54, 55, 56, 62, 64, 66, 72, 76, 78, 97, 98, 104, 106, 144, 145, 151, 155, 176, 180, 198, 204, 225, 228, 229, 238, 300, 303, 305, 306, 307, 354, 355, 356, 361, 364, 385, 493, 495, 496], "anoth": [31, 81, 116, 151, 189, 201, 206, 209, 211], "mvc": 31, "maxmax": [31, 89], "medianmax": [31, 89], "forceemgmanag": [31, 37, 41, 42, 44, 45], "threshold": [31, 63, 68, 89, 106, 107, 182, 391, 392, 393], "emganalysisinst": 31, "emganalysisinstanceprebloc": 31, "current": [31, 65, 66, 139, 256, 257, 316, 326, 333, 334, 335, 357, 359, 360, 385, 455, 502], "mean": [31, 68, 89, 145, 198, 203, 205, 291, 312, 329, 331, 332, 362, 372, 373, 425], "maximum": [31, 89, 102, 296, 385, 393, 513], "valu": [31, 73, 74, 75, 76, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 99, 117, 121, 122, 128, 131, 132, 139, 140, 145, 151, 155, 158, 160, 174, 189, 201, 204, 207, 214, 215, 220, 234, 238, 247, 250, 251, 252, 253, 263, 267, 268, 273, 292, 296, 297, 299, 312, 320, 327, 329, 331, 332, 372, 373, 374, 377, 378, 379, 380, 381, 382, 384, 385, 390, 392, 393, 394, 395, 396, 401, 422, 426, 451, 455, 456, 457, 458, 463, 468, 469, 470, 513, 515], "other": [31, 41, 42, 66, 76, 146, 204, 393, 464], "gaittrial": 32, "highpassfrequ": [32, 33], "20": [32, 33, 182, 291], "200": [32, 33, 391, 392], "envelopfrequ": [32, 33], "6": [32, 33, 391, 392, 393, 395, 400], "0": [32, 33, 35, 51, 99, 101, 121, 122, 145, 199, 201, 209, 212, 213, 214, 215, 216, 217, 218, 219, 220, 230, 232, 275, 307, 361, 362, 374, 375, 390, 391, 392, 393, 394, 407, 413, 459], "filesuffix": [32, 81], "outdatapath": 32, "support": [32, 37, 38, 39, 40, 54, 354, 355, 361], "high": [32, 33, 60, 77], "allow": [32, 37, 41, 42, 45, 56, 151, 168, 219, 227, 354, 355, 360, 385], "cut": [32, 33, 35, 80, 395, 397, 398, 400], "gaittrial1": 32, "gaittrial2": 32, "analog": [32, 81, 101, 204, 246, 259, 323, 329, 404, 412, 443, 456], "acq": [33, 63, 64, 65, 66, 67, 68, 69, 70, 77, 80, 97, 99, 104, 106, 124, 126, 151, 155, 170, 172, 174, 176, 178, 180, 186, 201, 206, 207, 209, 211, 217, 220, 233, 234, 236, 238, 239, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 274, 287, 300, 301, 302, 304, 323, 330, 376, 384, 404, 405, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 471], "within": [33, 97, 106, 160, 169, 418, 440, 479, 481, 495, 513], "processed_acq": 33, "accord": [35, 73, 74, 151, 187, 209, 212, 228, 292, 307, 324, 391], "et": [35, 44, 74, 99, 182, 213, 216, 218, 219, 291, 293, 295, 309, 356], "al": [35, 44, 74, 99, 182, 213, 216, 218, 219, 291, 293, 295, 309, 356], "2008": [35, 99], "approach": [35, 356], "describ": [35, 44, 73, 74, 78, 99, 182, 307, 356], "j": [35, 213, 216, 218, 291, 309], "richard": [35, 309], "higginson": 35, "paper": 35, "systemat": [35, 99], "all": [35, 41, 81, 117, 160, 184, 189, 201, 287, 288, 292, 306, 312, 323, 377, 379, 385, 407, 412, 422, 431, 432, 434, 449, 450, 452, 453, 479, 481, 484, 510], "4": [35, 155, 156, 158, 193, 194, 295, 391, 398], "tupl": [35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 99, 101, 104, 133, 134, 135, 136, 137, 138, 140, 151, 187, 197, 213, 216, 218, 219, 221, 257, 276, 297, 301, 302, 304, 312, 313, 316, 342, 391, 411, 418, 427, 430, 433, 436, 439, 440], "boolean": [35, 224, 234, 238, 284, 323, 358, 359, 394, 515], "indic": [35, 63, 68, 97, 99, 102, 104, 106, 107, 150, 152, 153, 154, 155, 158, 174, 180, 199, 201, 213, 219, 225, 228, 229, 230, 233, 253, 265, 267, 268, 305, 323, 327, 361, 392, 393, 394, 408, 411, 440, 467, 468, 471], "state": [35, 64, 97, 155], "detector": [35, 65, 66, 67, 68, 70, 390, 391, 392, 393, 394], "updated_acq": 35, "detection_st": 35, "10": [35, 63, 216, 221, 291, 293, 309, 392], "5": [35, 105, 156, 391, 393, 398], "two": [35, 66, 67, 70, 79, 104, 106, 116, 126, 140, 141, 142, 151, 197, 205, 220, 276, 357], "simpl": [35, 119, 120, 182, 307, 313], "determin": [35, 97, 113, 114, 151, 221, 236, 238, 300, 302, 303, 304, 305], "dure": [35, 73, 74, 75, 81, 82, 106, 180, 198, 205, 212, 224, 225, 229, 230, 291, 300, 302, 304, 358, 360, 362], "treadmil": 35, "overground": 35, "walk": [35, 73, 212], "postur": [35, 182, 218, 219, 291, 309], "27": 35, "710": 35, "714": 35, "doi": [35, 291, 293, 309], "1016": [35, 291, 293, 309], "gaitpost": [35, 291, 309], "2007": [35, 219, 221], "07": 35, "007": 35, "lib": 36, "eventdetector": 36, "plot": [36, 58, 63, 68, 86, 291, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 385, 389, 391, 392, 393, 394], "report": [36, 50, 125, 163, 244, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 385], "analys": [37, 38, 39, 40, 168, 169, 170, 171, 172, 174, 177, 178, 228, 297, 305, 354, 355, 359], "legend": [37, 38, 39, 40, 354, 355, 359, 377, 378, 379, 380, 381, 382, 384], "plottyp": [37, 38, 39, 40], "show": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 391, 392, 393, 394], "titl": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 291, 377, 378, 379, 380, 381, 382, 383, 384, 385, 393], "out_path": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "exportpng": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "exportpdf": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "autoylim": [37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "comparison": [37, 38, 39, 43, 44, 48, 49, 51, 52, 53, 54, 55, 213, 308, 354, 355, 356, 357, 358, 359, 360, 363, 366, 367], "visual": [37, 38, 39, 40, 41, 42, 43, 45, 51, 54, 55, 56, 224, 354, 355, 357, 359, 360, 361, 362, 363, 364], "compar": [37, 38, 39, 40, 51, 54, 201, 308, 354, 355, 359], "multipl": [37, 38, 39, 40, 41, 45, 104, 204, 354, 355, 359, 421, 473, 511], "directori": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 121, 162, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 287, 333, 334, 335, 411, 414, 466, 469, 473, 475, 476, 477, 478, 479, 480, 484, 485, 487, 488, 491, 492, 493, 494, 495, 496, 497, 498, 499, 503, 504, 505, 506, 507, 508], "repres": [37, 38, 39, 40, 55, 87, 116, 117, 189, 190, 191, 192, 193, 194, 198, 201, 203, 204, 205, 246, 247, 248, 249, 305, 306, 307, 334, 338, 344, 346, 350, 361, 362, 363, 364, 372, 373, 396], "each": [37, 38, 39, 40, 45, 75, 78, 80, 81, 82, 99, 102, 104, 106, 107, 116, 117, 140, 155, 160, 162, 203, 223, 227, 234, 236, 238, 253, 286, 343, 354, 355, 359, 373, 401, 415, 431, 468], "consid": [37, 38, 39, 40, 41, 42, 48, 49, 51, 52, 53, 54, 182, 238, 307, 432], "matplotlib": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 291, 354, 355, 361, 362, 363, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 391, 392, 393, 394], "panel": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 86, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 385], "png": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 385], "pdf": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 385], "y": [37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 117, 189, 197, 201, 203, 368, 377, 378, 379, 380, 381, 382, 384, 385, 408, 467, 471], "axi": [37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 108, 117, 122, 145, 151, 170, 172, 174, 178, 182, 189, 191, 192, 193, 195, 197, 201, 203, 209, 211, 221, 226, 228, 229, 230, 234, 300, 301, 302, 304, 307, 368, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 394, 408, 467, 471], "limit": [37, 38, 39, 40, 41, 42, 44, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 201, 221, 368, 385], "automat": [37, 38, 39, 40, 41, 42, 44, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 113, 114, 184, 327, 368, 373, 411, 459], "union": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 63, 82, 99, 146, 150, 160, 204, 209, 234, 238, 264, 335], "figur": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 107, 291, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 391, 392], "fig": [37, 38, 39, 40, 41, 42, 43, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56], "analysis1": [37, 38, 39, 40], "analysis2": [37, 38, 39, 40], "pre": [37, 38, 39, 40], "post": [37, 38, 39, 40, 122], "particularli": [37, 41, 56, 146, 182, 295, 305], "across": [37, 38, 39, 41, 48, 49, 55, 228, 286, 287, 288, 354, 355, 359, 422], "condit": [37, 78, 263, 292, 313, 316, 359], "provid": [37, 40, 44, 46, 47, 64, 65, 66, 75, 117, 119, 120, 121, 151, 152, 153, 154, 172, 178, 190, 198, 205, 253, 287, 291, 303, 305, 306, 308, 356, 358, 385, 402, 409, 455], "insight": [37, 40, 358], "variabl": [37, 312, 514], "context": [38, 39, 40, 75, 78, 79, 81, 82, 170, 172, 178, 233, 249, 291, 305, 307, 312, 317, 318, 319, 320, 321, 323, 327, 329, 331, 332, 354, 355, 357, 376, 377, 378, 379, 380, 381, 382, 386, 428, 437, 439, 444, 455, 457, 459, 460], "bodypart": [38, 39, 46, 47, 48, 49, 50, 52, 53, 201, 354, 355, 366, 367, 370, 371], "normativedataset": [38, 39, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 58, 308, 361, 362, 364, 372, 373, 389], "part": [38, 39, 46, 47, 48, 49, 50, 52, 53, 85, 86, 151, 201, 204, 354, 355, 366, 367, 370, 371, 391, 392, 393, 394], "analyz": [38, 39, 41, 48, 49, 52, 53, 54, 56, 67, 70, 125, 168, 183, 184, 186, 297, 302, 304, 392, 393, 394], "lowerlimb": [38, 39, 46, 47, 48, 49, 50, 52, 53, 85, 86, 354, 355, 366, 367, 370, 371], "trunk": [38, 39, 46, 47, 48, 49, 50, 52, 53, 85, 86, 151], "upperlimb": [38, 39, 46, 47, 48, 49, 50, 52, 53, 85, 86], "previous": [38, 39, 48, 49, 50, 51, 52, 53, 54, 55], "select": [40, 54, 187, 305, 307, 357, 358, 359, 360, 476], "construct": [40, 108, 109, 110, 189, 197, 198, 205, 209, 226, 234, 259, 316, 326, 327, 330, 372, 414, 425, 426, 427], "same": [40, 228, 229, 230, 287, 288, 393, 510], "session": [40, 88, 252, 258, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 476], "correspond": [40, 75, 78, 82, 94, 104, 121, 151, 154, 253], "cycl": [41, 42, 48, 49, 50, 51, 291, 292, 305, 306, 307, 311, 312, 313, 316, 318, 325, 326, 327, 328, 334, 338, 358, 364], "highlight": [41, 357], "repetit": 41, "variou": [41, 46, 47, 63, 64, 81, 115, 151, 155, 169, 170, 227, 303, 305, 306, 312, 354, 355, 392, 393, 394], "format": [41, 45, 56, 165, 334, 335, 385, 464, 466, 496, 500, 514], "mydata": [41, 42, 45, 46, 47, 50, 56], "movement": [41, 55, 213, 216, 233, 291, 297, 300, 301, 302, 304, 309], "assum": [41, 42], "definit": [41, 42, 151, 155, 183, 184, 201, 224, 227, 235, 299], "search": [41, 42, 50, 60, 94, 455, 479, 481, 484], "averag": [42, 50, 51, 52, 53, 54, 305, 378, 380, 381, 382], "standard": [42, 50, 51, 52, 53, 54, 68, 144, 228, 254, 372, 373, 393], "statist": [42, 68, 79, 312, 313, 316, 329, 331, 332], "given": [42, 56, 63, 65, 68, 69, 70, 79, 97, 117, 144, 146, 155, 186, 238, 317, 318, 320, 370, 371, 422, 434, 455, 486, 509], "offer": [42, 51, 56], "which": [42, 55, 82, 92, 108, 110, 117, 145, 146, 151, 183, 189, 198, 201, 203, 204, 230, 233, 236, 309, 359, 372, 373, 391, 427, 463], "tailor": [42, 169, 171, 177], "need": [42, 204, 305, 354, 355], "plantarflexor": [43, 291], "kneeextensor": [43, 291], "pfke": [43, 291], "classif": [43, 289, 290, 291, 338], "dataset": [43, 51, 54, 55, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 373], "emgtyp": [44, 356], "saggit": 44, "identif": [44, 356], "treatment": [44, 295, 356], "problem": [44, 356], "cerebr": [44, 74, 219, 291, 356], "palsi": [44, 74, 219, 291, 356], "gage": [44, 216, 356], "gener": [44, 45, 46, 47, 58, 78, 80, 102, 122, 146, 176, 218, 226, 227, 248, 250, 255, 271, 284, 286, 287, 288, 291, 323, 325, 354, 355, 356, 357, 358, 359, 360, 385, 428, 459], "combin": [44, 104, 286, 287, 288, 356, 364], "electromyograph": [44, 356], "comprehens": [44, 51, 55, 356], "view": [44, 356], "sagitt": [44, 214, 291, 356], "processedemgfil": 45, "tempor": [45, 46, 47, 56, 284, 286, 287, 288, 323, 325, 327, 328, 332, 360, 369, 370, 371, 372, 376, 383, 384], "trace": [45, 46, 47, 362, 374, 376, 377, 378, 379, 380, 381, 382, 384], "rectif": [45, 81, 360], "modif": [45, 56], "ignor": [45, 50, 360, 392, 448, 449, 479, 484], "background": [45, 374, 376], "than": [45, 391, 393, 396], "predefin": [45, 50, 299], "depend": [45, 81, 145, 170, 172, 178, 258, 368], "number": [45, 116, 144, 145, 158, 170, 172, 174, 178, 204, 312, 318, 377, 378, 382, 392, 393, 394, 433, 435, 439, 459], "separ": [45, 393], "modelledfilenam": [46, 47], "over": [46, 47, 145, 360, 361, 362, 364, 367, 370, 371], "read": [46, 47, 112, 113, 114, 115, 118, 462, 500, 501], "custom": [46, 47, 65, 66, 151, 169, 171, 177, 188, 209, 226, 227, 354, 355, 357, 358, 359, 360, 385, 393], "wai": [46, 47], "ensur": [46, 47, 106], "one": [46, 47, 104, 116, 151, 189, 204, 276, 511], "valid": [46, 47, 106, 407, 410, 430, 433, 440, 489, 490], "invalid": [46, 47, 163, 407, 440], "input": [46, 47, 143, 144, 145, 146, 368, 397, 399, 401, 402], "ground": [50, 51, 101, 225, 228, 229, 234, 238, 361, 362, 363, 432], "reaction": [50, 51, 101, 170, 172, 178, 225, 228, 229, 249, 361, 362, 363, 432, 467], "plot_descriptivekinemat": 50, "normativeinst": 50, "bodymass": [51, 164, 180, 187, 229, 361, 362], "integr": [51, 101, 151, 179, 180, 229, 356, 361, 362], "grf": [51, 361, 362], "overview": [51, 55], "distribut": 51, "throughout": [51, 358], "against": [51, 54, 308, 352], "mass": [51, 65, 101, 155, 164, 175, 176, 180, 187, 201, 204, 223, 229, 361, 362], "75": 51, "normalizedsuffix": 54, "analyticaldata": 54, "ani": [54, 67, 69, 122, 124, 151, 155, 168, 170, 172, 178, 186, 199, 201, 202, 204, 230, 251, 252, 253, 254, 297, 313, 316, 333, 364, 391, 419], "horizont": [54, 56, 377, 378, 379, 380, 381, 382, 384, 385], "line": [54, 140, 254, 374, 377, 378, 379, 380, 381, 382, 384, 385], "histogram": [55, 56, 369, 383], "map": [55, 58, 121, 122, 133, 134, 135, 136, 137, 138, 150, 155, 162, 174, 180, 225, 229, 253, 365, 409], "individu": [55, 309], "aspect": 55, "spatio": [56, 284, 286, 287, 288, 325, 327, 328, 332, 369, 372, 383], "them": [56, 225, 233, 236, 391, 470, 511], "adjust": [56, 180, 182, 228, 368, 391], "concis": 56, "intuit": 56, "modelledtri": 58, "app": 60, "third": [60, 415], "parti": 60, "modul": [60, 391, 392, 393, 394], "page": [60, 517], "class": [62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 247, 248, 249, 250, 251, 252, 253, 259, 260, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 323, 324, 325, 326, 327, 328, 333, 334, 335, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 385], "implement": [62, 63, 64, 65, 66, 67, 68, 73, 74, 76, 98, 99, 152, 153, 154, 155, 156, 213, 216, 218, 219, 285, 291, 293, 295, 303, 306, 307, 316, 357, 358, 359, 360, 368], "correct": [62, 63, 69, 105, 139, 181, 182, 237], "procedur": [62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 97, 98, 99, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 151, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 222, 224, 226, 227, 229, 230, 234, 235, 237, 238, 239, 240, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308], "serv": [62, 72, 76, 98, 285, 306], "foundat": [62, 72, 76, 98, 285, 306], "develop": 62, "techniqu": [62, 64, 216], "extend": [62, 64, 72, 75, 76, 98, 152, 153, 154, 155, 156, 168, 169, 171, 173, 175, 177, 198, 205, 246, 249], "handl": [62, 78, 82, 97, 151, 155, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 180, 183, 235, 246, 248, 249, 250, 251, 252, 253, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 355, 393, 425], "__init__": [62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 97, 98, 99, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 247, 248, 249, 250, 251, 252, 253, 259, 260, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 323, 324, 325, 326, 327, 328, 333, 334, 335, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 385], "anomalycorrectionprocedur": [63, 69], "anomalyindex": 63, "subclass": [63, 69, 70, 79, 303, 368], "identifi": [63, 69, 70, 97, 99, 106, 248, 300, 305, 306, 307, 429], "m_marker": [63, 68], "m_anomalyindex": 63, "_plot": [63, 68], "flag": [63, 68, 133, 134, 135, 136, 137, 138, 150, 151, 155, 213, 219, 230, 234, 236, 238, 276, 284, 300, 301, 302, 304, 323, 327, 358, 359, 360, 368, 411], "should": [63, 64, 70, 72, 76, 98, 236, 238, 285, 368], "_distance_threshold": 63, "distanc": [63, 91, 209, 221], "cluster": [63, 375, 385], "run": [63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 77, 78, 79, 80, 81, 97, 118, 119, 120, 121, 122, 124, 126, 163, 164, 165, 166, 167, 170, 171, 172, 174, 175, 176, 178, 186, 211, 222, 225, 229, 232, 233, 234, 236, 238, 239, 260, 289, 291, 300, 305, 314], "after": [63, 81, 121, 122, 131, 132, 396], "abstract": [64, 98, 294, 368], "structur": [64, 285, 315, 334, 365, 366, 368, 369, 370, 371], "getanomali": 64, "error": [64, 68, 230, 234, 238, 497, 499, 509], "anomalydetectionprocedur": [65, 66, 67, 68, 70], "implaus": 65, "inherit": [65, 66, 67, 161, 202, 251, 252, 253, 327], "extrem": [65, 212], "disproportion": 65, "limb": [65, 85, 86, 106, 151, 154, 155, 182, 187, 204, 222, 289, 291, 345], "futur": 65, "extens": [65, 176, 257, 259, 291, 333, 334, 335, 373, 464, 484, 491, 492, 496, 498], "being": [65, 66, 67, 68, 155, 158, 168, 171], "note": [65, 66, 140, 196, 204, 220, 313, 327, 357, 359, 360, 391, 392, 393], "version": [65, 151, 152, 153, 154, 161, 168, 169, 171, 173, 175, 177, 391, 392, 393, 394], "mai": [65, 66, 182, 508], "design": [66, 78, 82, 97, 125, 182, 295, 355, 356, 364], "satur": 66, "like": [66, 155, 204, 211, 284, 308, 367, 369, 371], "framerang": [66, 70], "integ": [66, 459, 461], "start": [66, 70, 121, 140, 170, 172, 174, 178, 211, 214, 217, 221, 323, 327, 391, 418, 439, 440], "end": [66, 70, 101, 121, 140, 170, 172, 174, 178, 214, 217, 221, 232, 323, 327, 375, 391, 418, 439, 440], "full": [66, 85, 90, 219, 477, 480, 482, 483], "avail": [66, 163, 170], "thei": [66, 393, 439, 504], "consecut": [67, 106, 361], "ident": [67, 394], "roll": 68, "whether": [68, 97, 150, 180, 234, 238, 368, 448, 449], "_apriorierror": 68, "priori": 68, "_window": 68, "size": 68, "window": 68, "_treshold": 68, "_method": 68, "either": [68, 81, 146, 158, 189, 224, 334, 394], "median": [68, 89, 291, 307, 312, 329, 331, 332], "apriorierror": 68, "treshold": 68, "anomalyfilt": [69, 70], "interfac": [69, 70, 119, 120, 121, 122, 155, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 246, 247, 248, 249, 257, 260, 303, 306, 466], "biomechan": [69, 70, 124, 125, 126, 182, 183, 184, 185, 186, 198, 199, 201, 204, 219, 221, 223, 224, 227, 228, 229, 230, 235, 237, 239, 289, 292, 293, 295, 296, 312, 354, 355], "typic": [69, 81, 82, 198, 230], "similar": [69, 355, 362, 510, 511], "element": [70, 146, 160, 190, 193, 194, 199, 204, 364, 401, 510, 511], "co": [72, 73, 74, 79], "coactivationprocedur": [73, 74, 79], "falcon": 73, "winter": 73, "quantit": 73, "assess": [73, 185, 186, 239], "contract": [73, 74], "k": 73, "da": 73, "cocontract": [73, 74], "electromyogr": [73, 74], "clin": [73, 74], "neurophysiol": [73, 74], "1985": 73, "25": [73, 106], "135": 73, "149": 73, "second": [73, 74, 79, 116, 130, 140, 141, 142, 170, 172, 178, 197, 312, 357, 415, 420, 461, 463], "unithan": 74, "1996": 74, "unnithan": 74, "studi": [74, 187], "phasic": 74, "children": [74, 219], "vb": 74, "dowl": 74, "jj": 74, "frost": 74, "volp": 74, "ayub": 74, "b": [74, 218], "bar": 74, "Or": 74, "o": 74, "36": 74, "487": 74, "494": 74, "discreteemgprocedur": [75, 78], "phase": [75, 319, 361], "attribut": [75, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 150, 151, 152, 153, 154, 155, 156, 160, 184, 187, 203, 214, 221, 224, 237, 293, 295, 296, 315, 319, 324, 327, 368, 372, 373, 377, 378, 379, 380, 381, 382, 383, 385], "emglabel": [75, 78], "emgmuscl": [75, 78], "emgcontext": [75, 78], "extract": [76, 292, 293, 295, 296, 297, 468, 469, 470, 480, 483, 511], "discret": [76, 78, 292, 293, 294, 295, 338], "metric": 76, "emgfilt": [77, 78, 79, 80, 81], "butterworth": [77, 395, 398, 399, 400], "remov": [77, 201, 204, 254, 402, 422, 423, 424, 428, 450], "nois": [77, 392], "baselin": 77, "drift": [77, 391], "sethighpassfrequ": 77, "up": [77, 122, 170, 172, 174, 176, 178, 227, 354, 355, 367, 368, 422], "lower": [77, 85, 86, 151, 154, 155, 182, 187, 212, 222, 345, 374, 390, 399], "upper": [77, 85, 86, 151, 374, 399], "subjinfo": [78, 292], "condexpinfo": [78, 292], "panda": [78, 114, 293, 295, 296, 335], "getoutput": [78, 292], "setcondexpinf": [78, 292], "inclus": 78, "item": 78, "setsubjinfo": [78, 292], "between": [79, 116, 140, 141, 142, 151, 155, 200, 204, 205, 220, 236, 291, 354], "coactiv": [79, 312, 357], "section": [79, 81, 82, 84, 204, 250, 251, 252, 253, 259, 317, 343, 344, 345, 346, 347, 348, 349, 352, 406], "setcoactivationmethod": 79, "concreteca": 79, "setemg1": 79, "setemg2": 79, "setcutofffrequ": 80, "fc": [80, 395, 397, 398, 400], "processanalysi": 81, "new": [81, 117, 151, 189, 204, 393, 409, 416, 425, 453, 454, 455, 457, 459, 476, 477, 502], "_norm": 81, "emgstat": [81, 312], "processc3d": 81, "configur": [81, 82, 151, 155, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 250, 357, 358, 359, 360, 385], "setc3d": 81, "datpath": 81, "setmaxmethod": 81, "enumemgnorm": 81, "emgamplitudenorm": 81, "enum": [81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 150, 151, 155, 199, 201, 202, 204, 209, 230, 238, 244, 258, 354, 355, 366, 367, 370, 371], "enumer": 81, "denomin": 81, "setthresholdfromotheranalysi": 81, "emgset": 82, "getchannel": [82, 246], "eventcontext": [82, 307, 457], "hannel": 82, "getchannelsect": 82, "relat": [82, 180, 205, 230, 234, 238, 393, 437, 457], "getmuscl": [82, 162], "getnormalact": 82, "purpos": [82, 364], "getprocessingsect": 82, "usual": [82, 199], "getsid": 82, "lowerlimbtrunk": 85, "fullbodi": 85, "angl": [87, 108, 116, 117, 121, 122, 133, 134, 135, 136, 137, 138, 139, 141, 142, 151, 155, 168, 182, 186, 189, 191, 192, 193, 195, 199, 200, 201, 211, 212, 214, 215, 233, 236, 262, 312, 413, 415, 422, 436, 458], "segment": [87, 92, 93, 95, 122, 140, 151, 155, 182, 183, 187, 198, 199, 200, 201, 202, 203, 205, 222, 223, 225, 226, 227, 229, 233, 234, 236, 238, 263], "power": [87, 155, 232, 268, 367, 371, 422, 436], "eclips": [88, 244, 250, 251, 252, 253, 254, 255, 256, 257, 258], "node": [88, 183, 189, 200, 201, 203, 226, 257], "patient": [88, 219, 251, 258], "harrington": [90, 209, 219], "predictor": [90, 209, 219], "nativ": [90, 209], "pelviswidth": 90, "onli": [90, 151, 157, 159, 234, 255, 393, 476], "pelvi": [90, 99, 155, 209, 213, 219], "width": [90, 206, 211, 384], "leglength": 90, "leg": 90, "center": [91, 101, 155, 180, 187, 201, 204, 206, 209, 211, 212, 213, 215, 216, 217, 218, 219, 221, 223, 238, 249, 361, 362], "later": [91, 151, 206, 211, 212, 220, 327, 361], "kad": [91, 211], "medial": [91, 206, 211, 220], "express": [92, 203, 205, 213, 219, 230, 233], "coordin": [92, 121, 122, 151, 154, 155, 158, 162, 189, 190, 197, 198, 199, 201, 203, 205, 209, 212, 213, 215, 217, 219, 224, 226, 227, 228, 230, 234, 235, 236, 237, 238, 249, 468, 470, 471], "system": [92, 121, 122, 151, 154, 155, 158, 189, 190, 197, 198, 199, 201, 203, 205, 209, 213, 219, 224, 226, 227, 228, 230, 234, 235, 236, 237, 238], "jcs_dual": 92, "dual": 92, "central": 93, "midlin": 93, "memberstr": 94, "text": [94, 160, 479, 515], "represent": [94, 108, 116, 189, 191, 192, 193, 194, 195, 196], "member": [94, 324], "found": [94, 126, 170, 201, 256, 394, 419, 438, 455, 484, 485, 488, 493, 495], "python": [94, 140, 158, 199, 201, 307], "pose": [95, 151, 155, 168, 198, 203, 204, 238], "determinist": [95, 155], "sodervisk": [95, 155], "eventprocedur": [97, 99], "contact": [97, 106, 107, 225, 229], "captur": [97, 99, 205, 422], "getstat": 97, "wa": [97, 391], "success": [97, 509], "otherwis": [97, 189, 201, 204, 253, 417, 418, 420, 443, 444, 445, 446, 447, 448, 449, 489, 490, 509, 510, 513, 515], "zeni": 99, "algorithm": [99, 196, 391], "heel": [99, 107], "toe": [99, 107], "rel": [99, 111, 116, 203, 205, 233, 236], "respect": [99, 104, 116, 140, 151, 307, 327, 459], "fail": 99, "setfootoffoffset": 99, "setfootstrikeoffset": 99, "forcepl": [101, 102, 103, 104, 105, 106, 107, 228, 244], "reactionforc": 101, "ndarrai": [101, 108, 110, 116, 117, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 189, 190, 191, 192, 193, 194, 195, 196, 197, 201, 203, 204, 205, 209, 212, 213, 215, 216, 218, 219, 220, 222, 247, 249, 263, 275, 323, 391, 392, 393, 394, 395, 396, 397, 399, 401, 402, 415, 452, 456, 458, 468, 469, 470], "v0": 101, "p0": 101, "analogfrequ": 101, "1000": 101, "posit": [101, 104, 158, 189, 190, 204, 206, 209, 211, 213, 216, 218, 219, 221, 361, 362, 374, 408, 452, 512], "veloc": [101, 117, 180, 204, 361, 362], "acceler": [101, 117, 180, 204, 361, 362], "vertic": [101, 107, 361, 408], "np": [101, 108, 110, 116, 117, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 189, 190, 191, 192, 193, 194, 195, 196, 197, 201, 203, 204, 205, 209, 212, 213, 215, 216, 217, 218, 219, 220, 222, 230, 247, 249, 263, 275, 323, 391, 392, 393, 394, 395, 396, 397, 399, 401, 402, 415, 425, 452, 456, 468, 469, 470], "arrai": [101, 108, 110, 116, 117, 128, 131, 132, 144, 145, 146, 189, 191, 192, 193, 194, 201, 203, 204, 205, 217, 230, 275, 312, 392, 394, 395, 396, 397, 399, 401, 402, 415, 452, 458], "shape": [101, 116, 145, 191, 192, 197], "kilogram": 101, "area": [101, 106], "interest": 101, "final": [101, 121, 122, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 354, 355, 356, 357, 358, 359, 360, 365, 366, 368, 369, 370, 371, 392, 394], "3d": [101, 146, 190, 215], "hz": [101, 115, 117, 395, 398, 400], "mappedforcepl": [102, 104, 106, 180, 228], "letter": [102, 104, 106, 107, 225, 229], "lrx": [102, 104, 106, 107], "corner": [103, 249], "btkwrench": [104, 204], "aggreg": 104, "wrench": [104, 204, 432], "present": [104, 126, 204, 238, 446], "particular": 104, "its": [104, 122, 146, 184, 189, 190, 196, 201, 259, 317, 318, 320, 438, 455, 462, 464, 496, 497, 498, 499, 501], "lead": [106, 160], "trail": 106, "feet": [106, 155, 180], "simultan": 106, "produc": [106, 356], "exce": [106, 182], "string": [106, 151, 158, 162, 189, 225, 229, 253, 364, 425, 426, 456, 457, 458, 459, 461, 489, 490, 500, 509, 514, 515], "n": [106, 107, 201, 293, 309], "kei": [106, 126, 151, 158, 160, 162, 250, 273, 305, 372, 373, 385], "enablerefin": 107, "forcethreshold": 107, "50": [107, 291, 391], "left_markerlabelto": 107, "ltoe": 107, "left_markerlabelheel": 107, "lhee": [107, 302], "right_markerlabelto": 107, "rtoe": 107, "right_markerlabelheel": 107, "rhee": 107, "refin": 107, "match": [107, 160, 201, 287, 352, 434, 455, 467], "manual": [107, 207, 209, 228, 263, 459], "imu": [108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 244], "imumotionprocedur": [108, 110, 111], "globalangl": 108, "equival": [108, 117, 259, 276, 277], "imuinst": [108, 110, 111, 121, 122], "quaternion": [110, 117, 121, 122, 189, 191, 193, 194, 196], "realign": 111, "whose": [111, 146], "imureaderprocedur": [112, 113, 114, 118], "fullfilenam": [112, 113], "vicondeviceid": 112, "blue": 112, "trident": 112, "id": [112, 246, 248, 249, 273, 459], "freq": [113, 114, 115, 117, 121, 122, 395], "auto": [113, 114, 368], "timecolumn": [113, 114], "time_": [113, 114], "csv": 113, "column": [113, 114, 145, 313, 334, 377, 378, 379, 380, 381, 382, 384], "sourc": [115, 474, 475], "downsampl": [115, 117, 204], "relativeimuangleprocedur": 116, "euler": [116, 121, 122, 133, 134, 135, 136, 137, 138, 139, 211, 214, 233, 236], "eulersequ": [116, 233], "xyz": [116, 133, 180, 197, 226, 228, 229, 230, 233, 408], "orient": [116, 117, 121, 122, 180, 228, 229, 230, 233, 249, 300, 408, 468], "sequenc": [116, 133, 134, 135, 136, 137, 138, 151, 197, 200, 201, 211, 214, 226, 233], "imuinstance1": 116, "imuinstance2": 116, "convert": [116, 165, 191, 192, 193, 194, 195, 196, 205, 230, 377, 378, 382, 412, 413, 451, 452, 515], "nframe": 116, "accel": 117, "angularveloc": 117, "mag": 117, "inerti": 117, "unit": [117, 246, 247, 249, 451, 457], "sensor": [117, 121, 122], "sampl": [117, 121, 122, 128, 129, 130, 131, 132, 204, 248, 392, 395, 396, 397, 399, 402], "numpi": [117, 146, 203, 205, 395, 425, 452, 458], "angular": [117, 204], "magnetomet": 117, "400": 117, "target": [117, 139, 144, 373, 396], "getacceler": 117, "x": [117, 145, 189, 197, 201, 203, 377, 378, 379, 380, 381, 382, 383, 384, 391, 392, 393, 394, 408, 467, 471], "z": [117, 189, 197, 201, 203, 219, 408], "ax": [117, 189, 197, 221, 226, 327, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 391, 392, 393, 394], "getangleaxi": [117, 189], "getangularveloc": [117, 204], "getmagnetomet": 117, "getmot": 117, "getquaternion": [117, 189], "reinit": 117, "restor": 117, "newaccelvalu": 117, "newomegavalu": 117, "newmagvalu": 117, "imufilt": 118, "opensens": [119, 120, 121, 122], "opensensefilt": [119, 120], "imuinversekinematicxmlprocedur": 119, "encapsul": [119, 120], "opensenseimukinematicfitterprocedur": [119, 121], "imuplacerxmlprocedur": 120, "placer": [120, 122], "opensenseimuplacerinterfaceprocedur": [120, 122], "getcalibratedosimnam": 120, "opensim": [120, 121, 122, 151, 154, 155, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 244, 466, 468, 469, 470, 471], "calibratedosimnam": 121, "resultsdirectori": [121, 168, 169, 170, 171, 172, 173, 174, 177, 178], "prepar": [121, 122, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 364], "toolkit": [121, 412, 413], "osim": [121, 122, 151, 155], "renam": [121, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 409, 455, 502], "setup": [121, 122, 168, 169, 170, 171, 172, 174, 176, 177, 178], "prepareimu": [121, 122], "osimbodi": [121, 122], "prepareimumapp": [121, 122], "imumapperdict": [121, 122], "mapper": [121, 122], "prepareorientationfil": [121, 122], "motionfilenamenoext": 121, "sto": [121, 122, 163, 164, 167], "reorder": [121, 122], "preparesensortoopensimrot": [121, 122], "eulerangl": [121, 122], "align": [121, 122, 171, 182, 210, 228], "radian": [121, 122, 142], "preparexml": [121, 122, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178], "xml": [121, 122, 160, 162, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 501], "setsetupfil": [121, 122, 170, 172, 174, 176, 178], "imuinversekinematictoolfil": 121, "settimerang": [121, 170, 172, 174, 178], "begintim": 121, "lasttim": 121, "begin": [121, 170, 172, 174, 178, 375], "genericosimfil": [122, 176], "store": [122, 151, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 177, 178, 230, 232, 233, 236, 246, 312, 313, 315], "step": 122, "preparebaseimu": 122, "segmentnam": [122, 226], "staticfilenamenoext": 122, "imuplacertoolfil": 122, "tool": [122, 170, 171, 172, 174, 176, 177, 178, 244, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471], "inspector": [124, 125, 126, 244], "inspectorprocedur": [124, 126], "inspect": [124, 125, 126], "content": [125, 160, 250, 254, 342, 343, 344, 345, 346, 494, 496, 497, 498, 499, 500, 501, 504, 508], "without": [125, 155, 176, 259, 333, 334, 335, 373, 491, 492], "alter": [125, 206, 209, 210, 211], "math": [128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 244], "deriv": [128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 160, 285, 306, 361], "samplefrequ": [128, 129, 130, 131, 132, 204], "differenti": [128, 155], "finit": 128, "motionlist": [129, 130], "rotat": [129, 130, 133, 134, 135, 136, 137, 138, 151, 155, 189, 190, 192, 194, 195, 196, 197, 203, 205, 212, 215, 307, 408, 470], "matrix": [129, 130, 133, 134, 135, 136, 137, 138, 146, 189, 190, 192, 194, 195, 196, 197, 203, 204, 205, 249, 470], "matric": [129, 130], "spline": [131, 132, 204], "fit": [132, 144, 165, 204, 485], "similarord": [133, 134, 135, 136, 137, 138], "decompos": [133, 134, 135, 136, 137, 138, 201], "yzx": 134, "yxz": [135, 180, 214], "zyx": 136, "zxy": 137, "xzy": 138, "inputangl": 139, "dest": 139, "wrap": 139, "around": 139, "p1": 140, "p2": 140, "p3": 140, "p4": 140, "pa_pb": 140, "shortest": 140, "rout": 140, "p1_p2": 140, "p3_p4": 140, "mua": 140, "mub": 140, "pa": 140, "pb": 140, "intersect": 140, "convers": [140, 164, 451], "paul": 140, "bourk": 140, "http": [140, 391, 392, 393, 394], "astronomi": 140, "swin": 140, "edu": 140, "au": 140, "pbourk": 140, "lineline3d": 140, "v1": [141, 142, 143, 226], "v2": [141, 226], "vn": 141, "sign": [141, 393, 468], "vector": [141, 142, 143, 146, 189, 190, 197, 220, 222, 228, 230], "common": [141, 303, 306, 368], "orthogon": 141, "u1": 142, "opposit": 143, "neg": [143, 146], "nrow": 144, "have": [144, 202], "row": [144, 145, 334], "through": [144, 204, 422], "linear": [144, 204], "interpol": 144, "seri": 144, "regardless": 144, "origin": [144, 145, 201, 203, 221, 226, 249, 263, 409], "linearli": 144, "desir": [144, 190, 203, 327, 335, 391], "1d": [144, 394], "2d": [144, 392, 394], "numer": [145, 146, 247], "root": 145, "squar": [145, 146, 155], "along": [145, 408, 467, 471], "magnitud": 145, "arithmet": 145, "often": 145, "quantifi": 145, "variat": 145, "entir": [145, 223], "wise": 145, "skew": 146, "symmetr": 146, "antisymmetr": 146, "transpos": 146, "equal": [146, 394], "commonli": 146, "mathemat": 146, "cross": 146, "product": [146, 204], "rigid": [146, 204, 205], "applic": [146, 170, 293], "physic": [146, 249], "engin": 146, "3x3": [146, 189, 190, 192, 195, 196, 204, 205], "convent": [150, 151, 204], "classmethod": [150, 187, 297], "detectcalibrationmethod": [150, 151, 157, 159], "jointcalibrationmethod": 150, "getstatictrackingmark": 150, "track": [150, 151, 154, 155, 201, 204, 205], "get_markerlabelforpigstat": 150, "dcm": [150, 151, 157, 159], "setstaexpertmod": 150, "boolflag": [150, 234, 238], "sta": 150, "expert": 150, "setstatictrackingmark": 150, "aka": 151, "plugin": [151, 230, 234, 238], "clone": [151, 201], "aquistat": [151, 154, 155, 201], "dictref": [151, 154, 155, 202], "dictanatom": [151, 154, 155, 202], "carri": 151, "technic": [151, 154, 155, 201, 202, 203, 204, 205, 226, 234, 236, 238], "calibrationprocedur": 151, "outlin": 151, "involv": 151, "computemot": [151, 155], "aqui": [151, 155, 202], "dictanat": [151, 155], "motionmethod": [151, 155, 202, 238], "embed": [151, 155, 240], "pigstat": 151, "forcefoot6dof": 151, "6dof": 151, "optim": [151, 155, 177, 178], "computeoptimizedsegmentmot": [151, 155], "known": 151, "detectedcalibrationmethod": 151, "getabdaddanklejointoffset": 151, "abduct": 151, "adduct": 151, "frontal": 151, "plane": [151, 214], "flexion": [151, 155, 182, 211, 295, 307], "getfootoffset": 151, "plantar": [151, 155], "getshankoffset": 151, "shank": [151, 155, 207], "getstaticmark": 151, "getthighoffset": 151, "thigh": [151, 155, 182, 207], "gettibialtorsionoffset": 151, "tibial": [151, 207], "torsion": [151, 207], "gettrackingmark": 151, "opensimgeometri": [151, 155], "opensimiktask": [151, 154, 155], "opensimtrackingmark": 151, "exclud": 151, "those": 151, "setvers": 151, "amend": 151, "viconexport": [151, 155, 260], "vskname": [151, 155, 260, 262, 263, 264, 265, 266, 267, 268, 274, 275], "staticprocessingflag": [151, 155], "viconnexu": [151, 248, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277], "softwar": [151, 155], "vsk": [151, 155, 259, 260, 262, 263, 265, 266, 267, 268, 270, 271, 274, 275, 276, 277], "protocol": [152, 153, 154, 155, 156], "decoratedmodel": [152, 153, 154], "ha": [152, 153, 154, 422], "been": [152, 153, 154], "decor": [152, 153, 154, 206, 207, 208, 209, 210, 211], "m_staticiktarget": [153, 154], "getstaticiktarget": [153, 154], "setstaticiktarget": [153, 154], "targetnam": [153, 154], "lowerlimb_tracking_mark": [154, 155], "constant": [154, 155], "task": [154, 155], "incorpor": [155, 156], "featur": [155, 156, 393], "analysis_kinematic_labels_dict": 155, "analysis_kinetic_labels_dict": 155, "lowerlimb_seg": 155, "lowerlimb_joint": 155, "perform": [155, 234], "least": 155, "thorax": [155, 304], "arm": 155, "direct": [155, 170, 172, 174, 178, 180, 228, 229, 230, 233, 300, 301, 302, 304], "gethindfootoffset": 155, "hindfoot": 155, "anyth": 155, "relationship": [155, 291], "bone": [155, 263], "done": [155, 393], "directli": [155, 408, 457, 459], "cgm1onli": [157, 159], "hjc": [158, 209, 213, 219], "hara": [158, 209, 218], "three": [158, 199, 415], "pelvic": [158, 301, 304], "focu": 159, "kjc": [159, 211], "ajc": [159, 206, 211], "opensiminterfac": [160, 161, 162], "templatefullfilenam": 160, "outfullfilenam": 160, "interact": [160, 161, 162, 238], "templat": [160, 170, 172, 178], "getsoup": 160, "beautifulsoup": [160, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 501], "pars": [160, 350, 351, 500, 501, 509], "set_inlist_fromattr": 160, "listnam": 160, "attrkei": 160, "attrvalu": 160, "set_mani": 160, "set_many_inlist": 160, "set_on": 160, "chang": [160, 251, 252, 253, 391, 416], "made": [160, 251, 252, 253], "write": [160, 464], "m_out": 160, "modelvers": [161, 168, 169, 171, 173, 175, 177], "osiminterfac": [161, 466], "osimfil": 162, "opensimxmlinterfac": 162, "getbodi": 162, "getcoordin": 162, "getmuscles_bysid": 162, "addtonam": 162, "categor": 162, "append": [162, 180, 189, 203, 223, 225, 228, 259, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 364, 456, 457, 458], "opensiminterfacefilt": [163, 164, 165, 166, 167], "analysesxmlcgmprocedur": [163, 168], "getacq": [163, 164, 165, 167], "pushstotoacq": [163, 164, 167], "muscleanalysi": 163, "push": [163, 164, 165, 167], "muscleactuatorpow": 163, "normalizedfiberlength": 163, "normfiberveloc": 163, "passivefiberforc": 163, "passivefiberforcealongtendon": 163, "pennationangl": 163, "pennationangularveloc": 163, "tendonforc": 163, "tendonlength": 163, "tendonpow": 163, "activefiberforc": 163, "activefiberforcealongtendon": 163, "fiberactivepow": 163, "fiberforc": 163, "fiberlength": 163, "fiberpassivepow": 163, "fiberveloc": 163, "valueerror": [163, 396], "inversedynamicsxmlprocedur": [164, 171], "osimconvert": [164, 165], "inversekinematicxmlprocedur": [165, 173], "pushfittedmarkersintoacquisit": 165, "pushmottoacq": 165, "scalingxmlprocedur": [166, 175], "scale": [166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 222, 230, 232, 263], "getosim": 166, "getosimnam": 166, "staticoptimisationxmlprocedur": [167, 177], "optimis": 167, "analysisreport": [168, 169, 170], "opensimanalysesinterfaceprocedur": [168, 169, 170], "scaledosimnam": [168, 169, 170, 171, 172, 173, 174, 177, 178], "special": [168, 169, 171, 173, 177, 198, 205], "driven": 168, "work": [168, 324, 356, 508], "cleanup": [168, 169, 170, 171, 172, 173, 174, 177, 178], "setpos": 168, "poselabel": 168, "qi": 168, "analysesxmlprocedur": 169, "preparetrial_frombtkacq": [170, 172, 174, 178], "dynamicfil": [170, 172, 174, 178], "progressionaxi": [170, 172, 174, 178, 228, 467], "forwardprogress": [170, 172, 174, 178, 180, 228, 229, 230, 233, 408, 467, 471], "progress": [170, 172, 174, 178, 180, 228, 300, 301, 302, 303, 304, 338, 408, 467, 471], "forward": [170, 172, 174, 178, 180, 300, 301, 302, 304, 467, 471], "preparetrial_frommotfil": 170, "kinematicmotfil": 170, "externalloaddatafil": 170, "mot": [170, 466, 467, 468], "setframerang": [170, 172, 174, 178], "analysistooltemplatefil": [170, 178], "externalloadtemplatefil": [170, 172, 178], "inversedynam": [171, 172], "opensiminversedynamicsinterfaceprocedur": [171, 172], "idtooltemplatefil": 172, "inversekinemat": [173, 174], "opensiminversekinematicsinterfaceprocedur": [173, 174], "prepareweight": 174, "weights_dict": 174, "setaccuraci": 174, "iktoolfil": 174, "opensimscalinginterfaceprocedur": [175, 176], "height": [175, 176, 375, 393], "preparestatictrial_frombtkacq": 176, "staticfilenoext": 176, "markersetfil": 176, "scaletoolfil": 176, "markerset": 176, "staticoptimis": [177, 178], "opensimstaticoptimizationinterfaceprocedur": [177, 178], "respons": [178, 385], "setresultsdirnam": 178, "dirnam": 178, "forceplateintegrationprocedur": [180, 229], "com": [180, 201, 223, 361, 362], "globalframeorient": [180, 228, 229, 230, 233, 408], "rl": 180, "move": [180, 228, 229, 230], "modelmotioncorrect": [181, 182], "naim": 182, "2019": 182, "misalign": 182, "when": [182, 313, 391, 422], "certain": [182, 422, 479, 484], "naaim": 182, "bonnefoi": 182, "mazur": 182, "armand": 182, "duma": 182, "geometr": [182, 184], "72": 182, "34": 182, "39": [182, 295], "degre": [182, 199, 202, 214], "modelqu": [183, 184, 185, 186], "score": [183, 184, 308, 309, 310, 312, 338], "residu": [183, 184, 458], "evalu": [183, 239], "setdefinit": [183, 226, 227], "nodelabel": [183, 189, 200, 201], "proxseglabel": 183, "distseglabel": 183, "popul": [184, 286, 287, 288, 307, 367, 372, 373], "qualiti": [185, 186, 239], "wand": 186, "planar": 186, "gap": [186, 418, 429, 445], "bodysegmentparamet": [187, 241], "imodel": [187, 206, 207, 208, 209, 210, 211, 260], "dempster": 187, "1995": 187, "1955": 187, "d": [187, 216], "setparamet": 187, "bspsegmentlabel": 187, "segmentlength": 187, "tabl": 187, "inertia": [187, 204], "tensor": [187, 204], "compon": [187, 201, 204, 241, 361, 402], "custom_mp": 188, "addnod": 189, "positiontyp": 189, "desc": [189, 190, 425, 426, 456, 458, 459], "local": [189, 190, 204, 249], "constructfromanglesaxi": 189, "angleaxisvalu": 189, "constructfromquaternion": 189, "quaternionvalu": 189, "copynod": 189, "nodetocopi": 189, "exist": [189, 201, 204, 253, 321, 417, 420, 425, 439, 442, 443, 444, 448, 449, 455, 491, 492, 511], "erasenod": 189, "eras": 189, "getglobalposit": 189, "getnodeindex": 189, "getnodelabel": 189, "print": 189, "getnode_byindex": 189, "collect": [189, 216, 306, 324, 432], "getnode_bylabel": 189, "getnod": 189, "getrot": 189, "gettransl": 189, "isnodeexist": 189, "setax": 189, "setrot": 189, "settransl": 189, "t": [189, 190, 204, 219, 392], "updateaxisfromrot": 189, "updatenod": 189, "localarrai": 189, "globalarrai": 189, "empti": [189, 255, 425, 426, 456, 457, 458, 459], "computeglob": 190, "rot": 190, "computeloc": 190, "getdescript": [190, 247, 249], "getglob": 190, "getlabel": [190, 247], "getloc": 190, "setdescript": 190, "anglesaxi": [191, 192], "rotmat": [195, 196], "ken": 196, "shoemak": 196, "articl": 196, "1987": 196, "siggraph": 196, "cours": [196, 360], "calculu": 196, "anim": 196, "a1": [197, 215], "a2": [197, 215], "xyiz": [197, 226], "manipul": 198, "datatyp": [199, 201, 291], "jointorsegmentlabel": [199, 201], "coeffici": [199, 201, 221], "clinic": [199, 201, 212, 293], "descriptor": [199, 201], "etc": [199, 327, 369], "see": [199, 391, 392, 393], "subtract": 199, "180": 199, "lhip": [199, 201], "proxlabel": [200, 201], "distlabel": [200, 201], "connect": [200, 204], "addanthropoinputparamet": 201, "idict": [201, 312, 385], "param": [201, 202, 203, 240, 259, 269, 272], "addchain": 201, "indexsegmentlist": 201, "chain": 201, "constitut": [201, 234], "addjoint": 201, "addseg": 201, "sideenum": [201, 204], "segmentsid": [201, 204], "calibration_mark": [201, 204], "tracking_mark": [201, 204], "cloneof": 201, "checkcalibrationproperti": 201, "calibrationparameterlabel": 201, "properti": 201, "decomposetrackingmark": 201, "technicalframelabel": 201, "displaymotioncoordinatesystem": 201, "acqui": 201, "segmentlabel": [201, 222, 227, 233], "targetpointlabel": 201, "displaymotionviconcoordinatesystem": 201, "targetpointlabelo": 201, "targetpointlabelx": 201, "targetpointlab": 201, "targetpointlabelz": 201, "displaystaticcoordinatesystem": 201, "getbodypart": 201, "obsolet": [201, 215, 269, 350, 351], "getcentreofmass": 201, "getclinicaldescriptor": 201, "getjoint": 201, "getjointlist": 201, "getproperti": 201, "propertylabel": 201, "getseg": 201, "getsegmentbyindex": 201, "getsegmentindex": 201, "getsegmentlist": 201, "iscalibrationproperti": 201, "isproperti": 201, "removejoint": 201, "jointlabel": 201, "removeseg": 201, "setbodypart": 201, "setcalibrationproperti": 201, "setcentreofmass": 201, "setclinicaldescriptor": 201, "setcoordinatesystemdefinit": 201, "coordinatesystemlabel": [201, 227], "referentialtyp": [201, 227], "setproperti": 201, "setstaticfilenam": 201, "updatesegmentfromcopi": 201, "targetlabel": 201, "segmenttocopi": 201, "deal": 202, "six": 202, "freedom": [202, 214], "computemotionanatomicalfram": 202, "segnam": 202, "computemotiontechnicalfram": 202, "character": 203, "relativematrixanatom": [203, 205], "additionalinfo": 203, "addmotionfram": 203, "getaxistrajectori": 203, "must": [203, 287, 368], "getnodetrajectori": 203, "getorigintrajectori": 203, "setstaticfram": 203, "fundament": 204, "spine": 204, "hold": 204, "bsp": 204, "relev": [204, 422], "uniqu": 204, "belong": 204, "addcalibrationmarkerlabel": 204, "addexternaldevicewrench": 204, "addmarkerlabel": 204, "addtechnicalreferenti": 204, "addtrackingmarkerlabel": 204, "downsampleexternaldevicewrench": 204, "appf": 204, "per": [204, 224], "rate": [204, 391], "getangularacceler": 204, "pig": 204, "dot": 204, "duplic": 204, "bodybuild": 204, "plug": 204, "different": 204, "next": 204, "previou": 204, "getcomacceler": 204, "pointfrequ": 204, "getcomtrajectori": 204, "exportbtkpoint": 204, "getcomveloc": 204, "getexistfram": 204, "getreferenti": 204, "technicalreferenti": 204, "request": [204, 438], "isexternaldevicewrenchsconnect": 204, "removetrackingmark": 204, "resetmarkerlabel": 204, "setcomposit": 204, "array3": 204, "setexistfram": 204, "lstdata": 204, "setinertiatensor": 204, "array33": 204, "setlength": 204, "setmass": 204, "setrog": 204, "radiu": [204, 212], "gyrat": 204, "zeroingexternaldevic": 204, "zero": [204, 215, 400, 407, 410, 422, 426, 447, 448, 449], "zeroingproximalwrench": 204, "setrelativematrixanatom": 205, "transform": [205, 470, 471], "modeldecor": [206, 207, 208, 209, 210, 211], "fromajcmark": 206, "leftajc_label": 206, "lajc": 206, "rightajc_label": 206, "rajc": 206, "midmaleolu": 206, "leftlateralanklelabel": 206, "lank": 206, "leftmedialanklelabel": 206, "lmed": 206, "rightlateralanklelabel": 206, "rank": 206, "rightmedialanklelabel": 206, "rmed": 206, "14": [206, 209, 210, 211, 213, 216, 217, 218, 219], "widthfrommp": [206, 211], "mid": [206, 211, 220, 291], "malleolu": 206, "thighoffset": 207, "tibialtors": 207, "shankoffset": 207, "bell": [209, 213], "estim": [209, 213, 216, 218, 219, 391], "position_left": 209, "position_right": 209, "methoddesc": 209, "Be": 209, "guidelin": 209, "short": [209, 236], "davi": [209, 216], "fromhjcmark": 209, "lefthjc_label": 209, "lhjc": 209, "righthjc_label": 209, "rhjc": 209, "greattrochanteroffset": 209, "89": 209, "leftgreattrochlabel": 209, "lgtr": 209, "rightgreattrochlabel": 209, "lknm": [209, 211], "great": 209, "trochant": 209, "mm": [209, 221], "harringtonpredictor": 209, "iacq": [210, 260, 360, 370, 371], "calibrate2dof": 211, "calibration2dof": 211, "indexfirstfram": [211, 214, 221], "indexlastfram": [211, 214, 221], "fromkjcmark": 211, "leftkjc_label": 211, "lkjc": 211, "rightkjc_label": 211, "rkjc": 211, "midcondyl": 211, "leftlateralkneelabel": 211, "lkne": 211, "leftmedialkneelabel": 211, "rightlateralkneelabel": 211, "rkne": 211, "rightmedialkneelabel": 211, "rknm": 211, "condyl": 211, "midcondyles_kad": 211, "reloc": 211, "sara": [211, 221], "halfjoint": 212, "jointmark": 212, "topjoint": 212, "stickmark": 212, "beta": [212, 215], "kabada": 212, "ramakrishan": 212, "wooten": 212, "1990": [212, 213], "journal": [212, 219, 221, 295], "orthopaed": 212, "research": 212, "8": [212, 213], "383": 212, "392": 212, "mp_input": [213, 216, 218, 219], "mp_comput": [213, 216, 218, 219], "basepl": [213, 216, 218, 219, 234, 238], "cgmreferenti": [213, 219], "thick": [213, 216, 218, 219, 234, 238], "pederson": 213, "dr": 213, "brand": 213, "ra": 213, "1989": 213, "predict": [213, 219], "landmark": 213, "human": [213, 216], "scienc": [213, 216], "16": 213, "pedersen": 213, "sever": 213, "biomech": 213, "23": 213, "617": 213, "621": 213, "proxmotionref": [214, 221], "distmotionref": [214, 221], "flexind": 214, "dof": 214, "coron": 214, "a3": 215, "epsilon": [215, 390], "001": [215, 230, 232], "replac": [215, 347], "vcmjointcentr": 215, "small": 215, "divis": 215, "ounpuu": 216, "tyburski": 216, "1991": 216, "reduct": 216, "575": 216, "587": 216, "metatars": 217, "mcginlei": [218, 309], "baker": [218, 291, 309], "sangeux": [218, 219, 291, 307], "2016": 218, "ag": 218, "sex": 218, "equat": 218, "zavatski": 219, "lawson": 219, "yuan": 219, "theologi": 219, "adult": 219, "magnet": 219, "reson": 219, "imag": 219, "40": [219, 221], "595": 219, "602": 219, "2015": [219, 291, 307], "On": 219, "42": 219, "402": 219, "405": 219, "pwonli": 219, "llonli": 219, "pelvisdepth": 219, "asisdist": 219, "meanleglength": 219, "automaticali": 219, "lateralmarkerlabel": 220, "medialmarkerlabel": 220, "statement": 220, "100": [221, 391, 393], "affect": 221, "ehrig": 221, "taylor": 221, "w": 221, "duda": 221, "heller": 221, "survei": 221, "formal": 221, "2150": 221, "7": [221, 293, 392, 393], "modelfilt": [222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240], "graviti": [222, 230], "scaletomet": [222, 230, 232], "factor": [222, 230, 295], "meter": [222, 230, 232], "computesegment": 222, "distalsegmentlabel": 222, "imod": [223, 224, 225, 230, 232, 233, 234, 235, 236, 238], "iproc": 224, "generalcoordinatesystemprocedur": 224, "modelcoordinatesystemprocedur": 224, "setstat": 224, "mappedforceplatelett": [225, 229], "leftsegmentlabel": [225, 228], "rightsegmentlabel": [225, 228], "assembl": 225, "setanatomicaldefinit": 226, "nodelabel1": 226, "nodelabel2": 226, "nodelabel3": 226, "nodelabelorigin": 226, "referentiallabel": 226, "pointlabel1": 226, "pointlabel2": 226, "pointlabel3": 226, "pointlabelorigin": 226, "attach": 227, "conform": 228, "nomenclatur": 228, "make": [228, 233], "easier": 228, "interpret": [228, 297], "account": 228, "longitudin": [228, 229, 230, 234, 327, 361, 408], "gaitfilenam": 228, "gait1": 228, "acqgaityf": 228, "btktool": [228, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465], "smartread": 228, "rlx": 228, "matchingfootsideonforcepl": 228, "addforceplategeneralev": 228, "warn": 228, "assembli": 228, "forceplateassemblyfilt": 228, "globalfram": 228, "detectprogressionfram": 228, "cgrff": 228, "enhanc": 229, "inversedynamicprocedur": 230, "gravityvector": 230, "exportmomentcontribut": 230, "contribut": 230, "karg": 230, "viconcgm1compat": [230, 234, 238], "replic": [230, 234, 238, 356], "tibia": [230, 234, 238], "doubl": [232, 361, 461], "anglelabel": 233, "absolut": [233, 401], "generalcalibrationprocedur": [234, 238], "staticcalibrationprocedur": [234, 238], "parallel": 234, "firstframeonli": 234, "setboolopt": [234, 238], "setnoanatomicalcalibr": 234, "setopt": [234, 238], "util": [235, 244, 301, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515], "intern": 235, "further": [235, 323, 327], "m_aqui": 236, "m_model": 236, "m_fixeul": 236, "fix": [236, 393], "setfixeul": 236, "modelcorrectionprocedur": 237, "help": 238, "exact": 238, "useleftkjcmark": 238, "useleftajcmark": 238, "useleftsjcmark": 238, "shoulder": 238, "useleftejcmark": 238, "elbow": 238, "useleftwjcmark": 238, "wrist": 238, "userightkjcmark": 238, "userightajcmark": 238, "userightsjcmark": 238, "userightejcmark": 238, "userightwjcmark": 238, "segmentalcomput": 238, "setnoanatomicalmot": 238, "deactiv": 238, "qualityprocedur": 239, "getunit": [246, 247], "brief": 247, "getvalu": [247, 297], "getdevicefrequ": 248, "hertz": 248, "getdevicenam": 248, "getoutputnam": 248, "forceplateinfo": 249, "getcontext": 249, "getcorn": 249, "getforceunit": 249, "getglobalcop": 249, "pressur": 249, "cop": 249, "getglobalforc": 249, "getglobalmo": 249, "getlocalorigin": 249, "getlocalreactionforc": 249, "getlocalreactionmo": 249, "getmomentunit": 249, "getorient": 249, "getorigin": 249, "getphysicalorigin": 249, "enffil": [250, 251, 252, 253], "enf": [250, 251, 252, 253, 254, 255, 256, 258], "m_path": [250, 385], "m_file": 250, "m_config": 250, "parser": 250, "configpars": 250, "getfil": 250, "getpath": 250, "getsect": 250, "pair": [250, 312, 385], "enfread": [251, 252, 253], "getpatientinfo": 251, "getsessioninfo": 252, "sessionenfread": 253, "getc3d": 253, "getforceplateassig": 253, "gettrialinfo": 253, "isc3dexist": 253, "setforcepl": 253, "mappedforceplatecharact": 253, "charact": [253, 504], "clean": [254, 422], "mark": [256, 257], "environ": 256, "filetyp": 257, "eclipsetyp": 258, "nexusfilt": [259, 260], "datapath": [259, 411, 414, 466], "filenamenoext": [259, 373, 491, 492, 503, 505], "appendanalog": 259, "appendev": 259, "appendforcepl": 259, "appendmark": 259, "appendmodeloutput": 259, "built": [259, 313, 316], "exportc3d": 259, "initmetadata": 259, "staticprocess": 260, "nexustool": [261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275], "originvalu": 263, "manualscal": 263, "existfrompoint": 263, "absenc": [263, 391], "groupnam": 264, "nexustyp": 264, "scalar": [264, 434, 438], "group": [264, 313, 316], "normalizeddata": [265, 267, 268], "subjectnam": [269, 277, 416], "getactivesubject": 269, "firstfram": [275, 390], "nexusutil": [276, 277], "resetflag": [276, 486], "organ": [283, 284, 285, 315, 334], "c3dmanag": [284, 285, 286, 287, 288], "c3dmanagerprocedur": [284, 286, 287, 288], "dissemin": [284, 286, 287, 288], "distinct": [284, 286], "enableemg": 284, "enablekinemat": 284, "enablekinet": 284, "enablemuscledynam": 284, "enablemusclegeometri": 284, "enablespatiotempor": 284, "categori": [284, 286, 287, 288], "strategi": 285, "stp_filelst": 286, "kinematic_filelst": 286, "kinetic_filelst": 286, "emg_filelst": 286, "musclegeometry_filelst": 286, "muscledynamic_filelst": 286, "spatiotempflag": [286, 287, 288], "kinematicflag": [286, 287, 288], "kineticflag": [286, 287, 288], "emgflag": [286, 287, 288], "musclegeometryflag": [286, 287, 288], "muscledynamicflag": [286, 287, 288], "filelst": [287, 288], "classificationprocedur": [289, 291], "classifi": [289, 291], "midstancedefinit": 291, "stanc": [291, 361], "45": 291, "perri": 291, "30": [291, 309], "morgan": 291, "rodda": 291, "jill": 291, "graham": [291, 309], "kerr": [291, 309], "coupl": 291, "41": 291, "586": 291, "591": 291, "2014": 291, "12": 291, "019": 291, "discretepoint": [292, 293, 294, 295, 296], "discretepointfilt": 292, "discretepointprocedur": [292, 293, 295, 296], "setmodelinfo": [292, 312], "recommend": [293, 295], "benedetti": 293, "1998": 293, "catani": 293, "f": 293, "leardini": 293, "pignotti": 293, "giannini": 293, "bristol": 293, "avon": 293, "vol": [293, 309], "13": 293, "204": 293, "215": 293, "s0268": 293, "0033": 293, "97": 293, "00041": 293, "methodologi": [293, 295, 356], "goldberg": 295, "2006": 295, "correl": 295, "improv": 295, "follow": 295, "stiff": 295, "689": 295, "698": 295, "minimum": [296, 385, 392, 393, 394, 513], "extrema": 296, "jointpattern": [297, 298, 299], "jointpatternprocedur": [297, 299], "getpattern": 297, "interpretcriteria": 297, "criteria": [297, 299, 479, 484], "primari": [297, 300, 301, 304], "secondari": 297, "xlsfile": [299, 473], "detectpattern": 299, "detectvalu": 299, "status": 299, "progressionfram": [300, 301, 302, 303, 304], "progressionprocedur": 300, "progressionframeprocedur": [300, 301, 302, 304], "crucial": 300, "understand": [300, 362], "spatial": 300, "lasi": 301, "frontmark": [301, 304], "rasi": 301, "backmark": [301, 304], "lpsi": 301, "rpsi": 301, "anterior": [301, 304], "posterior": [301, 304], "ascertain": 301, "intend": 303, "clav": 304, "c7": 304, "thorac": 304, "representativefilt": 305, "representativeprocedur": [305, 307], "most": [305, 307], "scenario": 305, "chosen": 305, "m_procedur": 305, "m_analysi": 305, "public": 307, "smallest": 307, "choos": [307, 391], "stride": [307, 369], "outlier": 307, "setdata": 307, "proc": 307, "transvers": [307, 408], "setdefaultdata": 307, "scoreprocedur": [308, 309], "gp": [308, 309, 312, 365], "2009": 309, "summari": 309, "jennif": 309, "schwartz": 309, "michael": 309, "beynon": 309, "sarah": 309, "rozumalski": 309, "adam": 309, "tirosh": 309, "oren": 309, "265": 309, "269": 309, "05": [309, 375, 390, 391], "020": 309, "stpstat": 312, "kinematicstat": [312, 319], "analysisstructur": [312, 377, 378, 379, 380, 381, 382, 383], "kineticstat": [312, 319], "musclegeometrystat": 312, "muscledynamicstat": 312, "gv": 312, "emginfo": 312, "kinematicinfo": 312, "kineticinfo": 312, "stpinfo": 312, "scoreinfo": 312, "musclegeometryinfo": 312, "muscledynamicinfo": 312, "want": 312, "sd": [312, 378, 380], "101": [312, 334], "below": [312, 392], "getkinematiccyclenumb": 312, "setcoactiv": 312, "labelemg1": 312, "labelemg2": 312, "re": 312, "setemg": [312, 357], "pst": [312, 315], "setemginfo": 312, "setexperimentalinfo": 312, "experdict": 312, "setgp": 312, "gpsstatsoveral": 312, "gpsstatscontext": 312, "overal": [312, 362, 383], "setgv": 312, "gvsstat": 312, "setkinemat": 312, "setkinematicinfo": 312, "setkinet": 312, "optionaldata": [312, 315], "setkineticinfo": 312, "modeldict": 312, "setmuscledynamicinfo": 312, "setmusclegeometri": 312, "setmusclegeometryinfo": 312, "setscoreinfo": 312, "setstp": 312, "indict": 312, "setstpinfo": 312, "setsubjectinfo": 312, "subjectdict": 312, "emglabellist": [313, 316], "builder": [313, 314, 316, 325, 326, 328], "unlik": 313, "gaitanalysisbuild": 313, "cyclefilt": [313, 316, 324], "speadsheet": 313, "appear": [313, 385], "computeemgenvelop": [313, 316], "computekinemat": [313, 316], "computekinet": [313, 316], "computemuscledynam": [313, 316], "computemusclegeometri": [313, 316], "setbuild": [314, 326], "concretebuild": 314, "concret": [314, 326, 354, 355, 357, 361, 363, 364, 366, 367], "setinfo": 314, "info": 314, "xperiment": 314, "main": 315, "computespatiotemporel": 316, "givel": [317, 318, 320, 321], "eg": [317, 318, 320, 321], "datastat": 319, "exceptionmod": 321, "combinaison": 321, "referencedatafram": 322, "startfram": [323, 327], "enableflag": [323, 327], "constructor": [323, 327], "getanalogtimesequencedata": 323, "analoglabel": 323, "getanalogtimesequencedatanorm": 323, "getev": 323, "getpointtimesequencedata": 323, "pointlabel": [323, 377, 378, 379, 380, 381, 382, 384], "getpointtimesequencedatanorm": 323, "setenableflag": 323, "Its": 324, "gaitcycl": [324, 328, 330], "spatiotemporalcycl": 324, "kinematiccycl": 324, "kineticcycl": 324, "emgcycl": 324, "spatiotemporalacq": [325, 328], "kinematicacq": [325, 328], "kineticacq": [325, 328], "emgacq": [325, 328], "musclegeometryacq": [325, 328], "muscledynamicacq": [325, 328], "getemg": [325, 328], "getkinemat": [325, 328], "getkinet": [325, 328], "getmuscledynam": [325, 328], "getmusclegeometri": [325, 328], "getspatiotempor": [325, 328], "buid": 326, "cyclesbuild": 326, "gaitacq": 327, "x0": 327, "y0": 327, "durat": 327, "cadenc": [327, 369], "stancedur": 327, "stepdur": 327, "getspatiotemporalparamet": 327, "std": [329, 331, 332], "maxim": 329, "json": [333, 373, 489, 496, 497, 500, 504, 506], "written": [333, 464], "setanalysisinst": [333, 334], "excelformat": [334, 335], "xl": [334, 335], "xlsx": [334, 335], "setdatafram": 335, "qtmtool": [342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352], "soup": [342, 343, 344, 345, 346], "session_xml": [350, 351], "creation": [350, 385, 482], "date": [350, 482], "datetim": [350, 482], "measurement_typ": 351, "els": [352, 442], "viewer": [354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 385], "comparisonplotview": [354, 355], "ianalys": [354, 355, 359], "pointlabelsuffix_lst": [354, 355], "bodypartplot": [354, 355, 366, 367, 370, 371], "accommod": 354, "plotpanel": [354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "orchestr": [354, 355], "layer": [354, 355], "arrang": [354, 355], "render": [354, 355, 364], "setconcreteplotfunct": [354, 355, 357, 358, 359, 361, 363, 364, 366, 367], "concreteplotfunct": [354, 355, 357, 358, 359, 361, 363, 364, 366, 367], "callabl": [354, 355, 357, 358, 359, 361, 363, 364, 366, 367, 425, 509], "user": [354, 355], "librari": [354, 355], "setnormativedataset": [354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 369], "inormativedataset": [354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 369], "customplotview": 356, "ianalysi": [356, 357, 358, 361, 362, 363, 364, 365, 366, 367, 369], "jame": 356, "manner": 356, "referenc": [356, 391, 392], "inspir": 356, "emgplotview": [357, 358, 359, 360], "facilit": 357, "period": 357, "setcontext": 357, "label1": 357, "label2": 357, "setmuscl": [357, 364], "selectemgchannel": [358, 359, 360], "channelnam": [358, 359, 360], "setemgmanag": [358, 359, 360], "setnormalizedemgflag": [358, 359], "under": 359, "ignorenormalactivti": 360, "setemgrectifi": 360, "groundreactionplotview": [361, 362, 363], "normalizedgaitgrfintegrationplotview": 362, "assist": 362, "behavior": 362, "muscleplotview": 364, "layout": 364, "earlier": 364, "setmuscleoutputtyp": 364, "imuscl": 364, "setnormalizationsuffix": 364, "plotview": [365, 366, 367, 369, 370, 371, 385], "automaticylimit": 368, "setautomaticylimit": [368, 385], "setnormativedata": 368, "speed": 369, "sub": [372, 373], "modal": 373, "figaxi": [374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384], "normalactivationlabel": [374, 376], "fo": 374, "color": [374, 377, 378, 379, 380, 381, 382, 384, 385, 386], "edgecolor": 374, "red": 374, "alpha": [374, 381], "plt": [374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 391, 392, 393, 394], "edg": [374, 393], "transpar": 374, "rectangl": [374, 375], "patch": 374, "heightproport": 375, "proport": 375, "analysisstructureitem": [377, 378, 379, 380, 381, 382, 383], "contextpointlabel": [377, 378, 379, 380, 381, 382], "xlabel": [377, 378, 379, 380, 381, 382, 383, 384], "ylabel": [377, 378, 379, 380, 381, 382, 384], "ylim": [377, 378, 379, 380, 381, 382, 384], "legendlabel": [377, 378, 379, 380, 381, 382, 384], "customlimit": [377, 378, 379, 380, 381, 382, 384], "nan_to_num": [377, 378, 382], "nan": [377, 378, 382, 393, 394], "corridor": [378, 380], "stplabel": 383, "xlim": 383, "linewidth": 384, "plotfilt": 385, "signific": 385, "__concreteplotview": 385, "m_filenam": 385, "m_format": 385, "m_titl": 385, "displaysignificantdifferer": 385, "axisindex": 385, "setexport": 385, "sethorizontallin": 385, "settitl": 385, "setview": 385, "concreteplotview": 385, "setylimit": 385, "min": [385, 513], "max": [385, 513], "nppf": 390, "cumul": 391, "sum": 391, "cusum": 391, "abrupt": 391, "term": 391, "prevent": 391, "ta": 391, "alarm": 391, "tai": 391, "taf": 391, "amp": 391, "tune": [391, 392], "gustafsson": 391, "2000": 391, "veri": 391, "larg": 391, "half": 391, "expect": 391, "so": 391, "more": [391, 392, 393], "delai": 391, "decreas": 391, "faster": 391, "increas": 391, "fewer": 391, "repeat": 391, "sequenti": [391, 394], "delet": [391, 392, 478], "ipython": [391, 392, 393], "notebook": [391, 392, 393, 394], "adapt": 391, "demotu": [391, 392, 393, 394], "detecta": [391, 392, 393, 394], "random": [391, 392, 393], "randn": [391, 392, 393], "300": 391, "arang": 391, "02": 391, "sin": 391, "pi": 391, "01": 391, "histori": [391, 392, 393, 394], "pypi": [391, 392, 393, 394], "org": [391, 392, 393, 394], "n_abov": 392, "n_below": 392, "threshold2": 392, "n_above2": 392, "onset": 392, "continu": 392, "doesn": 392, "indi": [392, 394], "indf": [392, 394], "characterist": 392, "might": 392, "__future__": 392, "import": 392, "mph": 393, "mpd": 393, "rise": 393, "kpsh": 393, "vallei": 393, "peak": 393, "greater": 393, "smaller": 393, "neighbor": 393, "keep": [393, 450], "fall": 393, "even": 393, "closer": 393, "negat": 393, "ind_vallei": 393, "regard": 393, "min_seq": 394, "max_alert": 394, "minim": 394, "alert": 394, "messag": 394, "seq": 394, "signal_process": [395, 396, 397, 398, 399, 400, 401, 402], "valuesarrai": 395, "initfreq": 396, "targetedfreq": 396, "higher": 396, "fa": [397, 399, 402], "obtain": 397, "place": [398, 400], "lowerfreq": 399, "upperfreq": 399, "bound": [399, 418], "zerosfilt": 400, "50hz": 402, "btkmetadata": [406, 442], "child": [406, 442], "validfram": [407, 410], "preload": 411, "timeseri": [412, 413], "ktk": [412, 413], "kineticstoolkit": [412, 413], "btkpoint": [413, 438], "pt1": 415, "pt2": 415, "pt3": 415, "form": 415, "markerlist": [418, 419], "framebound": [418, 440], "firstlevel": [420, 461, 463], "secondlevel": [420, 461, 463], "iter": 422, "tidi": 422, "especi": 422, "placehold": 422, "actual": [422, 427], "pointlabellist": 424, "numpymethod": 425, "phantom": [426, 427, 447], "markerlabel": [427, 430, 433, 440, 445], "find": 430, "fpindex": 432, "btkwrenchcollect": 432, "count": 436, "startlabel": 439, "endlabel": 439, "visibl": 441, "mdlabel": 442, "miss": 445, "ignorephantom": [448, 449], "pointtokeep": 450, "ones": 450, "unitoffset": 451, "dimens": 452, "n_frame": 452, "n_marker": 452, "newsubjectlabel": [453, 454], "newlabel": 455, "newcontext": 455, "pointtyp": 458, "occur": [459, 460], "returntyp": 461, "sort": 465, "occurr": 465, "opensimtool": [466, 467, 468, 469, 470, 471], "osimmodelinterfac": 466, "motfilenam": 468, "storag": [469, 470], "storageobject": 470, "r_lab_osim": 470, "lab": [470, 471], "data_path_out": 473, "outputfilenam": 473, "sheetnam": 473, "concaten": 473, "sheet": 473, "src": [474, 475], "dst": [474, 475], "past": [474, 475], "destin": [474, 475], "folderpath": [476, 481], "folder2copi": 476, "newfold": 476, "selectedfil": 476, "parent": 476, "fullpathnam": 477, "dir": 478, "fullnam": [480, 483], "subdirectori": 481, "raiseflag": 484, "ikwf": 485, "mpinfo": [486, 506], "translatortyp": 488, "yaml": [490, 496, 499, 500, 508], "expertsettings_filenam": 493, "settingfil": 495, "subfold": 495, "open": [496, 497, 498, 499], "neither": [496, 500], "nor": [496, 500], "syntax": [497, 499], "serial": [498, 507], "pickl": [498, 507], "deseri": 498, "stringcont": 500, "filetorenam": 502, "renamedfil": 502, "ensure_ascii": 504, "ascii": 504, "mpfilenam": 506, "well": 508, "ordereddict": 508, "loader": 509, "on_error": 509, "attempt": 509, "catch": 509, "listdata": [510, 511], "homogen": 512, "merg": 512, "val": 513, "unicodevari": 514, "encod": 514, "unicod": 514, "document": 517, "host": 517, "externali": 517, "There": 517, "offici": 517, "consult": 517}, "objects": {"pyCGM2.Anomaly.anomalyCorrectionProcedures": [[62, 0, 1, "", "AnomalyCorrectionProcedure"], [63, 0, 1, "", "MarkerAnomalyCorrectionProcedure"]], "pyCGM2.Anomaly.anomalyCorrectionProcedures.AnomalyCorrectionProcedure": [[62, 1, 1, "", "__init__"]], "pyCGM2.Anomaly.anomalyCorrectionProcedures.MarkerAnomalyCorrectionProcedure": [[63, 1, 1, "", "__init__"], [63, 2, 1, "", "_distance_threshold"], [63, 2, 1, "", "_plot"], [63, 2, 1, "", "m_anomalyIndexes"], [63, 2, 1, "", "m_markers"], [63, 1, 1, "", "run"]], "pyCGM2.Anomaly.anomalyDetectionProcedures": [[64, 0, 1, "", "AnomalyDetectionProcedure"], [65, 0, 1, "", "AnthropoDataAnomalyProcedure"], [66, 0, 1, "", "ForcePlateAnomalyProcedure"], [67, 0, 1, "", "GaitEventAnomalyProcedure"], [68, 0, 1, "", "MarkerAnomalyDetectionRollingProcedure"]], "pyCGM2.Anomaly.anomalyDetectionProcedures.AnomalyDetectionProcedure": [[64, 1, 1, "", "__init__"], [64, 1, 1, "", "getAnomaly"], [64, 1, 1, "", "run"]], "pyCGM2.Anomaly.anomalyDetectionProcedures.AnthropoDataAnomalyProcedure": [[65, 1, 1, "", "__init__"], [65, 2, 1, "", "mp"], [65, 1, 1, "", "run"]], "pyCGM2.Anomaly.anomalyDetectionProcedures.ForcePlateAnomalyProcedure": [[66, 1, 1, "", "__init__"], [66, 1, 1, "", "run"]], "pyCGM2.Anomaly.anomalyDetectionProcedures.GaitEventAnomalyProcedure": [[67, 1, 1, "", "__init__"], [67, 1, 1, "", "run"]], "pyCGM2.Anomaly.anomalyDetectionProcedures.MarkerAnomalyDetectionRollingProcedure": [[68, 1, 1, "", "__init__"], [68, 2, 1, "", "_aprioriError"], [68, 2, 1, "", "_method"], [68, 2, 1, "", "_plot"], [68, 2, 1, "", "_treshold"], [68, 2, 1, "", "_window"], [68, 2, 1, "", "m_markers"], [68, 1, 1, "", "run"]], "pyCGM2.Anomaly.anomalyFilters": [[69, 0, 1, "", "AnomalyCorrectionFilter"], [70, 0, 1, "", "AnomalyDetectionFilter"]], "pyCGM2.Anomaly.anomalyFilters.AnomalyCorrectionFilter": [[69, 1, 1, "", "__init__"], [69, 1, 1, "", "run"]], "pyCGM2.Anomaly.anomalyFilters.AnomalyDetectionFilter": [[70, 1, 1, "", "__init__"], [70, 1, 1, "", "run"]], "pyCGM2.EMG.coactivationProcedures": [[72, 0, 1, "", "CoActivationProcedure"], [73, 0, 1, "", "FalconerCoActivationProcedure"], [74, 0, 1, "", "UnithanCoActivationProcedure"]], "pyCGM2.EMG.coactivationProcedures.CoActivationProcedure": [[72, 1, 1, "", "__init__"]], "pyCGM2.EMG.coactivationProcedures.FalconerCoActivationProcedure": [[73, 1, 1, "", "__init__"], [73, 1, 1, "", "run"]], "pyCGM2.EMG.coactivationProcedures.UnithanCoActivationProcedure": [[74, 1, 1, "", "__init__"], [74, 1, 1, "", "run"]], "pyCGM2.EMG.discreteEmgProcedures": [[75, 0, 1, "", "AmplitudesProcedure"], [76, 0, 1, "", "DiscreteEmgProcedure"]], "pyCGM2.EMG.discreteEmgProcedures.AmplitudesProcedure": [[75, 2, 1, "", "NAME"], [75, 1, 1, "", "__init__"], [75, 1, 1, "", "detect"]], "pyCGM2.EMG.discreteEmgProcedures.DiscreteEmgProcedure": [[76, 1, 1, "", "__init__"]], "pyCGM2.EMG.emgFilters": [[77, 0, 1, "", "BasicEmgProcessingFilter"], [78, 0, 1, "", "DiscreteEMGFilter"], [79, 0, 1, "", "EmgCoActivationFilter"], [80, 0, 1, "", "EmgEnvelopProcessingFilter"], [81, 0, 1, "", "EmgNormalisationProcessingFilter"]], "pyCGM2.EMG.emgFilters.BasicEmgProcessingFilter": [[77, 1, 1, "", "__init__"], [77, 1, 1, "", "run"], [77, 1, 1, "", "setHighPassFrequencies"]], "pyCGM2.EMG.emgFilters.DiscreteEMGFilter": [[78, 1, 1, "", "__init__"], [78, 1, 1, "", "getOutput"], [78, 1, 1, "", "setCondExpInf"], [78, 1, 1, "", "setSubjInfo"]], "pyCGM2.EMG.emgFilters.EmgCoActivationFilter": [[79, 1, 1, "", "__init__"], [79, 1, 1, "", "run"], [79, 1, 1, "", "setCoactivationMethod"], [79, 1, 1, "", "setEMG1"], [79, 1, 1, "", "setEMG2"]], "pyCGM2.EMG.emgFilters.EmgEnvelopProcessingFilter": [[80, 1, 1, "", "__init__"], [80, 1, 1, "", "run"], [80, 1, 1, "", "setCutoffFrequency"]], "pyCGM2.EMG.emgFilters.EmgNormalisationProcessingFilter": [[81, 1, 1, "", "__init__"], [81, 1, 1, "", "processAnalysis"], [81, 1, 1, "", "processC3d"], [81, 1, 1, "", "run"], [81, 1, 1, "", "setC3ds"], [81, 1, 1, "", "setMaxMethod"], [81, 1, 1, "", "setThresholdFromOtherAnalysis"]], "pyCGM2.EMG.emgManager": [[82, 0, 1, "", "EmgManager"]], "pyCGM2.EMG.emgManager.EmgManager": [[82, 1, 1, "", "__init__"], [82, 1, 1, "", "getChannel"], [82, 1, 1, "", "getChannelSection"], [82, 1, 1, "", "getChannels"], [82, 1, 1, "", "getMuscles"], [82, 1, 1, "", "getNormalActivity"], [82, 1, 1, "", "getProcessingSection"], [82, 1, 1, "", "getSides"]], "pyCGM2.Events.eventFilters": [[97, 0, 1, "", "EventFilter"]], "pyCGM2.Events.eventFilters.EventFilter": [[97, 1, 1, "", "__init__"], [97, 1, 1, "", "detect"], [97, 1, 1, "", "getState"]], "pyCGM2.Events.eventProcedures": [[98, 0, 1, "", "EventProcedure"], [99, 0, 1, "", "ZeniProcedure"]], "pyCGM2.Events.eventProcedures.EventProcedure": [[98, 1, 1, "", "__init__"]], "pyCGM2.Events.eventProcedures.ZeniProcedure": [[99, 1, 1, "", "__init__"], [99, 2, 1, "", "description"], [99, 1, 1, "", "detect"], [99, 2, 1, "", "footOffOffset"], [99, 2, 1, "", "footStrikeOffset"], [99, 1, 1, "", "setFootOffOffset"], [99, 1, 1, "", "setFootStrikeOffset"]], "pyCGM2.ForcePlates.forceplates": [[101, 3, 1, "", "ForcePlateIntegration"], [102, 3, 1, "", "addForcePlateGeneralEvents"], [103, 3, 1, "", "appendForcePlateCornerAsMarker"], [104, 3, 1, "", "combineForcePlate"], [105, 3, 1, "", "correctForcePlateType5"], [106, 3, 1, "", "detectGaitConsecutiveForcePlates"], [107, 3, 1, "", "matchingFootSideOnForceplate"]], "pyCGM2.IMU.Procedures.imuMotionProcedure": [[108, 0, 1, "", "GlobalAngleMotionProcedure"], [109, 0, 1, "", "ImuMotionProcedure"], [110, 0, 1, "", "QuaternionMotionProcedure"], [111, 0, 1, "", "RealignedMotionProcedure"]], "pyCGM2.IMU.Procedures.imuMotionProcedure.GlobalAngleMotionProcedure": [[108, 1, 1, "", "__init__"], [108, 1, 1, "", "compute"]], "pyCGM2.IMU.Procedures.imuMotionProcedure.ImuMotionProcedure": [[109, 1, 1, "", "__init__"]], "pyCGM2.IMU.Procedures.imuMotionProcedure.QuaternionMotionProcedure": [[110, 1, 1, "", "__init__"], [110, 1, 1, "", "compute"]], "pyCGM2.IMU.Procedures.imuMotionProcedure.RealignedMotionProcedure": [[111, 1, 1, "", "__init__"], [111, 1, 1, "", "compute"]], "pyCGM2.IMU.Procedures.imuReaderProcedures": [[112, 0, 1, "", "C3dBlueTridentProcedure"], [113, 0, 1, "", "CsvProcedure"], [114, 0, 1, "", "DataframeProcedure"], [115, 0, 1, "", "ImuReaderProcedure"]], "pyCGM2.IMU.Procedures.imuReaderProcedures.C3dBlueTridentProcedure": [[112, 1, 1, "", "__init__"], [112, 1, 1, "", "read"]], "pyCGM2.IMU.Procedures.imuReaderProcedures.CsvProcedure": [[113, 1, 1, "", "__init__"], [113, 1, 1, "", "read"]], "pyCGM2.IMU.Procedures.imuReaderProcedures.DataframeProcedure": [[114, 1, 1, "", "__init__"], [114, 1, 1, "", "read"]], "pyCGM2.IMU.Procedures.imuReaderProcedures.ImuReaderProcedure": [[115, 1, 1, "", "__init__"], [115, 1, 1, "", "downsample"]], "pyCGM2.IMU.Procedures.relativeImuAngleProcedures": [[116, 0, 1, "", "RelativeAnglesProcedure"]], "pyCGM2.IMU.Procedures.relativeImuAngleProcedures.RelativeAnglesProcedure": [[116, 1, 1, "", "__init__"], [116, 1, 1, "", "compute"]], "pyCGM2.IMU.imu": [[117, 0, 1, "", "Imu"]], "pyCGM2.IMU.imu.Imu": [[117, 1, 1, "", "__init__"], [117, 1, 1, "", "downsample"], [117, 1, 1, "", "getAcceleration"], [117, 1, 1, "", "getAngleAxis"], [117, 1, 1, "", "getAngularVelocity"], [117, 1, 1, "", "getMagnetometer"], [117, 1, 1, "", "getMotion"], [117, 1, 1, "", "getQuaternions"], [117, 1, 1, "", "reInit"], [117, 1, 1, "", "update"]], "pyCGM2.IMU.imuFilters": [[118, 0, 1, "", "ImuReaderFilter"]], "pyCGM2.IMU.imuFilters.ImuReaderFilter": [[118, 1, 1, "", "__init__"], [118, 1, 1, "", "run"]], "pyCGM2.IMU.opensense.interface.opensenseFilters": [[119, 0, 1, "", "opensenseInterfaceImuInverseKinematicFilter"], [120, 0, 1, "", "opensenseInterfaceImuPlacerFilter"]], "pyCGM2.IMU.opensense.interface.opensenseFilters.opensenseInterfaceImuInverseKinematicFilter": [[119, 1, 1, "", "__init__"], [119, 1, 1, "", "run"]], "pyCGM2.IMU.opensense.interface.opensenseFilters.opensenseInterfaceImuPlacerFilter": [[120, 1, 1, "", "__init__"], [120, 1, 1, "", "getCalibratedOsimName"], [120, 1, 1, "", "run"]], "pyCGM2.IMU.opensense.interface.procedures.opensenseImuKinematicFitterProcedure": [[121, 0, 1, "", "ImuInverseKinematicXMLProcedure"]], "pyCGM2.IMU.opensense.interface.procedures.opensenseImuKinematicFitterProcedure.ImuInverseKinematicXMLProcedure": [[121, 1, 1, "", "__init__"], [121, 1, 1, "", "finalize"], [121, 1, 1, "", "prepareImu"], [121, 1, 1, "", "prepareImuMapper"], [121, 1, 1, "", "prepareOrientationFile"], [121, 1, 1, "", "prepareSensorToOpensimRotation"], [121, 1, 1, "", "prepareXml"], [121, 1, 1, "", "run"], [121, 1, 1, "", "setSetupFile"], [121, 1, 1, "", "setTimeRange"]], "pyCGM2.IMU.opensense.interface.procedures.opensenseImuPlacerInterfaceProcedure": [[122, 0, 1, "", "ImuPlacerXMLProcedure"]], "pyCGM2.IMU.opensense.interface.procedures.opensenseImuPlacerInterfaceProcedure.ImuPlacerXMLProcedure": [[122, 1, 1, "", "__init__"], [122, 1, 1, "", "finalize"], [122, 1, 1, "", "prepareBaseImu"], [122, 1, 1, "", "prepareImu"], [122, 1, 1, "", "prepareImuMapper"], [122, 1, 1, "", "prepareOrientationFile"], [122, 1, 1, "", "prepareSensorToOpensimRotation"], [122, 1, 1, "", "prepareXml"], [122, 1, 1, "", "run"], [122, 1, 1, "", "setSetupFile"]], "pyCGM2.Inspector.inspectorFilters": [[124, 0, 1, "", "InspectorFilter"]], "pyCGM2.Inspector.inspectorFilters.InspectorFilter": [[124, 1, 1, "", "__init__"], [124, 1, 1, "", "run"]], "pyCGM2.Inspector.inspectorProcedures": [[125, 0, 1, "", "InspectorProcedure"], [126, 0, 1, "", "MarkerPresenceDetectionProcedure"]], "pyCGM2.Inspector.inspectorProcedures.InspectorProcedure": [[125, 1, 1, "", "__init__"]], "pyCGM2.Inspector.inspectorProcedures.MarkerPresenceDetectionProcedure": [[126, 1, 1, "", "__init__"], [126, 1, 1, "", "run"]], "pyCGM2.Lib.CGM.cgm1": [[9, 3, 1, "", "calibrate"], [10, 3, 1, "", "fitting"]], "pyCGM2.Lib.CGM.cgm1_1": [[11, 3, 1, "", "calibrate"], [12, 3, 1, "", "fitting"]], "pyCGM2.Lib.CGM.cgm2_1": [[13, 3, 1, "", "calibrate"], [14, 3, 1, "", "fitting"]], "pyCGM2.Lib.CGM.cgm2_2": [[15, 3, 1, "", "calibrate"], [16, 3, 1, "", "fitting"]], "pyCGM2.Lib.CGM.cgm2_3": [[17, 3, 1, "", "calibrate"], [18, 3, 1, "", "fitting"]], "pyCGM2.Lib.CGM.cgm2_4": [[19, 3, 1, "", "calibrate"], [20, 3, 1, "", "fitting"]], "pyCGM2.Lib.CGM.cgm2_5": [[21, 3, 1, "", "calibrate"], [22, 3, 1, "", "fitting"]], "pyCGM2.Lib.CGM.kneeCalibration": [[23, 3, 1, "", "calibration2Dof"], [24, 3, 1, "", "sara"]], "pyCGM2.Lib.CGM.musculoskeletal.cgm2_2": [[25, 3, 1, "", "calibrate"], [26, 3, 1, "", "fitting"]], "pyCGM2.Lib.CGM.musculoskeletal.cgm2_3": [[27, 3, 1, "", "calibrate"], [28, 3, 1, "", "fitting"]], "pyCGM2.Lib.analysis": [[5, 3, 1, "", "automaticCPdeviations"], [6, 3, 1, "", "exportAnalysis"], [7, 3, 1, "", "makeAnalysis"]], "pyCGM2.Lib.emg": [[30, 3, 1, "", "loadEmg"], [31, 3, 1, "", "normalizedEMG"], [32, 3, 1, "", "processEMG"], [33, 3, 1, "", "processEMG_fromBtkAcq"]], "pyCGM2.Lib.eventDetector": [[35, 3, 1, "", "zeni"]], "pyCGM2.Lib.plot": [[37, 3, 1, "", "compareEmgEnvelops"], [38, 3, 1, "", "compareKinematic"], [39, 3, 1, "", "compareKinetic"], [40, 3, 1, "", "compareSelectedEmgEvelops"], [41, 3, 1, "", "plotConsistencyEnvelopEMGpanel"], [42, 3, 1, "", "plotDescriptiveEnvelopEMGpanel"], [43, 3, 1, "", "plotPFKE"], [44, 3, 1, "", "plotSaggitalGagePanel"], [45, 3, 1, "", "plotTemporalEMG"], [46, 3, 1, "", "plotTemporalKinematic"], [47, 3, 1, "", "plotTemporalKinetic"], [48, 3, 1, "", "plot_ConsistencyKinematic"], [49, 3, 1, "", "plot_ConsistencyKinetic"], [50, 3, 1, "", "plot_DescriptiveGRF"], [51, 3, 1, "", "plot_DescriptiveGrfIntegration"], [52, 3, 1, "", "plot_DescriptiveKinematic"], [53, 3, 1, "", "plot_DescriptiveKinetic"], [54, 3, 1, "", "plot_DescriptiveMuscleLength"], [55, 3, 1, "", "plot_MAP"], [56, 3, 1, "", "plot_spatioTemporal"]], "pyCGM2.Lib.report": [[58, 3, 1, "", "pdfGaitReport"]], "pyCGM2.Math.derivation": [[128, 3, 1, "", "firstOrderFiniteDifference"], [129, 3, 1, "", "matrixFirstDerivation"], [130, 3, 1, "", "matrixSecondDerivation"], [131, 3, 1, "", "splineDerivation"], [132, 3, 1, "", "splineFittingDerivation"]], "pyCGM2.Math.euler": [[133, 3, 1, "", "euler_xyz"], [134, 3, 1, "", "euler_xzy"], [135, 3, 1, "", "euler_yxz"], [136, 3, 1, "", "euler_yzx"], [137, 3, 1, "", "euler_zxy"], [138, 3, 1, "", "euler_zyx"], [139, 3, 1, "", "wrapEulerTo"]], "pyCGM2.Math.geometry": [[140, 3, 1, "", "LineLineIntersect"], [141, 3, 1, "", "angleFrom2Vectors"], [142, 3, 1, "", "computeAngle"], [143, 3, 1, "", "oppositeVector"]], "pyCGM2.Math.normalisation": [[144, 3, 1, "", "timeSequenceNormalisation"]], "pyCGM2.Math.numeric": [[145, 3, 1, "", "rms"], [146, 3, 1, "", "skewMatrix"]], "pyCGM2.Model.CGM2.cgm": [[150, 0, 1, "", "CGM"], [151, 0, 1, "", "CGM1"]], "pyCGM2.Model.CGM2.cgm.CGM": [[150, 1, 1, "", "__init__"], [150, 1, 1, "", "detectCalibrationMethods"], [150, 1, 1, "", "getStaticTrackingMarkers"], [150, 1, 1, "", "get_markerLabelForPiGStatic"], [150, 1, 1, "", "setSTAexpertMode"], [150, 1, 1, "", "setStaticTrackingMarkers"]], "pyCGM2.Model.CGM2.cgm.CGM1": [[151, 1, 1, "", "__init__"], [151, 1, 1, "", "calibrate"], [151, 1, 1, "", "calibrationProcedure"], [151, 1, 1, "", "computeMotion"], [151, 1, 1, "", "computeOptimizedSegmentMotion"], [151, 1, 1, "", "configure"], [151, 1, 1, "", "getAbdAddAnkleJointOffset"], [151, 1, 1, "", "getFootOffset"], [151, 1, 1, "", "getShankOffsets"], [151, 1, 1, "", "getStaticMarkers"], [151, 1, 1, "", "getThighOffset"], [151, 1, 1, "", "getTibialTorsionOffset"], [151, 1, 1, "", "getTrackingMarkers"], [151, 1, 1, "", "opensimGeometry"], [151, 1, 1, "", "opensimIkTask"], [151, 1, 1, "", "opensimTrackingMarkers"], [151, 1, 1, "", "setVersion"], [151, 1, 1, "", "viconExport"]], "pyCGM2.Model.CGM2.cgm2": [[152, 0, 1, "", "CGM2_1"], [153, 0, 1, "", "CGM2_2"], [154, 0, 1, "", "CGM2_3"], [155, 0, 1, "", "CGM2_4"], [156, 0, 1, "", "CGM2_5"]], "pyCGM2.Model.CGM2.cgm2.CGM2_1": [[152, 1, 1, "", "__init__"], [152, 2, 1, "", "decoratedModel"], [152, 2, 1, "", "version"]], "pyCGM2.Model.CGM2.cgm2.CGM2_2": [[153, 1, 1, "", "__init__"], [153, 2, 1, "", "decoratedModel"], [153, 1, 1, "", "getStaticIkTargets"], [153, 2, 1, "", "m_staticIkTargets"], [153, 1, 1, "", "setStaticIkTargets"], [153, 2, 1, "", "version"]], "pyCGM2.Model.CGM2.cgm2.CGM2_3": [[154, 2, 1, "", "LOWERLIMB_TRACKING_MARKERS"], [154, 1, 1, "", "__init__"], [154, 1, 1, "", "calibrate"], [154, 2, 1, "", "decoratedModel"], [154, 1, 1, "", "getStaticIkTargets"], [154, 2, 1, "", "m_staticIkTargets"], [154, 1, 1, "", "opensimIkTask"], [154, 1, 1, "", "setStaticIkTargets"], [154, 2, 1, "", "version"]], "pyCGM2.Model.CGM2.cgm2.CGM2_4": [[155, 2, 1, "", "ANALYSIS_KINEMATIC_LABELS_DICT"], [155, 2, 1, "", "ANALYSIS_KINETIC_LABELS_DICT"], [155, 2, 1, "", "LOWERLIMB_JOINTS"], [155, 2, 1, "", "LOWERLIMB_SEGMENTS"], [155, 2, 1, "", "LOWERLIMB_TRACKING_MARKERS"], [155, 1, 1, "", "__init__"], [155, 1, 1, "", "calibrate"], [155, 1, 1, "", "computeMotion"], [155, 1, 1, "", "computeOptimizedSegmentMotion"], [155, 1, 1, "", "getHindFootOffset"], [155, 1, 1, "", "opensimGeometry"], [155, 1, 1, "", "opensimIkTask"], [155, 1, 1, "", "viconExport"]], "pyCGM2.Model.CGM2.cgm2.CGM2_5": [[156, 1, 1, "", "__init__"]], "pyCGM2.Model.CGM2.decorators": [[157, 3, 1, "", "applyBasicDecorators"], [158, 3, 1, "", "applyHJCDecorators"], [159, 3, 1, "", "applyKJC_AJCDecorators"]], "pyCGM2.Model.Opensim.interface.opensimInterface": [[160, 0, 1, "", "opensimXmlInterface"], [161, 0, 1, "", "osimCgmInterface"], [162, 0, 1, "", "osimInterface"]], "pyCGM2.Model.Opensim.interface.opensimInterface.opensimXmlInterface": [[160, 1, 1, "", "__init__"], [160, 1, 1, "", "getSoup"], [160, 1, 1, "", "set_inList_fromAttr"], [160, 1, 1, "", "set_many"], [160, 1, 1, "", "set_many_inList"], [160, 1, 1, "", "set_one"], [160, 1, 1, "", "update"]], "pyCGM2.Model.Opensim.interface.opensimInterface.osimCgmInterface": [[161, 1, 1, "", "__init__"]], "pyCGM2.Model.Opensim.interface.opensimInterface.osimInterface": [[162, 1, 1, "", "__init__"], [162, 1, 1, "", "getBodies"], [162, 1, 1, "", "getCoordinates"], [162, 1, 1, "", "getMuscles"], [162, 1, 1, "", "getMuscles_bySide"], [162, 2, 1, "", "xml"]], "pyCGM2.Model.Opensim.interface.opensimInterfaceFilters": [[163, 0, 1, "", "opensimInterfaceAnalysesFilter"], [164, 0, 1, "", "opensimInterfaceInverseDynamicsFilter"], [165, 0, 1, "", "opensimInterfaceInverseKinematicsFilter"], [166, 0, 1, "", "opensimInterfaceScalingFilter"], [167, 0, 1, "", "opensimInterfaceStaticOptimizationFilter"]], "pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceAnalysesFilter": [[163, 1, 1, "", "__init__"], [163, 1, 1, "", "getAcq"], [163, 1, 1, "", "pushStoToAcq"], [163, 1, 1, "", "run"]], "pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceInverseDynamicsFilter": [[164, 1, 1, "", "__init__"], [164, 1, 1, "", "getAcq"], [164, 1, 1, "", "pushStoToAcq"], [164, 1, 1, "", "run"]], "pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceInverseKinematicsFilter": [[165, 1, 1, "", "__init__"], [165, 1, 1, "", "getAcq"], [165, 1, 1, "", "pushFittedMarkersIntoAcquisition"], [165, 1, 1, "", "pushMotToAcq"], [165, 1, 1, "", "run"]], "pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceScalingFilter": [[166, 1, 1, "", "__init__"], [166, 1, 1, "", "getOsim"], [166, 1, 1, "", "getOsimName"], [166, 1, 1, "", "run"]], "pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceStaticOptimizationFilter": [[167, 1, 1, "", "__init__"], [167, 1, 1, "", "getAcq"], [167, 1, 1, "", "pushStoToAcq"], [167, 1, 1, "", "run"]], "pyCGM2.Model.Opensim.interface.procedures.analysisReport.opensimAnalysesInterfaceProcedure": [[168, 0, 1, "", "AnalysesXmlCgmDrivenModelProcedure"], [169, 0, 1, "", "AnalysesXmlCgmProcedure"], [170, 0, 1, "", "AnalysesXmlProcedure"]], "pyCGM2.Model.Opensim.interface.procedures.analysisReport.opensimAnalysesInterfaceProcedure.AnalysesXmlCgmDrivenModelProcedure": [[168, 1, 1, "", "__init__"], [168, 1, 1, "", "finalize"], [168, 1, 1, "", "prepareXml"], [168, 1, 1, "", "setPose"]], "pyCGM2.Model.Opensim.interface.procedures.analysisReport.opensimAnalysesInterfaceProcedure.AnalysesXmlCgmProcedure": [[169, 1, 1, "", "__init__"], [169, 1, 1, "", "finalize"], [169, 1, 1, "", "prepareXml"]], "pyCGM2.Model.Opensim.interface.procedures.analysisReport.opensimAnalysesInterfaceProcedure.AnalysesXmlProcedure": [[170, 1, 1, "", "__init__"], [170, 1, 1, "", "finalize"], [170, 1, 1, "", "prepareTrial_fromBtkAcq"], [170, 1, 1, "", "prepareTrial_fromMotFiles"], [170, 1, 1, "", "prepareXml"], [170, 1, 1, "", "run"], [170, 1, 1, "", "setFrameRange"], [170, 1, 1, "", "setSetupFiles"], [170, 1, 1, "", "setTimeRange"]], "pyCGM2.Model.Opensim.interface.procedures.inverseDynamics.opensimInverseDynamicsInterfaceProcedure": [[171, 0, 1, "", "InverseDynamicsXmlCgmProcedure"], [172, 0, 1, "", "InverseDynamicsXmlProcedure"]], "pyCGM2.Model.Opensim.interface.procedures.inverseDynamics.opensimInverseDynamicsInterfaceProcedure.InverseDynamicsXmlCgmProcedure": [[171, 1, 1, "", "__init__"], [171, 1, 1, "", "finalize"], [171, 1, 1, "", "prepareXml"], [171, 1, 1, "", "run"]], "pyCGM2.Model.Opensim.interface.procedures.inverseDynamics.opensimInverseDynamicsInterfaceProcedure.InverseDynamicsXmlProcedure": [[172, 1, 1, "", "__init__"], [172, 1, 1, "", "finalize"], [172, 1, 1, "", "prepareTrial_fromBtkAcq"], [172, 1, 1, "", "prepareXml"], [172, 1, 1, "", "run"], [172, 1, 1, "", "setFrameRange"], [172, 1, 1, "", "setSetupFiles"], [172, 1, 1, "", "setTimeRange"]], "pyCGM2.Model.Opensim.interface.procedures.inverseKinematics.opensimInverseKinematicsInterfaceProcedure": [[173, 0, 1, "", "InverseKinematicXmlCgmProcedure"], [174, 0, 1, "", "InverseKinematicXmlProcedure"]], "pyCGM2.Model.Opensim.interface.procedures.inverseKinematics.opensimInverseKinematicsInterfaceProcedure.InverseKinematicXmlCgmProcedure": [[173, 1, 1, "", "__init__"], [173, 1, 1, "", "finalize"]], "pyCGM2.Model.Opensim.interface.procedures.inverseKinematics.opensimInverseKinematicsInterfaceProcedure.InverseKinematicXmlProcedure": [[174, 1, 1, "", "__init__"], [174, 1, 1, "", "finalize"], [174, 1, 1, "", "prepareTrial_fromBtkAcq"], [174, 1, 1, "", "prepareWeights"], [174, 1, 1, "", "prepareXml"], [174, 1, 1, "", "run"], [174, 1, 1, "", "setAccuracy"], [174, 1, 1, "", "setFrameRange"], [174, 1, 1, "", "setSetupFile"], [174, 1, 1, "", "setTimeRange"]], "pyCGM2.Model.Opensim.interface.procedures.scaling.opensimScalingInterfaceProcedure": [[175, 0, 1, "", "ScalingXmlCgmProcedure"], [176, 0, 1, "", "ScalingXmlProcedure"]], "pyCGM2.Model.Opensim.interface.procedures.scaling.opensimScalingInterfaceProcedure.ScalingXmlCgmProcedure": [[175, 1, 1, "", "__init__"], [175, 1, 1, "", "finalize"], [175, 1, 1, "", "prepareXml"], [175, 1, 1, "", "run"]], "pyCGM2.Model.Opensim.interface.procedures.scaling.opensimScalingInterfaceProcedure.ScalingXmlProcedure": [[176, 1, 1, "", "__init__"], [176, 1, 1, "", "finalize"], [176, 1, 1, "", "prepareStaticTrial_fromBtkAcq"], [176, 1, 1, "", "prepareXml"], [176, 1, 1, "", "run"], [176, 1, 1, "", "setSetupFiles"]], "pyCGM2.Model.Opensim.interface.procedures.staticOptimisation.opensimStaticOptimizationInterfaceProcedure": [[177, 0, 1, "", "StaticOptimisationXmlCgmProcedure"], [178, 0, 1, "", "StaticOptimisationXmlProcedure"]], "pyCGM2.Model.Opensim.interface.procedures.staticOptimisation.opensimStaticOptimizationInterfaceProcedure.StaticOptimisationXmlCgmProcedure": [[177, 1, 1, "", "__init__"], [177, 1, 1, "", "finalize"], [177, 1, 1, "", "prepareXml"]], "pyCGM2.Model.Opensim.interface.procedures.staticOptimisation.opensimStaticOptimizationInterfaceProcedure.StaticOptimisationXmlProcedure": [[178, 1, 1, "", "__init__"], [178, 1, 1, "", "finalize"], [178, 1, 1, "", "prepareTrial_fromBtkAcq"], [178, 1, 1, "", "prepareXml"], [178, 1, 1, "", "run"], [178, 1, 1, "", "setFrameRange"], [178, 1, 1, "", "setResultsDirname"], [178, 1, 1, "", "setSetupFiles"], [178, 1, 1, "", "setTimeRange"]], "pyCGM2.Model.Procedures.forcePlateIntegrationProcedures": [[179, 0, 1, "", "ForcePlateIntegrationProcedure"], [180, 0, 1, "", "GaitForcePlateIntegrationProcedure"]], "pyCGM2.Model.Procedures.forcePlateIntegrationProcedures.ForcePlateIntegrationProcedure": [[179, 1, 1, "", "__init__"]], "pyCGM2.Model.Procedures.forcePlateIntegrationProcedures.GaitForcePlateIntegrationProcedure": [[180, 1, 1, "", "__init__"], [180, 1, 1, "id0", "compute"]], "pyCGM2.Model.Procedures.modelMotionCorrection": [[181, 0, 1, "", "ModelCorrectionProcedure"], [182, 0, 1, "", "Naim2019ThighMisaligmentCorrectionProcedure"]], "pyCGM2.Model.Procedures.modelMotionCorrection.ModelCorrectionProcedure": [[181, 1, 1, "", "__init__"]], "pyCGM2.Model.Procedures.modelMotionCorrection.Naim2019ThighMisaligmentCorrectionProcedure": [[182, 1, 1, "", "__init__"], [182, 1, 1, "", "correct"]], "pyCGM2.Model.Procedures.modelQuality": [[183, 0, 1, "", "GeneralScoreResidualProcedure"], [184, 0, 1, "", "ModelScoreResidualProcedure"], [185, 0, 1, "", "QualityProcedure"], [186, 0, 1, "", "WandAngleQualityProcedure"]], "pyCGM2.Model.Procedures.modelQuality.GeneralScoreResidualProcedure": [[183, 1, 1, "", "__init__"], [183, 1, 1, "", "setDefinition"]], "pyCGM2.Model.Procedures.modelQuality.ModelScoreResidualProcedure": [[184, 1, 1, "", "__init__"]], "pyCGM2.Model.Procedures.modelQuality.QualityProcedure": [[185, 1, 1, "", "__init__"]], "pyCGM2.Model.Procedures.modelQuality.WandAngleQualityProcedure": [[186, 1, 1, "", "__init__"], [186, 1, 1, "", "run"]], "pyCGM2.Model.bodySegmentParameters": [[187, 0, 1, "", "Bsp"], [188, 3, 1, "", "updateFromcustomMp"]], "pyCGM2.Model.bodySegmentParameters.Bsp": [[187, 1, 1, "", "__init__"], [187, 1, 1, "", "compute"], [187, 1, 1, "", "setParameters"]], "pyCGM2.Model.frame": [[189, 0, 1, "", "Frame"], [190, 0, 1, "", "Node"], [191, 3, 1, "", "angleAxis_TO_quaternion"], [192, 3, 1, "", "angleAxis_TO_rotationMatrix"], [193, 3, 1, "", "quaternion_TO_angleAxis"], [194, 3, 1, "", "quaternion_TO_rotationMatrix"], [195, 3, 1, "", "rotationMatrix_TO_angleAxis"], [196, 3, 1, "", "rotationMatrix_TO_quaternion"], [197, 3, 1, "", "setFrameData"]], "pyCGM2.Model.frame.Frame": [[189, 1, 1, "", "__init__"], [189, 1, 1, "", "addNode"], [189, 1, 1, "", "constructFromAnglesAxis"], [189, 1, 1, "", "constructFromQuaternion"], [189, 1, 1, "", "copyNode"], [189, 1, 1, "", "eraseNodes"], [189, 1, 1, "", "getAngleAxis"], [189, 1, 1, "", "getGlobalPosition"], [189, 1, 1, "", "getNodeIndex"], [189, 1, 1, "", "getNodeLabels"], [189, 1, 1, "", "getNode_byIndex"], [189, 1, 1, "", "getNode_byLabel"], [189, 1, 1, "", "getNodes"], [189, 1, 1, "", "getQuaternion"], [189, 1, 1, "", "getRotation"], [189, 1, 1, "", "getTranslation"], [189, 1, 1, "", "isNodeExist"], [189, 1, 1, "", "setAxes"], [189, 1, 1, "", "setRotation"], [189, 1, 1, "", "setTranslation"], [189, 1, 1, "", "update"], [189, 1, 1, "", "updateAxisFromRotation"], [189, 1, 1, "", "updateNode"]], "pyCGM2.Model.frame.Node": [[190, 1, 1, "", "__init__"], [190, 1, 1, "", "computeGlobal"], [190, 1, 1, "", "computeLocal"], [190, 1, 1, "", "getDescription"], [190, 1, 1, "", "getGlobal"], [190, 1, 1, "", "getLabel"], [190, 1, 1, "", "getLocal"], [190, 1, 1, "", "setDescription"]], "pyCGM2.Model.model": [[198, 0, 1, "", "AnatomicalReferential"], [199, 0, 1, "", "ClinicalDescriptor"], [200, 0, 1, "", "Joint"], [201, 0, 1, "", "Model"], [202, 0, 1, "", "Model6Dof"], [203, 0, 1, "", "Referential"], [204, 0, 1, "", "Segment"], [205, 0, 1, "", "TechnicalReferential"]], "pyCGM2.Model.model.AnatomicalReferential": [[198, 1, 1, "", "__init__"]], "pyCGM2.Model.model.ClinicalDescriptor": [[199, 1, 1, "", "__init__"]], "pyCGM2.Model.model.Joint": [[200, 1, 1, "", "__init__"]], "pyCGM2.Model.model.Model": [[201, 1, 1, "", "__init__"], [201, 1, 1, "", "addAnthropoInputParameters"], [201, 1, 1, "", "addChain"], [201, 1, 1, "", "addJoint"], [201, 1, 1, "", "addSegment"], [201, 1, 1, "", "checkCalibrationProperty"], [201, 1, 1, "", "decomposeTrackingMarkers"], [201, 1, 1, "", "displayMotionCoordinateSystem"], [201, 1, 1, "", "displayMotionViconCoordinateSystem"], [201, 1, 1, "", "displayStaticCoordinateSystem"], [201, 1, 1, "", "getBodyPart"], [201, 1, 1, "", "getCentreOfMass"], [201, 1, 1, "", "getClinicalDescriptor"], [201, 1, 1, "", "getJoint"], [201, 1, 1, "", "getJointList"], [201, 1, 1, "", "getProperty"], [201, 1, 1, "", "getSegment"], [201, 1, 1, "", "getSegmentByIndex"], [201, 1, 1, "", "getSegmentIndex"], [201, 1, 1, "", "getSegmentList"], [201, 1, 1, "", "isCalibrationProperty"], [201, 1, 1, "", "isProperty"], [201, 1, 1, "", "removeJoint"], [201, 1, 1, "", "removeSegment"], [201, 1, 1, "", "setBodyPart"], [201, 1, 1, "", "setCalibrationProperty"], [201, 1, 1, "", "setCentreOfMass"], [201, 1, 1, "", "setClinicalDescriptor"], [201, 1, 1, "", "setCoordinateSystemDefinition"], [201, 1, 1, "", "setProperty"], [201, 1, 1, "", "setStaticFilename"], [201, 1, 1, "", "updateSegmentFromCopy"]], "pyCGM2.Model.model.Model6Dof": [[202, 1, 1, "", "__init__"], [202, 1, 1, "", "computeMotionAnatomicalFrame"], [202, 1, 1, "", "computeMotionTechnicalFrame"]], "pyCGM2.Model.model.Referential": [[203, 1, 1, "", "__init__"], [203, 1, 1, "", "addMotionFrame"], [203, 2, 1, "", "additionalInfos"], [203, 1, 1, "", "getAxisTrajectory"], [203, 1, 1, "", "getNodeTrajectory"], [203, 1, 1, "", "getOriginTrajectory"], [203, 2, 1, "", "motion"], [203, 2, 1, "", "relativeMatrixAnatomic"], [203, 1, 1, "", "setStaticFrame"], [203, 2, 1, "", "static"]], "pyCGM2.Model.model.Segment": [[204, 1, 1, "", "__init__"], [204, 1, 1, "", "addCalibrationMarkerLabel"], [204, 1, 1, "", "addExternalDeviceWrench"], [204, 1, 1, "", "addMarkerLabel"], [204, 1, 1, "", "addTechnicalReferential"], [204, 1, 1, "", "addTrackingMarkerLabel"], [204, 1, 1, "", "downSampleExternalDeviceWrenchs"], [204, 1, 1, "", "getAngularAcceleration"], [204, 1, 1, "", "getAngularVelocity"], [204, 1, 1, "", "getComAcceleration"], [204, 1, 1, "", "getComTrajectory"], [204, 1, 1, "", "getComVelocity"], [204, 1, 1, "", "getExistFrames"], [204, 1, 1, "", "getReferential"], [204, 1, 1, "", "isExternalDeviceWrenchsConnected"], [204, 1, 1, "", "removeTrackingMarker"], [204, 1, 1, "", "resetMarkerLabels"], [204, 1, 1, "", "setComPosition"], [204, 1, 1, "", "setExistFrames"], [204, 1, 1, "", "setInertiaTensor"], [204, 1, 1, "", "setLength"], [204, 1, 1, "", "setMass"], [204, 1, 1, "", "setRog"], [204, 1, 1, "", "zeroingExternalDevice"], [204, 1, 1, "", "zeroingProximalWrench"]], "pyCGM2.Model.model.TechnicalReferential": [[205, 1, 1, "", "__init__"], [205, 2, 1, "", "label"], [205, 2, 1, "", "relativeMatrixAnatomic"], [205, 1, 1, "", "setRelativeMatrixAnatomic"]], "pyCGM2.Model.modelDecorator": [[206, 0, 1, "", "AnkleCalibrationDecorator"], [207, 0, 1, "", "Cgm1ManualOffsets"], [208, 0, 1, "", "DecoratorModel"], [209, 0, 1, "", "HipJointCenterDecorator"], [210, 0, 1, "", "Kad"], [211, 0, 1, "", "KneeCalibrationDecorator"], [212, 3, 1, "", "VCMJointCentre"], [213, 3, 1, "", "bellRegression"], [214, 3, 1, "", "calibration2Dof"], [215, 3, 1, "", "chord"], [216, 3, 1, "", "davisRegression"], [217, 3, 1, "", "footJointCentreFromMet"], [218, 3, 1, "", "haraRegression"], [219, 3, 1, "", "harringtonRegression"], [220, 3, 1, "", "midPoint"], [221, 3, 1, "", "saraCalibration"]], "pyCGM2.Model.modelDecorator.AnkleCalibrationDecorator": [[206, 1, 1, "", "__init__"], [206, 1, 1, "", "fromAjcMarker"], [206, 1, 1, "", "midMaleolus"]], "pyCGM2.Model.modelDecorator.Cgm1ManualOffsets": [[207, 1, 1, "", "__init__"], [207, 1, 1, "", "compute"]], "pyCGM2.Model.modelDecorator.DecoratorModel": [[208, 1, 1, "", "__init__"]], "pyCGM2.Model.modelDecorator.HipJointCenterDecorator": [[209, 1, 1, "", "__init__"], [209, 1, 1, "", "bell"], [209, 1, 1, "", "custom"], [209, 1, 1, "", "davis"], [209, 1, 1, "", "fromHjcMarker"], [209, 1, 1, "", "greatTrochanterOffset"], [209, 1, 1, "", "hara"], [209, 1, 1, "", "harrington"]], "pyCGM2.Model.modelDecorator.Kad": [[210, 1, 1, "", "__init__"], [210, 1, 1, "", "compute"]], "pyCGM2.Model.modelDecorator.KneeCalibrationDecorator": [[211, 1, 1, "", "__init__"], [211, 1, 1, "", "calibrate2dof"], [211, 1, 1, "", "fromKjcMarker"], [211, 1, 1, "", "midCondyles"], [211, 1, 1, "", "midCondyles_KAD"], [211, 1, 1, "", "sara"]], "pyCGM2.Model.modelFilters": [[222, 0, 1, "", "CGMLowerlimbInverseDynamicProcedure"], [223, 0, 1, "", "CentreOfMassFilter"], [224, 0, 1, "", "CoordinateSystemDisplayFilter"], [225, 0, 1, "", "ForcePlateAssemblyFilter"], [226, 0, 1, "", "GeneralCalibrationProcedure"], [227, 0, 1, "", "GeneralCoordinateSystemProcedure"], [228, 0, 1, "", "GroundReactionForceAdapterFilter"], [229, 0, 1, "", "GroundReactionIntegrationFilter"], [230, 0, 1, "", "InverseDynamicFilter"], [231, 0, 1, "", "InverseDynamicProcedure"], [232, 0, 1, "", "JointPowerFilter"], [233, 0, 1, "", "ModelAbsoluteAnglesFilter"], [234, 0, 1, "", "ModelCalibrationFilter"], [235, 0, 1, "", "ModelCoordinateSystemProcedure"], [236, 0, 1, "", "ModelJCSFilter"], [237, 0, 1, "", "ModelMotionCorrectionFilter"], [238, 0, 1, "", "ModelMotionFilter"], [239, 0, 1, "", "ModelQualityFilter"], [240, 0, 1, "", "StaticCalibrationProcedure"]], "pyCGM2.Model.modelFilters.CGMLowerlimbInverseDynamicProcedure": [[222, 1, 1, "", "__init__"], [222, 1, 1, "", "compute"], [222, 1, 1, "", "computeSegmental"]], "pyCGM2.Model.modelFilters.CentreOfMassFilter": [[223, 1, 1, "", "__init__"], [223, 1, 1, "", "compute"]], "pyCGM2.Model.modelFilters.CoordinateSystemDisplayFilter": [[224, 1, 1, "", "__init__"], [224, 1, 1, "", "display"], [224, 1, 1, "", "setStatic"]], "pyCGM2.Model.modelFilters.ForcePlateAssemblyFilter": [[225, 1, 1, "", "__init__"], [225, 1, 1, "", "compute"]], "pyCGM2.Model.modelFilters.GeneralCalibrationProcedure": [[226, 1, 1, "", "__init__"], [226, 1, 1, "", "setAnatomicalDefinition"], [226, 1, 1, "", "setDefinition"]], "pyCGM2.Model.modelFilters.GeneralCoordinateSystemProcedure": [[227, 1, 1, "", "__init__"], [227, 2, 1, "", "definitions"], [227, 1, 1, "", "setDefinition"]], "pyCGM2.Model.modelFilters.GroundReactionForceAdapterFilter": [[228, 1, 1, "", "__init__"], [228, 1, 1, "", "compute"]], "pyCGM2.Model.modelFilters.GroundReactionIntegrationFilter": [[229, 1, 1, "", "__init__"], [229, 1, 1, "", "compute"]], "pyCGM2.Model.modelFilters.InverseDynamicFilter": [[230, 1, 1, "", "__init__"], [230, 1, 1, "", "compute"]], "pyCGM2.Model.modelFilters.InverseDynamicProcedure": [[231, 1, 1, "", "__init__"]], "pyCGM2.Model.modelFilters.JointPowerFilter": [[232, 1, 1, "", "__init__"], [232, 1, 1, "", "compute"]], "pyCGM2.Model.modelFilters.ModelAbsoluteAnglesFilter": [[233, 1, 1, "", "__init__"], [233, 1, 1, "", "compute"]], "pyCGM2.Model.modelFilters.ModelCalibrationFilter": [[234, 1, 1, "", "__init__"], [234, 1, 1, "", "compute"], [234, 1, 1, "", "setBoolOption"], [234, 1, 1, "", "setNoAnatomicalCalibration"], [234, 1, 1, "", "setOption"]], "pyCGM2.Model.modelFilters.ModelCoordinateSystemProcedure": [[235, 1, 1, "", "__init__"], [235, 2, 1, "", "definitions"]], "pyCGM2.Model.modelFilters.ModelJCSFilter": [[236, 1, 1, "", "__init__"], [236, 1, 1, "", "compute"], [236, 2, 1, "", "m_aqui"], [236, 2, 1, "", "m_fixEuler"], [236, 2, 1, "", "m_model"], [236, 1, 1, "", "setFixEuler"]], "pyCGM2.Model.modelFilters.ModelMotionCorrectionFilter": [[237, 1, 1, "", "__init__"], [237, 1, 1, "", "correct"]], "pyCGM2.Model.modelFilters.ModelMotionFilter": [[238, 1, 1, "", "__init__"], [238, 1, 1, "", "compute"], [238, 1, 1, "", "segmentalCompute"], [238, 1, 1, "", "setBoolOption"], [238, 1, 1, "", "setNoAnatomicalMotion"], [238, 1, 1, "", "setOption"]], "pyCGM2.Model.modelFilters.ModelQualityFilter": [[239, 1, 1, "", "__init__"], [239, 1, 1, "", "run"]], "pyCGM2.Model.modelFilters.StaticCalibrationProcedure": [[240, 1, 1, "", "__init__"]], "pyCGM2.Nexus.Devices": [[246, 0, 1, "", "AnalogDevice"], [247, 0, 1, "", "Channel"], [248, 0, 1, "", "Device"], [249, 0, 1, "", "ForcePlate"]], "pyCGM2.Nexus.Devices.AnalogDevice": [[246, 1, 1, "", "__init__"], [246, 2, 1, "", "channels"], [246, 1, 1, "", "getChannels"], [246, 1, 1, "", "getUnit"]], "pyCGM2.Nexus.Devices.Channel": [[247, 1, 1, "", "__init__"], [247, 2, 1, "", "description"], [247, 1, 1, "", "getDescription"], [247, 1, 1, "", "getLabel"], [247, 1, 1, "", "getUnit"], [247, 1, 1, "", "getValues"], [247, 2, 1, "", "label"], [247, 2, 1, "", "unit"], [247, 2, 1, "", "values"]], "pyCGM2.Nexus.Devices.Device": [[248, 2, 1, "", "NEXUS"], [248, 1, 1, "", "__init__"], [248, 1, 1, "", "getDeviceFrequency"], [248, 1, 1, "", "getDeviceName"], [248, 1, 1, "", "getOutputNames"], [248, 2, 1, "", "id"]], "pyCGM2.Nexus.Devices.ForcePlate": [[249, 1, 1, "", "__init__"], [249, 2, 1, "", "forcePlateInfo"], [249, 1, 1, "", "getContext"], [249, 1, 1, "", "getCorners"], [249, 1, 1, "", "getDescription"], [249, 1, 1, "", "getForceUnit"], [249, 1, 1, "", "getGlobalCoP"], [249, 1, 1, "", "getGlobalForce"], [249, 1, 1, "", "getGlobalMoment"], [249, 1, 1, "", "getLocalOrigin"], [249, 1, 1, "", "getLocalReactionForce"], [249, 1, 1, "", "getLocalReactionMoment"], [249, 1, 1, "", "getMomentUnit"], [249, 1, 1, "", "getOrientation"], [249, 1, 1, "", "getOrigin"], [249, 1, 1, "", "getPhysicalOrigin"]], "pyCGM2.Nexus.eclipse": [[250, 0, 1, "", "EnfReader"], [251, 0, 1, "", "PatientEnfReader"], [252, 0, 1, "", "SessionEnfReader"], [253, 0, 1, "", "TrialEnfReader"], [254, 3, 1, "", "cleanEnf"], [255, 3, 1, "", "generateEmptyENF"], [256, 3, 1, "", "getCurrentMarkedEnfs"], [257, 3, 1, "", "getCurrentMarkedNodes"], [258, 3, 1, "", "getEnfFiles"]], "pyCGM2.Nexus.eclipse.EnfReader": [[250, 1, 1, "", "__init__"], [250, 1, 1, "", "getFile"], [250, 1, 1, "", "getPath"], [250, 1, 1, "", "getSection"], [250, 2, 1, "", "m_config"], [250, 2, 1, "", "m_file"], [250, 2, 1, "", "m_path"]], "pyCGM2.Nexus.eclipse.PatientEnfReader": [[251, 1, 1, "", "__init__"], [251, 1, 1, "", "get"], [251, 1, 1, "", "getPatientInfos"], [251, 1, 1, "", "save"], [251, 1, 1, "", "set"]], "pyCGM2.Nexus.eclipse.SessionEnfReader": [[252, 1, 1, "", "__init__"], [252, 1, 1, "", "get"], [252, 1, 1, "", "getSessionInfos"], [252, 1, 1, "", "save"], [252, 1, 1, "", "set"]], "pyCGM2.Nexus.eclipse.TrialEnfReader": [[253, 1, 1, "", "__init__"], [253, 1, 1, "", "get"], [253, 1, 1, "", "getC3d"], [253, 1, 1, "", "getForcePlateAssigment"], [253, 1, 1, "", "getTrialInfos"], [253, 1, 1, "", "isC3dExist"], [253, 1, 1, "", "save"], [253, 1, 1, "", "set"], [253, 1, 1, "", "setForcePlates"]], "pyCGM2.Nexus.nexusFilters": [[259, 0, 1, "", "NexusConstructAcquisitionFilter"], [260, 0, 1, "", "NexusModelFilter"]], "pyCGM2.Nexus.nexusFilters.NexusConstructAcquisitionFilter": [[259, 1, 1, "", "__init__"], [259, 1, 1, "", "appendAnalogs"], [259, 1, 1, "", "appendEvents"], [259, 1, 1, "", "appendForcePlates"], [259, 1, 1, "", "appendMarkers"], [259, 1, 1, "", "appendModelOutputs"], [259, 1, 1, "", "build"], [259, 1, 1, "", "exportC3d"], [259, 1, 1, "", "initMetaData"]], "pyCGM2.Nexus.nexusFilters.NexusModelFilter": [[260, 1, 1, "", "__init__"], [260, 1, 1, "", "run"]], "pyCGM2.Nexus.nexusTools": [[261, 3, 1, "", "appendAnalysisParameters"], [262, 3, 1, "", "appendAngleFromAcq"], [263, 3, 1, "", "appendBones"], [264, 3, 1, "", "appendBtkScalarFromAcq"], [265, 3, 1, "", "appendForceFromAcq"], [266, 3, 1, "", "appendModelledMarkerFromAcq"], [267, 3, 1, "", "appendMomentFromAcq"], [268, 3, 1, "", "appendPowerFromAcq"], [269, 3, 1, "", "checkActivatedSubject"], [270, 3, 1, "", "createEvents"], [271, 3, 1, "", "createGeneralEvents"], [272, 3, 1, "", "getActiveSubject"], [273, 3, 1, "", "getForcePlateAssignment"], [274, 3, 1, "", "setTrajectoryFromAcq"], [275, 3, 1, "", "setTrajectoryFromArray"]], "pyCGM2.Nexus.nexusUtils": [[276, 3, 1, "", "getNexusSubjectMp"], [277, 3, 1, "", "updateNexusSubjectMp"]], "pyCGM2.Processing.C3dManager.c3dManager": [[283, 0, 1, "", "C3dManager"]], "pyCGM2.Processing.C3dManager.c3dManager.C3dManager": [[283, 1, 1, "", "__init__"]], "pyCGM2.Processing.C3dManager.c3dManagerFilters": [[284, 0, 1, "", "C3dManagerFilter"]], "pyCGM2.Processing.C3dManager.c3dManagerFilters.C3dManagerFilter": [[284, 1, 1, "", "__init__"], [284, 1, 1, "", "enableEmg"], [284, 1, 1, "", "enableKinematic"], [284, 1, 1, "", "enableKinetic"], [284, 1, 1, "", "enableMuscleDynamic"], [284, 1, 1, "", "enableMuscleGeometry"], [284, 1, 1, "", "enableSpatioTemporal"], [284, 1, 1, "", "generate"]], "pyCGM2.Processing.C3dManager.c3dManagerProcedures": [[285, 0, 1, "", "C3dManagerProcedure"], [286, 0, 1, "", "DistinctC3dSetProcedure"], [287, 0, 1, "", "UniqueBtkAcqSetProcedure"], [288, 0, 1, "", "UniqueC3dSetProcedure"]], "pyCGM2.Processing.C3dManager.c3dManagerProcedures.C3dManagerProcedure": [[285, 1, 1, "", "__init__"]], "pyCGM2.Processing.C3dManager.c3dManagerProcedures.DistinctC3dSetProcedure": [[286, 1, 1, "", "__init__"], [286, 1, 1, "", "generate"]], "pyCGM2.Processing.C3dManager.c3dManagerProcedures.UniqueBtkAcqSetProcedure": [[287, 1, 1, "", "__init__"], [287, 1, 1, "", "generate"]], "pyCGM2.Processing.C3dManager.c3dManagerProcedures.UniqueC3dSetProcedure": [[288, 1, 1, "", "__init__"], [288, 1, 1, "", "generate"]], "pyCGM2.Processing.Classification.classificationFilters": [[289, 0, 1, "", "ClassificationFilter"]], "pyCGM2.Processing.Classification.classificationFilters.ClassificationFilter": [[289, 1, 1, "", "__init__"], [289, 1, 1, "", "run"]], "pyCGM2.Processing.Classification.classificationProcedures": [[290, 0, 1, "", "ClassificationProcedure"], [291, 0, 1, "", "PFKEprocedure"]], "pyCGM2.Processing.Classification.classificationProcedures.ClassificationProcedure": [[290, 1, 1, "", "__init__"]], "pyCGM2.Processing.Classification.classificationProcedures.PFKEprocedure": [[291, 1, 1, "", "__init__"], [291, 1, 1, "", "plot"], [291, 1, 1, "", "run"]], "pyCGM2.Processing.DiscretePoints.discretePointFilters": [[292, 0, 1, "", "DiscretePointsFilter"]], "pyCGM2.Processing.DiscretePoints.discretePointFilters.DiscretePointsFilter": [[292, 1, 1, "", "__init__"], [292, 1, 1, "", "getOutput"], [292, 1, 1, "", "setCondExpInf"], [292, 1, 1, "", "setModelInfo"], [292, 1, 1, "", "setSubjInfo"]], "pyCGM2.Processing.DiscretePoints.discretePointProcedures": [[293, 0, 1, "", "BenedettiProcedure"], [294, 0, 1, "", "DiscretePointProcedure"], [295, 0, 1, "", "GoldbergProcedure"], [296, 0, 1, "", "MaxMinProcedure"]], "pyCGM2.Processing.DiscretePoints.discretePointProcedures.BenedettiProcedure": [[293, 1, 1, "", "__init__"], [293, 1, 1, "", "detect"]], "pyCGM2.Processing.DiscretePoints.discretePointProcedures.DiscretePointProcedure": [[294, 1, 1, "", "__init__"]], "pyCGM2.Processing.DiscretePoints.discretePointProcedures.GoldbergProcedure": [[295, 1, 1, "", "__init__"], [295, 1, 1, "", "detect"]], "pyCGM2.Processing.DiscretePoints.discretePointProcedures.MaxMinProcedure": [[296, 1, 1, "", "__init__"], [296, 1, 1, "", "detect"]], "pyCGM2.Processing.JointPatterns.jointPatternFilters": [[297, 0, 1, "", "JointPatternFilter"]], "pyCGM2.Processing.JointPatterns.jointPatternFilters.JointPatternFilter": [[297, 1, 1, "", "__init__"], [297, 1, 1, "", "getPatterns"], [297, 1, 1, "", "getValues"], [297, 1, 1, "", "interpretCriteria"]], "pyCGM2.Processing.JointPatterns.jointPatternProcedures": [[298, 0, 1, "", "JointPatternProcedure"], [299, 0, 1, "", "XlsJointPatternProcedure"]], "pyCGM2.Processing.JointPatterns.jointPatternProcedures.JointPatternProcedure": [[298, 1, 1, "", "__init__"]], "pyCGM2.Processing.JointPatterns.jointPatternProcedures.XlsJointPatternProcedure": [[299, 1, 1, "", "__init__"], [299, 1, 1, "", "detectPattern"], [299, 1, 1, "", "detectValue"]], "pyCGM2.Processing.ProgressionFrame.progressionFrameFilters": [[300, 0, 1, "", "ProgressionFrameFilter"]], "pyCGM2.Processing.ProgressionFrame.progressionFrameFilters.ProgressionFrameFilter": [[300, 1, 1, "", "__init__"], [300, 1, 1, "", "compute"]], "pyCGM2.Processing.ProgressionFrame.progressionFrameProcedures": [[301, 0, 1, "", "PelvisProgressionFrameProcedure"], [302, 0, 1, "", "PointProgressionFrameProcedure"], [303, 0, 1, "", "ProgressionFrameProcedure"], [304, 0, 1, "", "ThoraxProgressionFrameProcedure"]], "pyCGM2.Processing.ProgressionFrame.progressionFrameProcedures.PelvisProgressionFrameProcedure": [[301, 1, 1, "", "__init__"], [301, 1, 1, "", "compute"]], "pyCGM2.Processing.ProgressionFrame.progressionFrameProcedures.PointProgressionFrameProcedure": [[302, 1, 1, "", "__init__"], [302, 1, 1, "", "compute"]], "pyCGM2.Processing.ProgressionFrame.progressionFrameProcedures.ProgressionFrameProcedure": [[303, 1, 1, "", "__init__"]], "pyCGM2.Processing.ProgressionFrame.progressionFrameProcedures.ThoraxProgressionFrameProcedure": [[304, 1, 1, "", "__init__"], [304, 1, 1, "", "compute"]], "pyCGM2.Processing.Representative.representativeFilters": [[305, 0, 1, "", "RepresentativeCycleFilter"]], "pyCGM2.Processing.Representative.representativeFilters.RepresentativeCycleFilter": [[305, 1, 1, "", "__init__"], [305, 2, 1, "", "m_analysis"], [305, 2, 1, "", "m_procedure"], [305, 1, 1, "", "run"]], "pyCGM2.Processing.Representative.representativeProcedures": [[306, 0, 1, "", "RepresentativeProcedure"], [307, 0, 1, "", "Sangeux2015Procedure"]], "pyCGM2.Processing.Representative.representativeProcedures.RepresentativeProcedure": [[306, 1, 1, "", "__init__"]], "pyCGM2.Processing.Representative.representativeProcedures.Sangeux2015Procedure": [[307, 1, 1, "", "__init__"], [307, 1, 1, "", "setData"], [307, 1, 1, "", "setDefaultData"]], "pyCGM2.Processing.Scores.scoreFilters": [[308, 0, 1, "", "ScoreFilter"]], "pyCGM2.Processing.Scores.scoreFilters.ScoreFilter": [[308, 1, 1, "", "__init__"], [308, 1, 1, "", "compute"]], "pyCGM2.Processing.Scores.scoreProcedures": [[309, 0, 1, "", "CGM1_GPS"], [310, 0, 1, "", "ScoreProcedure"]], "pyCGM2.Processing.Scores.scoreProcedures.CGM1_GPS": [[309, 1, 1, "", "__init__"]], "pyCGM2.Processing.Scores.scoreProcedures.ScoreProcedure": [[310, 1, 1, "", "__init__"]], "pyCGM2.Processing.analysis": [[311, 0, 1, "", "AbstractBuilder"], [312, 0, 1, "", "Analysis"], [313, 0, 1, "", "AnalysisBuilder"], [314, 0, 1, "", "AnalysisFilter"], [315, 0, 1, "", "AnalysisStructure"], [316, 0, 1, "", "GaitAnalysisBuilder"]], "pyCGM2.Processing.analysis.AbstractBuilder": [[311, 1, 1, "", "__init__"]], "pyCGM2.Processing.analysis.Analysis": [[312, 1, 1, "", "__init__"], [312, 2, 1, "", "coactivations"], [312, 2, 1, "", "emgInfo"], [312, 2, 1, "", "emgStats"], [312, 2, 1, "", "experimentalInfo"], [312, 1, 1, "", "getKinematicCycleNumbers"], [312, 2, 1, "", "gps"], [312, 2, 1, "", "gvs"], [312, 2, 1, "", "kinematicInfo"], [312, 2, 1, "", "kinematicStats"], [312, 2, 1, "", "kineticInfo"], [312, 2, 1, "", "kineticStats"], [312, 2, 1, "", "modelInfo"], [312, 2, 1, "", "muscleDynamicInfo"], [312, 2, 1, "", "muscleDynamicStats"], [312, 2, 1, "", "muscleGeometryInfo"], [312, 2, 1, "", "muscleGeometryStats"], [312, 2, 1, "", "scoreInfo"], [312, 1, 1, "", "setCoactivation"], [312, 1, 1, "", "setEmg"], [312, 1, 1, "", "setEmgInfo"], [312, 1, 1, "", "setExperimentalInfo"], [312, 1, 1, "", "setGps"], [312, 1, 1, "", "setGvs"], [312, 1, 1, "", "setKinematic"], [312, 1, 1, "", "setKinematicInfo"], [312, 1, 1, "", "setKinetic"], [312, 1, 1, "", "setKineticInfo"], [312, 1, 1, "", "setModelInfo"], [312, 1, 1, "", "setMuscleDynamicInfo"], [312, 1, 1, "", "setMuscleGeometry"], [312, 1, 1, "", "setMuscleGeometryInfo"], [312, 1, 1, "", "setScoreInfo"], [312, 1, 1, "", "setStp"], [312, 1, 1, "", "setStpInfo"], [312, 1, 1, "", "setSubjectInfo"], [312, 2, 1, "", "stpInfo"], [312, 2, 1, "", "stpStats"], [312, 2, 1, "", "subjectInfo"]], "pyCGM2.Processing.analysis.AnalysisBuilder": [[313, 1, 1, "", "__init__"], [313, 1, 1, "", "computeEmgEnvelopes"], [313, 1, 1, "", "computeKinematics"], [313, 1, 1, "", "computeKinetics"], [313, 1, 1, "", "computeMuscleDynamic"], [313, 1, 1, "", "computeMuscleGeometry"]], "pyCGM2.Processing.analysis.AnalysisFilter": [[314, 1, 1, "", "__init__"], [314, 1, 1, "", "build"], [314, 1, 1, "", "setBuilder"], [314, 1, 1, "", "setInfo"]], "pyCGM2.Processing.analysis.AnalysisStructure": [[315, 1, 1, "", "__init__"], [315, 2, 1, "", "data"], [315, 2, 1, "", "optionalData"], [315, 2, 1, "", "pst"]], "pyCGM2.Processing.analysis.GaitAnalysisBuilder": [[316, 1, 1, "", "__init__"], [316, 1, 1, "", "computeEmgEnvelopes"], [316, 1, 1, "", "computeKinematics"], [316, 1, 1, "", "computeKinetics"], [316, 1, 1, "", "computeMuscleDynamic"], [316, 1, 1, "", "computeMuscleGeometry"], [316, 1, 1, "", "computeSpatioTemporel"]], "pyCGM2.Processing.analysisHandler": [[317, 3, 1, "", "getAnalysisSection"], [318, 3, 1, "", "getNumberOfCycle"], [319, 3, 1, "", "getPhases"], [320, 3, 1, "", "getValues"], [321, 3, 1, "", "isKeyExist"], [322, 3, 1, "", "normalizedMuscleLength_withPose"]], "pyCGM2.Processing.cycle": [[323, 0, 1, "", "Cycle"], [324, 0, 1, "", "Cycles"], [325, 0, 1, "", "CyclesBuilder"], [326, 0, 1, "", "CyclesFilter"], [327, 0, 1, "", "GaitCycle"], [328, 0, 1, "", "GaitCyclesBuilder"], [329, 3, 1, "", "analog_descriptiveStats"], [330, 3, 1, "", "construcGaitCycle"], [331, 3, 1, "", "point_descriptiveStats"], [332, 3, 1, "", "spatioTemporelParameter_descriptiveStats"]], "pyCGM2.Processing.cycle.Cycle": [[323, 1, 1, "", "__init__"], [323, 1, 1, "", "getAnalogTimeSequenceData"], [323, 1, 1, "", "getAnalogTimeSequenceDataNormalized"], [323, 1, 1, "", "getEvents"], [323, 1, 1, "", "getPointTimeSequenceData"], [323, 1, 1, "", "getPointTimeSequenceDataNormalized"], [323, 1, 1, "", "setEnableFlag"]], "pyCGM2.Processing.cycle.Cycles": [[324, 1, 1, "", "__init__"]], "pyCGM2.Processing.cycle.CyclesBuilder": [[325, 1, 1, "", "__init__"], [325, 1, 1, "", "getEmg"], [325, 1, 1, "", "getKinematics"], [325, 1, 1, "", "getKinetics"], [325, 1, 1, "", "getMuscleDynamic"], [325, 1, 1, "", "getMuscleGeometry"], [325, 1, 1, "", "getSpatioTemporal"]], "pyCGM2.Processing.cycle.CyclesFilter": [[326, 1, 1, "", "__init__"], [326, 1, 1, "", "build"], [326, 1, 1, "", "setBuilder"]], "pyCGM2.Processing.cycle.GaitCycle": [[327, 1, 1, "", "__init__"], [327, 1, 1, "", "getSpatioTemporalParameter"]], "pyCGM2.Processing.cycle.GaitCyclesBuilder": [[328, 1, 1, "", "__init__"], [328, 1, 1, "", "getEmg"], [328, 1, 1, "", "getKinematics"], [328, 1, 1, "", "getKinetics"], [328, 1, 1, "", "getMuscleDynamic"], [328, 1, 1, "", "getMuscleGeometry"], [328, 1, 1, "", "getSpatioTemporal"]], "pyCGM2.Processing.exporter": [[333, 0, 1, "", "AnalysisExportFilter"], [334, 0, 1, "", "XlsAnalysisExportFilter"], [335, 0, 1, "", "XlsExportDataFrameFilter"]], "pyCGM2.Processing.exporter.AnalysisExportFilter": [[333, 1, 1, "", "__init__"], [333, 2, 1, "", "analysis"], [333, 1, 1, "", "export"], [333, 1, 1, "", "setAnalysisInstance"]], "pyCGM2.Processing.exporter.XlsAnalysisExportFilter": [[334, 1, 1, "", "__init__"], [334, 2, 1, "", "analysis"], [334, 1, 1, "", "export"], [334, 1, 1, "", "setAnalysisInstance"]], "pyCGM2.Processing.exporter.XlsExportDataFrameFilter": [[335, 1, 1, "", "__init__"], [335, 2, 1, "", "dataframes"], [335, 1, 1, "", "export"], [335, 1, 1, "", "setDataFrames"]], "pyCGM2.QTM.qtmTools": [[342, 3, 1, "", "SubjectMp"], [343, 3, 1, "", "detectMeasurementType"], [344, 3, 1, "", "findDynamic"], [345, 3, 1, "", "findKneeCalibration"], [346, 3, 1, "", "findStatic"], [347, 3, 1, "", "getFilename"], [348, 3, 1, "", "getForcePlateAssigment"], [349, 3, 1, "", "getKneeFunctionCalibMethod"], [350, 3, 1, "", "get_creation_date"], [351, 3, 1, "", "get_modelled_trials"], [352, 3, 1, "", "isType"]], "pyCGM2.Report.Viewers.comparisonPlotViewers": [[354, 0, 1, "", "KinematicsPlotComparisonViewer"], [355, 0, 1, "", "KineticsPlotComparisonViewer"]], "pyCGM2.Report.Viewers.comparisonPlotViewers.KinematicsPlotComparisonViewer": [[354, 1, 1, "", "__init__"], [354, 1, 1, "", "plotPanel"], [354, 1, 1, "", "setConcretePlotFunction"], [354, 1, 1, "", "setNormativeDataset"]], "pyCGM2.Report.Viewers.comparisonPlotViewers.KineticsPlotComparisonViewer": [[355, 1, 1, "", "__init__"], [355, 1, 1, "", "plotPanel"], [355, 1, 1, "", "setConcretePlotFunction"], [355, 1, 1, "", "setNormativeDataset"]], "pyCGM2.Report.Viewers.customPlotViewers": [[356, 0, 1, "", "SaggitalGagePlotViewer"]], "pyCGM2.Report.Viewers.customPlotViewers.SaggitalGagePlotViewer": [[356, 1, 1, "", "__init__"], [356, 1, 1, "", "plotPanel"], [356, 1, 1, "", "setNormativeDataset"]], "pyCGM2.Report.Viewers.emgPlotViewers": [[357, 0, 1, "", "CoactivationEmgPlotViewer"], [358, 0, 1, "", "EnvEmgGaitPlotPanelViewer"], [359, 0, 1, "", "MultipleAnalysis_EnvEmgPlotPanelViewer"], [360, 0, 1, "", "TemporalEmgPlotViewer"]], "pyCGM2.Report.Viewers.emgPlotViewers.CoactivationEmgPlotViewer": [[357, 1, 1, "", "__init__"], [357, 1, 1, "", "plotPanel"], [357, 1, 1, "", "setConcretePlotFunction"], [357, 1, 1, "", "setContext"], [357, 1, 1, "", "setEmgs"], [357, 1, 1, "", "setMuscles"], [357, 1, 1, "", "setNormativeDataset"]], "pyCGM2.Report.Viewers.emgPlotViewers.EnvEmgGaitPlotPanelViewer": [[358, 1, 1, "", "__init__"], [358, 1, 1, "", "plotPanel"], [358, 1, 1, "", "selectEmgChannels"], [358, 1, 1, "", "setConcretePlotFunction"], [358, 1, 1, "", "setEmgManager"], [358, 1, 1, "", "setNormalizedEmgFlag"], [358, 1, 1, "", "setNormativeDataset"]], "pyCGM2.Report.Viewers.emgPlotViewers.MultipleAnalysis_EnvEmgPlotPanelViewer": [[359, 1, 1, "", "__init__"], [359, 1, 1, "", "plotPanel"], [359, 1, 1, "", "selectEmgChannels"], [359, 1, 1, "", "setConcretePlotFunction"], [359, 1, 1, "", "setEmgManager"], [359, 1, 1, "", "setNormalizedEmgFlag"], [359, 1, 1, "", "setNormativeDataset"]], "pyCGM2.Report.Viewers.emgPlotViewers.TemporalEmgPlotViewer": [[360, 1, 1, "", "__init__"], [360, 1, 1, "", "ignoreNormalActivty"], [360, 1, 1, "", "plotPanel"], [360, 1, 1, "", "selectEmgChannels"], [360, 1, 1, "", "setEmgManager"], [360, 1, 1, "", "setEmgRectify"], [360, 1, 1, "", "setNormativeDataset"]], "pyCGM2.Report.Viewers.groundReactionPlotViewers": [[361, 0, 1, "", "NormalizedGaitGrfIntegrationPlotViewer"], [362, 0, 1, "", "NormalizedGaitMeanGrfIntegrationPlotViewer"], [363, 0, 1, "", "NormalizedGroundReactionForcePlotViewer"]], "pyCGM2.Report.Viewers.groundReactionPlotViewers.NormalizedGaitGrfIntegrationPlotViewer": [[361, 1, 1, "", "__init__"], [361, 1, 1, "", "plotPanel"], [361, 1, 1, "", "setConcretePlotFunction"], [361, 1, 1, "", "setNormativeDataset"]], "pyCGM2.Report.Viewers.groundReactionPlotViewers.NormalizedGaitMeanGrfIntegrationPlotViewer": [[362, 1, 1, "", "__init__"], [362, 1, 1, "", "plotPanel"], [362, 1, 1, "", "setNormativeDataset"]], "pyCGM2.Report.Viewers.groundReactionPlotViewers.NormalizedGroundReactionForcePlotViewer": [[363, 1, 1, "", "__init__"], [363, 1, 1, "", "plotPanel"], [363, 1, 1, "", "setConcretePlotFunction"], [363, 1, 1, "", "setNormativeDataset"]], "pyCGM2.Report.Viewers.musclePlotViewers": [[364, 0, 1, "", "MuscleNormalizedPlotPanelViewer"]], "pyCGM2.Report.Viewers.musclePlotViewers.MuscleNormalizedPlotPanelViewer": [[364, 1, 1, "", "__init__"], [364, 1, 1, "", "plotPanel"], [364, 1, 1, "", "setConcretePlotFunction"], [364, 1, 1, "", "setMuscleOutputType"], [364, 1, 1, "", "setMuscles"], [364, 1, 1, "", "setNormalizationSuffix"], [364, 1, 1, "", "setNormativeDataset"]], "pyCGM2.Report.Viewers.plotViewers": [[365, 0, 1, "", "GpsMapPlotViewer"], [366, 0, 1, "", "NormalizedKinematicsPlotViewer"], [367, 0, 1, "", "NormalizedKineticsPlotViewer"], [368, 0, 1, "", "PlotViewer"], [369, 0, 1, "", "SpatioTemporalPlotViewer"], [370, 0, 1, "", "TemporalKinematicsPlotViewer"], [371, 0, 1, "", "TemporalKineticsPlotViewer"]], "pyCGM2.Report.Viewers.plotViewers.GpsMapPlotViewer": [[365, 1, 1, "", "__init__"], [365, 1, 1, "", "plotPanel"]], "pyCGM2.Report.Viewers.plotViewers.NormalizedKinematicsPlotViewer": [[366, 1, 1, "", "__init__"], [366, 1, 1, "", "plotPanel"], [366, 1, 1, "", "setConcretePlotFunction"], [366, 1, 1, "", "setNormativeDataset"]], "pyCGM2.Report.Viewers.plotViewers.NormalizedKineticsPlotViewer": [[367, 1, 1, "", "__init__"], [367, 1, 1, "", "plotPanel"], [367, 1, 1, "", "setConcretePlotFunction"], [367, 1, 1, "", "setNormativeDataset"]], "pyCGM2.Report.Viewers.plotViewers.PlotViewer": [[368, 1, 1, "", "__init__"], [368, 1, 1, "", "plotPanel"], [368, 1, 1, "", "setAutomaticYlimits"], [368, 1, 1, "", "setNormativeData"]], "pyCGM2.Report.Viewers.plotViewers.SpatioTemporalPlotViewer": [[369, 1, 1, "", "__init__"], [369, 1, 1, "", "plotPanel"], [369, 1, 1, "", "setNormativeDataset"]], "pyCGM2.Report.Viewers.plotViewers.TemporalKinematicsPlotViewer": [[370, 1, 1, "", "__init__"], [370, 1, 1, "", "plotPanel"]], "pyCGM2.Report.Viewers.plotViewers.TemporalKineticsPlotViewer": [[371, 1, 1, "", "__init__"], [371, 1, 1, "", "plotPanel"]], "pyCGM2.Report.normativeDatasets": [[372, 0, 1, "", "NormalSTP"], [373, 0, 1, "", "NormativeData"]], "pyCGM2.Report.normativeDatasets.NormalSTP": [[372, 1, 1, "", "__init__"], [372, 2, 1, "", "data"]], "pyCGM2.Report.normativeDatasets.NormativeData": [[373, 1, 1, "", "__init__"], [373, 2, 1, "", "data"]], "pyCGM2.Report.plot": [[374, 3, 1, "", "addNormalActivationLayer"], [375, 3, 1, "", "addRectanglePatches"], [376, 3, 1, "", "addTemporalNormalActivationLayer"], [377, 3, 1, "", "consistencyPlot"], [378, 3, 1, "", "descriptivePlot"], [379, 3, 1, "", "gaitConsistencyPlot"], [380, 3, 1, "", "gaitDescriptivePlot"], [381, 3, 1, "", "gaitMeanPlot"], [382, 3, 1, "", "meanPlot"], [383, 3, 1, "", "stpHorizontalHistogram"], [384, 3, 1, "", "temporalPlot"]], "pyCGM2.Report.plotFilters": [[385, 0, 1, "", "PlottingFilter"]], "pyCGM2.Report.plotFilters.PlottingFilter": [[385, 2, 1, "", "__concretePlotViewer"], [385, 1, 1, "", "__init__"], [385, 1, 1, "", "displaySignificantDiffererence"], [385, 2, 1, "", "m_fileName"], [385, 2, 1, "", "m_format"], [385, 2, 1, "", "m_path"], [385, 2, 1, "", "m_title"], [385, 1, 1, "", "plot"], [385, 1, 1, "", "setAutomaticYlimits"], [385, 1, 1, "", "setExport"], [385, 1, 1, "", "setHorizontalLines"], [385, 1, 1, "", "setTitle"], [385, 1, 1, "", "setViewer"], [385, 1, 1, "", "setYlimits"]], "pyCGM2.Report.plotUtils": [[386, 3, 1, "", "colorContext"]], "pyCGM2.Signal.detector": [[390, 3, 1, "", "detectStart_fromThreshold"], [391, 3, 1, "", "detect_cusum"], [392, 3, 1, "", "detect_onset"], [393, 3, 1, "", "detect_peaks"], [394, 3, 1, "", "detect_seq"]], "pyCGM2.Signal.signal_processing": [[395, 3, 1, "", "arrayLowPassFiltering"], [396, 3, 1, "", "downsample"], [397, 3, 1, "", "enveloppe"], [398, 3, 1, "", "forcePlateFiltering"], [399, 3, 1, "", "highPass"], [400, 3, 1, "", "markerFiltering"], [401, 3, 1, "", "rectify"], [402, 3, 1, "", "remove50hz"]], "pyCGM2.Tools.btkTools": [[404, 3, 1, "", "GetAnalogNames"], [405, 3, 1, "", "GetMarkerNames"], [406, 3, 1, "", "_getSectionFromMd"], [407, 3, 1, "", "applyOnValidFrames"], [408, 3, 1, "", "applyRotation"], [409, 3, 1, "", "applyTranslators"], [410, 3, 1, "", "applyValidFramesOnOutput"], [411, 3, 1, "", "automaticKineticDetection"], [412, 3, 1, "", "btkAnalogToKtkTimeseries"], [413, 3, 1, "", "btkPointToKtkTimeseries"], [414, 3, 1, "", "buildTrials"], [415, 3, 1, "", "calculateAngleFrom3points"], [416, 3, 1, "", "changeSubjectName"], [417, 3, 1, "", "checkForcePlateExist"], [418, 3, 1, "", "checkGap"], [419, 3, 1, "", "checkMarkers"], [420, 3, 1, "", "checkMetadata"], [421, 3, 1, "", "checkMultipleSubject"], [422, 3, 1, "", "cleanAcq"], [423, 3, 1, "", "clearEvents"], [424, 3, 1, "", "clearPoints"], [425, 3, 1, "", "constructMarker"], [426, 3, 1, "", "constructPhantom"], [427, 3, 1, "", "createPhantoms"], [428, 3, 1, "", "deleteContextEvents"], [429, 3, 1, "", "findMarkerGap"], [430, 3, 1, "", "findValidFrames"], [431, 3, 1, "", "getAllParamAnalysis"], [432, 3, 1, "", "getForcePlateWrench"], [433, 3, 1, "", "getFrameBoundaries"], [434, 3, 1, "", "getLabelsFromScalar"], [435, 3, 1, "", "getNumberOfForcePlate"], [436, 3, 1, "", "getNumberOfModelOutputs"], [437, 3, 1, "", "getParamAnalysis"], [438, 3, 1, "", "getScalar"], [439, 3, 1, "", "getStartEndEvents"], [440, 3, 1, "", "getValidFrames"], [441, 3, 1, "", "getVisibleMarkersAtFrame"], [442, 3, 1, "", "hasChild"], [443, 3, 1, "", "isAnalogExist"], [444, 3, 1, "", "isEventExist"], [445, 3, 1, "", "isGap"], [446, 3, 1, "", "isKineticFlag"], [447, 3, 1, "", "isPhantom"], [448, 3, 1, "", "isPointExist"], [449, 3, 1, "", "isPointsExist"], [450, 3, 1, "", "keepAndDeleteOtherPoints"], [451, 3, 1, "", "markerUnitConverter"], [452, 3, 1, "", "markersToArray"], [453, 3, 1, "", "modifyEventSubject"], [454, 3, 1, "", "modifySubject"], [455, 3, 1, "", "renameEvent"], [456, 3, 1, "", "smartAppendAnalog"], [457, 3, 1, "", "smartAppendParamAnalysis"], [458, 3, 1, "", "smartAppendPoint"], [459, 3, 1, "", "smartCreateEvent"], [460, 3, 1, "", "smartGetEvents"], [461, 3, 1, "", "smartGetMetadata"], [462, 3, 1, "", "smartReader"], [463, 3, 1, "", "smartSetMetadata"], [464, 3, 1, "", "smartWriter"], [465, 3, 1, "", "sortedEvents"]], "pyCGM2.Tools.opensimTools": [[466, 3, 1, "", "export_CgmToMot"], [467, 3, 1, "", "footReactionMotFile"], [468, 3, 1, "", "mot2pointValues"], [469, 3, 1, "", "smartGetValues"], [470, 3, 1, "", "sto2pointValues"], [471, 3, 1, "", "transformMarker_ToOsimReferencial"]], "pyCGM2.Utils.files": [[473, 3, 1, "", "concatenateExcelFiles"], [474, 3, 1, "", "copyPaste"], [475, 3, 1, "", "copyPasteDirectory"], [476, 3, 1, "", "copySessionFolder"], [477, 3, 1, "", "createDir"], [478, 3, 1, "", "deleteDirectory"], [479, 3, 1, "", "getC3dFiles"], [480, 3, 1, "", "getDirname"], [481, 3, 1, "", "getDirs"], [482, 3, 1, "", "getFileCreationDate"], [483, 3, 1, "", "getFilename"], [484, 3, 1, "", "getFiles"], [485, 3, 1, "", "getIKweightSet"], [486, 3, 1, "", "getMp"], [487, 3, 1, "", "getMpFileContent"], [488, 3, 1, "", "getTranslators"], [489, 3, 1, "", "is_json"], [490, 3, 1, "", "is_yaml"], [491, 3, 1, "", "loadAnalysis"], [492, 3, 1, "", "loadModel"], [493, 3, 1, "", "loadModelSettings"], [494, 3, 1, "", "loadMp"], [495, 3, 1, "", "loadSettings"], [496, 3, 1, "", "openFile"], [497, 3, 1, "", "openJson"], [498, 3, 1, "", "openPickleFile"], [499, 3, 1, "", "openYaml"], [500, 3, 1, "", "readContent"], [501, 3, 1, "", "readXml"], [502, 3, 1, "", "renameFile"], [503, 3, 1, "", "saveAnalysis"], [504, 3, 1, "", "saveJson"], [505, 3, 1, "", "saveModel"], [506, 3, 1, "", "saveMp"], [507, 3, 1, "", "savePickleFile"], [508, 3, 1, "", "saveYaml"], [509, 3, 1, "", "try_as"]], "pyCGM2.Utils.utils": [[510, 3, 1, "", "checkSimilarElement"], [511, 3, 1, "", "getSimilarElement"], [512, 3, 1, "", "homogeneizeArguments"], [513, 3, 1, "", "isInRange"], [514, 3, 1, "", "str"], [515, 3, 1, "", "toBool"]], "pyCGM2.enums": [[84, 0, 1, "", "AnalysisSection"], [85, 0, 1, "", "BodyPart"], [86, 0, 1, "", "BodyPartPlot"], [87, 0, 1, "", "DataType"], [88, 0, 1, "", "EclipseType"], [89, 0, 1, "", "EmgAmplitudeNormalization"], [90, 0, 1, "", "HarringtonPredictor"], [91, 0, 1, "", "JointCalibrationMethod"], [92, 0, 1, "", "MomentProjection"], [93, 0, 1, "", "SegmentSide"], [94, 3, 1, "", "enumFromtext"], [95, 0, 1, "", "motionMethod"]], "pyCGM2.enums.AnalysisSection": [[84, 2, 1, "", "Emg"], [84, 2, 1, "", "Kinematic"], [84, 2, 1, "", "Kinetic"], [84, 1, 1, "", "__init__"]], "pyCGM2.enums.BodyPart": [[85, 2, 1, "", "FullBody"], [85, 2, 1, "", "LowerLimb"], [85, 2, 1, "", "LowerLimbTrunk"], [85, 2, 1, "", "UpperLimb"], [85, 1, 1, "", "__init__"]], "pyCGM2.enums.BodyPartPlot": [[86, 2, 1, "", "LowerLimb"], [86, 2, 1, "", "Trunk"], [86, 2, 1, "", "UpperLimb"], [86, 1, 1, "", "__init__"]], "pyCGM2.enums.DataType": [[87, 2, 1, "", "Angle"], [87, 2, 1, "", "Force"], [87, 2, 1, "", "Marker"], [87, 2, 1, "", "Moment"], [87, 2, 1, "", "Power"], [87, 2, 1, "", "Segment"], [87, 1, 1, "", "__init__"]], "pyCGM2.enums.EclipseType": [[88, 2, 1, "", "Patient"], [88, 2, 1, "", "Session"], [88, 2, 1, "", "Trial"], [88, 1, 1, "", "__init__"]], "pyCGM2.enums.EmgAmplitudeNormalization": [[89, 2, 1, "", "MaxMax"], [89, 2, 1, "", "MeanMax"], [89, 2, 1, "", "MedianMax"], [89, 2, 1, "", "Threshold"], [89, 1, 1, "", "__init__"]], "pyCGM2.enums.HarringtonPredictor": [[90, 2, 1, "", "LegLength"], [90, 2, 1, "", "Native"], [90, 2, 1, "", "PelvisWidth"], [90, 1, 1, "", "__init__"]], "pyCGM2.enums.JointCalibrationMethod": [[91, 2, 1, "", "Basic"], [91, 2, 1, "", "KAD"], [91, 2, 1, "", "Medial"], [91, 1, 1, "", "__init__"]], "pyCGM2.enums.MomentProjection": [[92, 2, 1, "", "Distal"], [92, 2, 1, "", "Global"], [92, 2, 1, "", "JCS"], [92, 2, 1, "", "JCS_Dual"], [92, 2, 1, "", "Proximal"], [92, 1, 1, "", "__init__"]], "pyCGM2.enums.SegmentSide": [[93, 2, 1, "", "Central"], [93, 2, 1, "", "Left"], [93, 2, 1, "", "Right"], [93, 1, 1, "", "__init__"]], "pyCGM2.enums.motionMethod": [[95, 2, 1, "", "Determinist"], [95, 2, 1, "", "Sodervisk"], [95, 2, 1, "", "Unknown"], [95, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:attribute", "3": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "function", "Python function"]}, "titleterms": {"app": 0, "The": [0, 1, 2, 3, 279], "command": [0, 1, 2, 3], "pycgm2": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 71, 83, 94, 96, 100, 123, 127, 147, 149, 157, 158, 159, 188, 191, 192, 193, 194, 195, 196, 197, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 241, 243, 245, 278, 279, 280, 281, 282, 317, 318, 319, 320, 321, 322, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 353, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 403, 472, 516], "ex": 0, "sub": [0, 1, 2, 3], "nexu": [1, 245, 278, 517], "posit": [1, 2, 3], "argument": [1, 2, 3], "cgm1": [1, 8, 9, 10, 151], "0": 1, "calibr": [1, 8, 9, 11, 13, 15, 17, 19, 21, 25, 27, 241], "name": [1, 2, 3], "fit": [1, 10, 12, 14, 16, 18, 20, 22, 26, 28, 243], "1": [1, 8], "cgm2": [1, 8, 149, 157, 158, 159], "2": [1, 8], "3": [1, 8], "4": [1, 8], "5": [1, 8], "6": 1, "2dof": 1, "sara": [1, 24], "event": [1, 96], "zeni": [1, 34, 35], "gap": 1, "kalman": 1, "gloersen": 1, "plot": [1, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 388], "stp": 1, "kinemat": [1, 34, 243, 389], "tempor": 1, "normal": 1, "comparison": [1, 389], "map": 1, "kinet": [1, 389], "reaction": [1, 389], "emg": [1, 29, 30, 31, 32, 33, 71, 389], "system": [1, 241], "devicedetail": 1, "qtm": [2, 353], "gaitev": 2, "cgm": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 149, 150], "model": [2, 149, 157, 158, 159, 188, 191, 192, 193, 194, 195, 196, 197, 201, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 241, 242, 243], "process": [2, 279, 280, 281, 282, 317, 318, 319, 320, 321, 322, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 403], "set": 3, "edit": 3, "lib": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "analysi": [4, 5, 6, 7, 243, 279, 312], "modul": [4, 29, 34, 57, 59], "automaticcpdevi": 5, "exportanalysi": 6, "makeanalysi": 7, "musculoskelet": [8, 25, 26, 27, 28], "knee": 8, "cgm1_1": [11, 12], "cgm2_1": [13, 14, 152], "cgm2_2": [15, 16, 25, 26, 153], "cgm2_3": [17, 18, 27, 28, 154], "cgm2_4": [19, 20, 155], "cgm2_5": [21, 22, 156], "kneecalibr": [23, 24], "calibration2dof": [23, 214], "loademg": 30, "normalizedemg": 31, "processemg": 32, "processemg_frombtkacq": 33, "eventdetector": [34, 35], "base": [34, 389], "method": 34, "high": 36, "level": 36, "function": [36, 83, 100, 148, 241, 245, 279, 281, 353, 388, 472, 516], "compareemgenvelop": 37, "comparekinemat": 38, "comparekinet": 39, "compareselectedemgevelop": 40, "plotconsistencyenvelopemgpanel": 41, "plotdescriptiveenvelopemgpanel": 42, "plotpfk": 43, "plotsaggitalgagepanel": 44, "plottemporalemg": 45, "plottemporalkinemat": 46, "plottemporalkinet": 47, "plot_consistencykinemat": 48, "plot_consistencykinet": 49, "plot_descriptivegrf": 50, "plot_descriptivegrfintegr": 51, "plot_descriptivekinemat": 52, "plot_descriptivekinet": 53, "plot_descriptivemusclelength": 54, "plot_map": 55, "plot_spatiotempor": 56, "report": [58, 59, 243, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389], "pdfgaitreport": 58, "overview": 60, "content": 60, "indic": 60, "tabl": 60, "anomali": 61, "filter": [61, 71, 96, 123, 127, 241, 243, 278, 279, 280, 281, 282, 336, 337, 339, 340, 341, 389], "procedur": [61, 71, 96, 123, 127, 241, 243, 279, 280, 281, 282, 336, 337, 339, 340, 341], "detectionprocedur": 61, "correctionprocedur": 61, "anomalycorrectionprocedur": 62, "markeranomalycorrectionprocedur": 63, "anomalydetectionprocedur": 64, "anthropodataanomalyprocedur": 65, "forceplateanomalyprocedur": 66, "gaiteventanomalyprocedur": 67, "markeranomalydetectionrollingprocedur": 68, "anomalycorrectionfilt": 69, "anomalydetectionfilt": 70, "manag": 71, "coactivationprocedur": [71, 72], "discreteemgprocedur": [71, 76], "falconercoactivationprocedur": 73, "unithancoactivationprocedur": 74, "amplitudesprocedur": 75, "basicemgprocessingfilt": 77, "discreteemgfilt": 78, "emgcoactivationfilt": 79, "emgenvelopprocessingfilt": 80, "emgnormalisationprocessingfilt": 81, "emgmanag": 82, "enum": [83, 94], "class": [83, 148, 241, 245], "analysissect": 84, "bodypart": 85, "bodypartplot": 86, "datatyp": 87, "eclipsetyp": 88, "emgamplitudenorm": 89, "harringtonpredictor": 90, "jointcalibrationmethod": 91, "momentproject": 92, "segmentsid": 93, "enumfromtext": 94, "motionmethod": 95, "eventprocedur": [96, 98], "eventfilt": 97, "zeniprocedur": 99, "forcepl": [100, 249], "forceplateintegr": 101, "addforceplategeneralev": 102, "appendforceplatecornerasmark": 103, "combineforcepl": 104, "correctforceplatetype5": 105, "detectgaitconsecutiveforcepl": 106, "matchingfootsideonforcepl": 107, "globalanglemotionprocedur": 108, "imumotionprocedur": 109, "quaternionmotionprocedur": 110, "realignedmotionprocedur": 111, "c3dbluetridentprocedur": 112, "csvprocedur": 113, "dataframeprocedur": 114, "imureaderprocedur": 115, "relativeanglesprocedur": 116, "imu": [117, 123], "imureaderfilt": 118, "opensenseinterfaceimuinversekinematicfilt": 119, "opensenseinterfaceimuplacerfilt": 120, "imuinversekinematicxmlprocedur": 121, "imuplacerxmlprocedur": 122, "reader": 123, "motion": 123, "rel": 123, "angl": 123, "opensens": 123, "placer": 123, "fitter": 123, "inspectorfilt": 124, "inspectorprocedur": 125, "markerpresencedetectionprocedur": 126, "inspector": 127, "firstorderfinitediffer": 128, "matrixfirstderiv": 129, "matrixsecondderiv": 130, "splinederiv": 131, "splinefittingderiv": 132, "euler_xyz": 133, "euler_xzi": 134, "euler_yxz": 135, "euler_yzx": 136, "euler_zxi": 137, "euler_zyx": 138, "wrapeulerto": 139, "linelineintersect": 140, "anglefrom2vector": 141, "computeangl": 142, "oppositevector": 143, "timesequencenormalis": 144, "rm": 145, "skewmatrix": 146, "math": 147, "deriv": 147, "euler": 147, "geometri": 147, "normalis": 147, "numer": 147, "bodi": 148, "segment": [148, 204], "paramet": [148, 389], "decor": [149, 157, 158, 159, 241], "applybasicdecor": 157, "applyhjcdecor": 158, "applykjc_ajcdecor": 159, "opensimxmlinterfac": 160, "osimcgminterfac": 161, "osiminterfac": 162, "opensiminterfaceanalysesfilt": 163, "opensiminterfaceinversedynamicsfilt": 164, "opensiminterfaceinversekinematicsfilt": 165, "opensiminterfacescalingfilt": 166, "opensiminterfacestaticoptimizationfilt": 167, "analysesxmlcgmdrivenmodelprocedur": 168, "analysesxmlcgmprocedur": 169, "analysesxmlprocedur": 170, "inversedynamicsxmlcgmprocedur": 171, "inversedynamicsxmlprocedur": 172, "inversekinematicxmlcgmprocedur": 173, "inversekinematicxmlprocedur": 174, "scalingxmlcgmprocedur": 175, "scalingxmlprocedur": 176, "staticoptimisationxmlcgmprocedur": 177, "staticoptimisationxmlprocedur": 178, "forceplateintegrationprocedur": 179, "gaitforceplateintegrationprocedur": 180, "modelcorrectionprocedur": 181, "naim2019thighmisaligmentcorrectionprocedur": 182, "generalscoreresidualprocedur": 183, "modelscoreresidualprocedur": 184, "qualityprocedur": 185, "wandanglequalityprocedur": 186, "bsp": 187, "bodysegmentparamet": 188, "updatefromcustommp": 188, "frame": [189, 191, 192, 193, 194, 195, 196, 197, 242], "node": 190, "angleaxis_to_quaternion": 191, "angleaxis_to_rotationmatrix": 192, "quaternion_to_angleaxi": 193, "quaternion_to_rotationmatrix": 194, "rotationmatrix_to_angleaxi": 195, "rotationmatrix_to_quaternion": 196, "setframedata": 197, "anatomicalreferenti": 198, "clinicaldescriptor": 199, "joint": 200, "model6dof": 202, "referenti": 203, "technicalreferenti": 205, "anklecalibrationdecor": 206, "cgm1manualoffset": 207, "decoratormodel": 208, "hipjointcenterdecor": 209, "kad": 210, "kneecalibrationdecor": 211, "modeldecor": [212, 213, 214, 215, 216, 217, 218, 219, 220, 221], "vcmjointcentr": 212, "bellregress": 213, "chord": 215, "davisregress": 216, "footjointcentrefrommet": 217, "hararegress": 218, "harringtonregress": 219, "midpoint": 220, "saracalibr": 221, "cgmlowerlimbinversedynamicprocedur": 222, "centreofmassfilt": 223, "coordinatesystemdisplayfilt": 224, "forceplateassemblyfilt": 225, "generalcalibrationprocedur": 226, "generalcoordinatesystemprocedur": 227, "groundreactionforceadapterfilt": 228, "groundreactionintegrationfilt": 229, "inversedynamicfilt": 230, "inversedynamicprocedur": 231, "jointpowerfilt": 232, "modelabsoluteanglesfilt": 233, "modelcalibrationfilt": 234, "modelcoordinatesystemprocedur": 235, "modeljcsfilt": 236, "modelmotioncorrectionfilt": 237, "modelmotionfilt": 238, "modelqualityfilt": 239, "staticcalibrationprocedur": 240, "coordin": 241, "invers": [241, 243], "dynam": [241, 243], "qualiti": 241, "correct": 241, "forc": 241, "plate": 241, "integr": 241, "compon": [242, 388], "opensim": [243, 472, 517], "interfac": 243, "scale": 243, "static": 243, "optim": 243, "api": [244, 517], "refer": 244, "eclips": 245, "analogdevic": 246, "channel": 247, "devic": [248, 278], "enfread": 250, "patientenfread": 251, "sessionenfread": 252, "trialenfread": 253, "cleanenf": 254, "generateemptyenf": 255, "getcurrentmarkedenf": 256, "getcurrentmarkednod": 257, "getenffil": 258, "nexusconstructacquisitionfilt": 259, "nexusmodelfilt": 260, "appendanalysisparamet": 261, "appendanglefromacq": 262, "appendbon": 263, "appendbtkscalarfromacq": 264, "appendforcefromacq": 265, "appendmodelledmarkerfromacq": 266, "appendmomentfromacq": 267, "appendpowerfromacq": 268, "checkactivatedsubject": 269, "createev": 270, "creategeneralev": 271, "getactivesubject": 272, "getforceplateassign": 273, "settrajectoryfromacq": 274, "settrajectoryfromarrai": 275, "getnexussubjectmp": 276, "updatenexussubjectmp": 277, "tool": [278, 472], "util": [278, 389, 516], "object": [279, 281], "classif": 280, "cycl": [281, 323, 324, 329, 330, 331, 332], "builder": 281, "jointpattern": [282, 336], "c3dmanag": [283, 337], "c3dmanagerfilt": 284, "c3dmanagerprocedur": 285, "distinctc3dsetprocedur": 286, "uniquebtkacqsetprocedur": 287, "uniquec3dsetprocedur": 288, "classificationfilt": 289, "classificationprocedur": 290, "pfkeprocedur": 291, "discretepointsfilt": 292, "benedettiprocedur": 293, "discretepointprocedur": 294, "goldbergprocedur": 295, "maxminprocedur": 296, "jointpatternfilt": 297, "jointpatternprocedur": 298, "xlsjointpatternprocedur": 299, "progressionframefilt": 300, "pelvisprogressionframeprocedur": 301, "pointprogressionframeprocedur": 302, "progressionframeprocedur": 303, "thoraxprogressionframeprocedur": 304, "representativecyclefilt": 305, "representativeprocedur": 306, "sangeux2015procedur": 307, "scorefilt": 308, "cgm1_gp": 309, "scoreprocedur": 310, "abstractbuild": 311, "analysisbuild": 313, "analysisfilt": 314, "analysisstructur": 315, "gaitanalysisbuild": 316, "analysishandl": [317, 318, 319, 320, 321, 322], "getanalysissect": 317, "getnumberofcycl": 318, "getphas": 319, "getvalu": 320, "iskeyexist": 321, "normalizedmusclelength_withpos": 322, "cyclesbuild": 325, "cyclesfilt": 326, "gaitcycl": 327, "gaitcyclesbuild": 328, "analog_descriptivestat": 329, "construcgaitcycl": 330, "point_descriptivestat": 331, "spatiotemporelparameter_descriptivestat": 332, "analysisexportfilt": 333, "xlsanalysisexportfilt": 334, "xlsexportdataframefilt": 335, "instanc": 337, "progressionfram": 339, "repres": 340, "score": 341, "subjectmp": 342, "detectmeasurementtyp": 343, "finddynam": 344, "findkneecalibr": 345, "findstat": 346, "getfilenam": [347, 483], "getforceplateassig": 348, "getkneefunctioncalibmethod": 349, "get_creation_d": 350, "get_modelled_tri": 351, "istyp": 352, "kinematicsplotcomparisonview": 354, "kineticsplotcomparisonview": 355, "saggitalgageplotview": 356, "coactivationemgplotview": 357, "envemggaitplotpanelview": 358, "multipleanalysis_envemgplotpanelview": 359, "temporalemgplotview": 360, "normalizedgaitgrfintegrationplotview": 361, "normalizedgaitmeangrfintegrationplotview": 362, "normalizedgroundreactionforceplotview": 363, "musclenormalizedplotpanelview": 364, "gpsmapplotview": 365, "normalizedkinematicsplotview": 366, "normalizedkineticsplotview": 367, "plotview": 368, "spatiotemporalplotview": 369, "temporalkinematicsplotview": 370, "temporalkineticsplotview": 371, "normalstp": 372, "normativedata": 373, "addnormalactivationlay": 374, "addrectanglepatch": 375, "addtemporalnormalactivationlay": 376, "consistencyplot": 377, "descriptiveplot": 378, "gaitconsistencyplot": 379, "gaitdescriptiveplot": 380, "gaitmeanplot": 381, "meanplot": 382, "stphorizontalhistogram": 383, "temporalplot": 384, "plottingfilt": 385, "plotutil": 386, "colorcontext": 386, "normativedataset": 387, "viewer": 389, "spatiotempor": 389, "ground": 389, "muscl": 389, "custom": 389, "detectstart_fromthreshold": 390, "detect_cusum": 391, "detect_onset": 392, "detect_peak": 393, "detect_seq": 394, "arraylowpassfilt": 395, "downsampl": 396, "envelopp": 397, "forceplatefilt": 398, "highpass": 399, "markerfilt": 400, "rectifi": 401, "remove50hz": 402, "signal": 403, "detector": 403, "getanalognam": 404, "getmarkernam": 405, "_getsectionfrommd": 406, "applyonvalidfram": 407, "applyrot": 408, "applytransl": 409, "applyvalidframesonoutput": 410, "automatickineticdetect": 411, "btkanalogtoktktimeseri": 412, "btkpointtoktktimeseri": 413, "buildtrial": 414, "calculateanglefrom3point": 415, "changesubjectnam": 416, "checkforceplateexist": 417, "checkgap": 418, "checkmark": 419, "checkmetadata": 420, "checkmultiplesubject": 421, "cleanacq": 422, "clearev": 423, "clearpoint": 424, "constructmark": 425, "constructphantom": 426, "createphantom": 427, "deletecontextev": 428, "findmarkergap": 429, "findvalidfram": 430, "getallparamanalysi": 431, "getforceplatewrench": 432, "getframeboundari": 433, "getlabelsfromscalar": 434, "getnumberofforcepl": 435, "getnumberofmodeloutput": 436, "getparamanalysi": 437, "getscalar": 438, "getstartendev": 439, "getvalidfram": 440, "getvisiblemarkersatfram": 441, "haschild": 442, "isanalogexist": 443, "iseventexist": 444, "isgap": 445, "iskineticflag": 446, "isphantom": 447, "ispointexist": 448, "ispointsexist": 449, "keepanddeleteotherpoint": 450, "markerunitconvert": 451, "markerstoarrai": 452, "modifyeventsubject": 453, "modifysubject": 454, "renameev": 455, "smartappendanalog": 456, "smartappendparamanalysi": 457, "smartappendpoint": 458, "smartcreateev": 459, "smartgetev": 460, "smartgetmetadata": 461, "smartread": 462, "smartsetmetadata": 463, "smartwrit": 464, "sortedev": 465, "export_cgmtomot": 466, "footreactionmotfil": 467, "mot2pointvalu": 468, "smartgetvalu": 469, "sto2pointvalu": 470, "transformmarker_toosimreferenci": 471, "btktool": 472, "concatenateexcelfil": 473, "copypast": 474, "copypastedirectori": 475, "copysessionfold": 476, "createdir": 477, "deletedirectori": 478, "getc3dfil": 479, "getdirnam": 480, "getdir": 481, "getfilecreationd": 482, "getfil": 484, "getikweightset": 485, "getmp": 486, "getmpfilecont": 487, "gettransl": 488, "is_json": 489, "is_yaml": 490, "loadanalysi": 491, "loadmodel": 492, "loadmodelset": 493, "loadmp": 494, "loadset": 495, "openfil": 496, "openjson": 497, "openpicklefil": 498, "openyaml": 499, "readcont": 500, "readxml": 501, "renamefil": 502, "saveanalysi": 503, "savejson": 504, "savemodel": 505, "savemp": 506, "savepicklefil": 507, "saveyaml": 508, "try_a": 509, "checksimilarel": 510, "getsimilarel": 511, "homogeneizeargu": 512, "isinrang": 513, "str": 514, "tobool": 515, "file": 516, "third": 517, "parti": 517, "packag": 517, "btk": 517, "biomechan": 517, "toolkit": 517}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 60}, "alltitles": {"Apps": [[0, "apps"]], "The command pycgm2.exe": [[0, "the-command-pycgm2-exe"]], "sub-commands:": [[0, null]], "The NEXUS sub-command": [[1, "the-nexus-sub-command"]], "Positional Arguments": [[1, "positional-arguments"], [1, "positional-arguments_repeat1"], [1, "positional-arguments_repeat2"], [1, "positional-arguments_repeat3"], [1, "positional-arguments_repeat4"], [1, "positional-arguments_repeat5"], [1, "positional-arguments_repeat6"], [1, "positional-arguments_repeat7"], [1, "positional-arguments_repeat8"], [1, "positional-arguments_repeat9"], [1, "positional-arguments_repeat10"], [1, "positional-arguments_repeat11"], [1, "positional-arguments_repeat12"], [1, "positional-arguments_repeat13"], [1, "positional-arguments_repeat14"], [1, "positional-arguments_repeat15"], [1, "positional-arguments_repeat16"], [2, "positional-arguments"], [2, "positional-arguments_repeat1"], [3, "positional-arguments"]], "Sub-commands": [[1, "Sub-commands"], [1, "Sub-commands_repeat1"], [1, "Sub-commands_repeat2"], [1, "Sub-commands_repeat3"], [1, "Sub-commands_repeat4"], [1, "Sub-commands_repeat5"], [1, "Sub-commands_repeat6"], [1, "Sub-commands_repeat7"], [1, "Sub-commands_repeat8"], [1, "Sub-commands_repeat9"], [1, "Sub-commands_repeat10"], [1, "Sub-commands_repeat11"], [1, "Sub-commands_repeat12"], [1, "Sub-commands_repeat13"], [1, "Sub-commands_repeat14"], [1, "Sub-commands_repeat15"], [1, "Sub-commands_repeat16"], [2, "Sub-commands"], [2, "Sub-commands_repeat1"], [3, "Sub-commands"]], "CGM1.0": [[1, "CGM1.0"]], "Calibration": [[1, "Calibration"], [1, "Calibration_repeat1"], [1, "Calibration_repeat2"], [1, "Calibration_repeat3"], [1, "Calibration_repeat4"], [1, "Calibration_repeat5"], [1, "Calibration_repeat6"]], "Named Arguments": [[1, "named-arguments"], [1, "named-arguments_repeat1"], [1, "named-arguments_repeat2"], [1, "named-arguments_repeat3"], [1, "named-arguments_repeat4"], [1, "named-arguments_repeat5"], [1, "named-arguments_repeat6"], [1, "named-arguments_repeat7"], [1, "named-arguments_repeat8"], [1, "named-arguments_repeat9"], [1, "named-arguments_repeat10"], [1, "named-arguments_repeat11"], [1, "named-arguments_repeat12"], [1, "named-arguments_repeat13"], [1, "named-arguments_repeat14"], [1, "named-arguments_repeat15"], [1, "named-arguments_repeat16"], [1, "named-arguments_repeat17"], [1, "named-arguments_repeat18"], [1, "named-arguments_repeat19"], [1, "named-arguments_repeat20"], [1, "named-arguments_repeat21"], [1, "named-arguments_repeat22"], [1, "named-arguments_repeat23"], [1, "named-arguments_repeat24"], [1, "named-arguments_repeat25"], [1, "named-arguments_repeat26"], [1, "named-arguments_repeat27"], [1, "named-arguments_repeat28"], [1, "named-arguments_repeat29"], [1, "named-arguments_repeat30"], [1, "named-arguments_repeat31"], [1, "named-arguments_repeat32"], [2, "named-arguments"], [2, "named-arguments_repeat1"], [3, "named-arguments"]], "Fitting": [[1, "Fitting"], [1, "Fitting_repeat1"], [1, "Fitting_repeat2"], [1, "Fitting_repeat3"], [1, "Fitting_repeat4"], [1, "Fitting_repeat5"], [1, "Fitting_repeat6"]], "CGM1.1": [[1, "CGM1.1"], [8, "cgm1-1"]], "CGM2.1": [[1, "CGM2.1"], [8, "cgm2-1"]], "CGM2.2": [[1, "CGM2.2"], [8, "cgm2-2"]], "CGM2.3": [[1, "CGM2.3"], [8, "cgm2-3"]], "CGM2.4": [[1, "CGM2.4"], [8, "cgm2-4"]], "CGM2.5": [[1, "CGM2.5"], [8, "cgm2-5"]], "CGM2.6": [[1, "CGM2.6"]], "2DOF": [[1, "2DOF"]], "SARA": [[1, "SARA"]], "Events": [[1, "Events"]], "Zeni": [[1, "Zeni"]], "Gaps": [[1, "Gaps"]], "Kalman": [[1, "Kalman"]], "Gloersen": [[1, "Gloersen"]], "Plots": [[1, "Plots"]], "STP": [[1, "STP"]], "Kinematics": [[1, "Kinematics"]], "Temporal": [[1, "Temporal"], [1, "Temporal_repeat1"], [1, "Temporal_repeat2"], [1, "Temporal_repeat3"]], "Normalized": [[1, "Normalized"], [1, "Normalized_repeat1"], [1, "Normalized_repeat2"], [1, "Normalized_repeat3"]], "Comparison": [[1, "Comparison"], [1, "Comparison_repeat1"], [1, "Comparison_repeat2"], [1, "Comparison_repeat3"]], "MAP": [[1, "MAP"]], "Kinetics": [[1, "Kinetics"]], "Reaction": [[1, "Reaction"]], "EMG": [[1, "EMG"]], "System": [[1, "System"]], "DeviceDetails": [[1, "DeviceDetails"]], "The QTM sub-command": [[2, "the-qtm-sub-command"]], "GaitEvents": [[2, "GaitEvents"]], "CGM": [[2, "CGM"], [149, "cgm"], [150, "cgm"]], "Modelling": [[2, "Modelling"]], "Processing": [[2, "Processing"]], "The SETTINGS sub-command": [[3, "the-settings-sub-command"]], "Edit": [[3, "Edit"]], "pyCGM2.Lib.analysis module": [[4, "pycgm2-lib-analysis-module"]], "pyCGM2.Lib.analysis.automaticCPdeviations": [[5, "pycgm2-lib-analysis-automaticcpdeviations"]], "pyCGM2.Lib.analysis.exportAnalysis": [[6, "pycgm2-lib-analysis-exportanalysis"]], "pyCGM2.Lib.analysis.makeAnalysis": [[7, "pycgm2-lib-analysis-makeanalysis"]], "pyCGM2.Lib.CGM": [[8, "pycgm2-lib-cgm"]], "CGM1": [[8, "cgm1"], [151, "cgm1"]], "musculoskeletal CGM2.2": [[8, "musculoskeletal-cgm2-2"]], "musculoskeletal CGM2.3": [[8, "musculoskeletal-cgm2-3"]], "knee calibration": [[8, "knee-calibration"]], "pyCGM2.Lib.CGM.cgm1.calibrate": [[9, "pycgm2-lib-cgm-cgm1-calibrate"]], "pyCGM2.Lib.CGM.cgm1.fitting": [[10, "pycgm2-lib-cgm-cgm1-fitting"]], "pyCGM2.Lib.CGM.cgm1_1.calibrate": [[11, "pycgm2-lib-cgm-cgm1-1-calibrate"]], "pyCGM2.Lib.CGM.cgm1_1.fitting": [[12, "pycgm2-lib-cgm-cgm1-1-fitting"]], "pyCGM2.Lib.CGM.cgm2_1.calibrate": [[13, "pycgm2-lib-cgm-cgm2-1-calibrate"]], "pyCGM2.Lib.CGM.cgm2_1.fitting": [[14, "pycgm2-lib-cgm-cgm2-1-fitting"]], "pyCGM2.Lib.CGM.cgm2_2.calibrate": [[15, "pycgm2-lib-cgm-cgm2-2-calibrate"]], "pyCGM2.Lib.CGM.cgm2_2.fitting": [[16, "pycgm2-lib-cgm-cgm2-2-fitting"]], "pyCGM2.Lib.CGM.cgm2_3.calibrate": [[17, "pycgm2-lib-cgm-cgm2-3-calibrate"]], "pyCGM2.Lib.CGM.cgm2_3.fitting": [[18, "pycgm2-lib-cgm-cgm2-3-fitting"]], "pyCGM2.Lib.CGM.cgm2_4.calibrate": [[19, "pycgm2-lib-cgm-cgm2-4-calibrate"]], "pyCGM2.Lib.CGM.cgm2_4.fitting": [[20, "pycgm2-lib-cgm-cgm2-4-fitting"]], "pyCGM2.Lib.CGM.cgm2_5.calibrate": [[21, "pycgm2-lib-cgm-cgm2-5-calibrate"]], "pyCGM2.Lib.CGM.cgm2_5.fitting": [[22, "pycgm2-lib-cgm-cgm2-5-fitting"]], "pyCGM2.Lib.CGM.kneeCalibration.calibration2Dof": [[23, "pycgm2-lib-cgm-kneecalibration-calibration2dof"]], "pyCGM2.Lib.CGM.kneeCalibration.sara": [[24, "pycgm2-lib-cgm-kneecalibration-sara"]], "pyCGM2.Lib.CGM.musculoskeletal.cgm2_2.calibrate": [[25, "pycgm2-lib-cgm-musculoskeletal-cgm2-2-calibrate"]], "pyCGM2.Lib.CGM.musculoskeletal.cgm2_2.fitting": [[26, "pycgm2-lib-cgm-musculoskeletal-cgm2-2-fitting"]], "pyCGM2.Lib.CGM.musculoskeletal.cgm2_3.calibrate": [[27, "pycgm2-lib-cgm-musculoskeletal-cgm2-3-calibrate"]], "pyCGM2.Lib.CGM.musculoskeletal.cgm2_3.fitting": [[28, "pycgm2-lib-cgm-musculoskeletal-cgm2-3-fitting"]], "pyCGM2.Lib.emg module": [[29, "pycgm2-lib-emg-module"]], "pyCGM2.Lib.emg.loadEmg": [[30, "pycgm2-lib-emg-loademg"]], "pyCGM2.Lib.emg.normalizedEMG": [[31, "pycgm2-lib-emg-normalizedemg"]], "pyCGM2.Lib.emg.processEMG": [[32, "pycgm2-lib-emg-processemg"]], "pyCGM2.Lib.emg.processEMG_fromBtkAcq": [[33, "pycgm2-lib-emg-processemg-frombtkacq"]], "pyCGM2.Lib.eventDetector module": [[34, "pycgm2-lib-eventdetector-module"]], "Zeni kinematic-based method": [[34, "zeni-kinematic-based-method"]], "pyCGM2.Lib.eventDetector.zeni": [[35, "pycgm2-lib-eventdetector-zeni"]], "High Level functions": [[36, "high-level-functions"]], "pyCGM2.Lib.plot.compareEmgEnvelops": [[37, "pycgm2-lib-plot-compareemgenvelops"]], "pyCGM2.Lib.plot.compareKinematic": [[38, "pycgm2-lib-plot-comparekinematic"]], "pyCGM2.Lib.plot.compareKinetic": [[39, "pycgm2-lib-plot-comparekinetic"]], "pyCGM2.Lib.plot.compareSelectedEmgEvelops": [[40, "pycgm2-lib-plot-compareselectedemgevelops"]], "pyCGM2.Lib.plot.plotConsistencyEnvelopEMGpanel": [[41, "pycgm2-lib-plot-plotconsistencyenvelopemgpanel"]], "pyCGM2.Lib.plot.plotDescriptiveEnvelopEMGpanel": [[42, "pycgm2-lib-plot-plotdescriptiveenvelopemgpanel"]], "pyCGM2.Lib.plot.plotPFKE": [[43, "pycgm2-lib-plot-plotpfke"]], "pyCGM2.Lib.plot.plotSaggitalGagePanel": [[44, "pycgm2-lib-plot-plotsaggitalgagepanel"]], "pyCGM2.Lib.plot.plotTemporalEMG": [[45, "pycgm2-lib-plot-plottemporalemg"]], "pyCGM2.Lib.plot.plotTemporalKinematic": [[46, "pycgm2-lib-plot-plottemporalkinematic"]], "pyCGM2.Lib.plot.plotTemporalKinetic": [[47, "pycgm2-lib-plot-plottemporalkinetic"]], "pyCGM2.Lib.plot.plot_ConsistencyKinematic": [[48, "pycgm2-lib-plot-plot-consistencykinematic"]], "pyCGM2.Lib.plot.plot_ConsistencyKinetic": [[49, "pycgm2-lib-plot-plot-consistencykinetic"]], "pyCGM2.Lib.plot.plot_DescriptiveGRF": [[50, "pycgm2-lib-plot-plot-descriptivegrf"]], "pyCGM2.Lib.plot.plot_DescriptiveGrfIntegration": [[51, "pycgm2-lib-plot-plot-descriptivegrfintegration"]], "pyCGM2.Lib.plot.plot_DescriptiveKinematic": [[52, "pycgm2-lib-plot-plot-descriptivekinematic"]], "pyCGM2.Lib.plot.plot_DescriptiveKinetic": [[53, "pycgm2-lib-plot-plot-descriptivekinetic"]], "pyCGM2.Lib.plot.plot_DescriptiveMuscleLength": [[54, "pycgm2-lib-plot-plot-descriptivemusclelength"]], "pyCGM2.Lib.plot.plot_MAP": [[55, "pycgm2-lib-plot-plot-map"]], "pyCGM2.Lib.plot.plot_spatioTemporal": [[56, "pycgm2-lib-plot-plot-spatiotemporal"]], "pyCGM2.Lib.plot module": [[57, "pycgm2-lib-plot-module"]], "pyCGM2.Lib.report.pdfGaitReport": [[58, "pycgm2-lib-report-pdfgaitreport"]], "pyCGM2.Lib.report module": [[59, "pycgm2-lib-report-module"]], "pyCGM2 overview": [[60, "pycgm2-overview"]], "Content:": [[60, null]], "Indices and tables": [[60, "indices-and-tables"]], "pyCGM2.Anomaly": [[61, "pycgm2-anomaly"]], "Filters": [[61, "filters"], [71, "filters"], [96, "filters"], [123, "filters"], [127, "filters"], [241, "filters"], [243, "filters"], [278, "filters"], [279, "filters"], [280, "filters"], [281, "filters"], [282, "filters"], [336, "filters"], [337, "filters"], [339, "filters"], [340, "filters"], [341, "filters"], [389, "filters"]], "Procedures": [[61, "procedures"], [71, "procedures"], [96, "procedures"], [123, "procedures"], [127, "procedures"], [241, "procedures"], [243, "procedures"], [279, "procedures"], [280, "procedures"], [282, "procedures"], [336, "procedures"], [337, "procedures"], [339, "procedures"], [340, "procedures"], [341, "procedures"]], "DetectionProcedures": [[61, "detectionprocedures"]], "CorrectionProcedures": [[61, "correctionprocedures"]], "AnomalyCorrectionProcedure": [[62, "anomalycorrectionprocedure"]], "MarkerAnomalyCorrectionProcedure": [[63, "markeranomalycorrectionprocedure"]], "AnomalyDetectionProcedure": [[64, "anomalydetectionprocedure"]], "AnthropoDataAnomalyProcedure": [[65, "anthropodataanomalyprocedure"]], "ForcePlateAnomalyProcedure": [[66, "forceplateanomalyprocedure"]], "GaitEventAnomalyProcedure": [[67, "gaiteventanomalyprocedure"]], "MarkerAnomalyDetectionRollingProcedure": [[68, "markeranomalydetectionrollingprocedure"]], "AnomalyCorrectionFilter": [[69, "anomalycorrectionfilter"]], "AnomalyDetectionFilter": [[70, "anomalydetectionfilter"]], "pyCGM2.EMG": [[71, "pycgm2-emg"]], "EMG Manager": [[71, "emg-manager"]], "coactivationProcedures": [[71, "coactivationprocedures"]], "discreteEmgProcedures": [[71, "discreteemgprocedures"]], "CoActivationProcedure": [[72, "coactivationprocedure"]], "FalconerCoActivationProcedure": [[73, "falconercoactivationprocedure"]], "UnithanCoActivationProcedure": [[74, "unithancoactivationprocedure"]], "AmplitudesProcedure": [[75, "amplitudesprocedure"]], "DiscreteEmgProcedure": [[76, "discreteemgprocedure"]], "BasicEmgProcessingFilter": [[77, "basicemgprocessingfilter"]], "DiscreteEMGFilter": [[78, "discreteemgfilter"]], "EmgCoActivationFilter": [[79, "emgcoactivationfilter"]], "EmgEnvelopProcessingFilter": [[80, "emgenvelopprocessingfilter"]], "EmgNormalisationProcessingFilter": [[81, "emgnormalisationprocessingfilter"]], "EmgManager": [[82, "emgmanager"]], "pyCGM2.enums": [[83, "pycgm2-enums"]], "Classes": [[83, "classes"], [148, "classes"], [241, "classes"], [245, "classes"]], "Functions": [[83, "functions"], [100, "functions"], [245, "functions"], [279, "functions"], [353, "functions"], [388, "functions"]], "AnalysisSection": [[84, "analysissection"]], "BodyPart": [[85, "bodypart"]], "BodyPartPlot": [[86, "bodypartplot"]], "DataType": [[87, "datatype"]], "EclipseType": [[88, "eclipsetype"]], "EmgAmplitudeNormalization": [[89, "emgamplitudenormalization"]], "HarringtonPredictor": [[90, "harringtonpredictor"]], "JointCalibrationMethod": [[91, "jointcalibrationmethod"]], "MomentProjection": [[92, "momentprojection"]], "SegmentSide": [[93, "segmentside"]], "pyCGM2.enums.enumFromtext": [[94, "pycgm2-enums-enumfromtext"]], "motionMethod": [[95, "motionmethod"]], "pyCGM2.Events": [[96, "pycgm2-events"]], "eventProcedures": [[96, "eventprocedures"]], "EventFilter": [[97, "eventfilter"]], "EventProcedure": [[98, "eventprocedure"]], "ZeniProcedure": [[99, "zeniprocedure"]], "pyCGM2.forceplates": [[100, "pycgm2-forceplates"]], "ForcePlateIntegration": [[101, "forceplateintegration"]], "addForcePlateGeneralEvents": [[102, "addforceplategeneralevents"]], "appendForcePlateCornerAsMarker": [[103, "appendforceplatecornerasmarker"]], "combineForcePlate": [[104, "combineforceplate"]], "correctForcePlateType5": [[105, "correctforceplatetype5"]], "detectGaitConsecutiveForcePlates": [[106, "detectgaitconsecutiveforceplates"]], "matchingFootSideOnForceplate": [[107, "matchingfootsideonforceplate"]], "GlobalAngleMotionProcedure": [[108, "globalanglemotionprocedure"]], "ImuMotionProcedure": [[109, "imumotionprocedure"]], "QuaternionMotionProcedure": [[110, "quaternionmotionprocedure"]], "RealignedMotionProcedure": [[111, "realignedmotionprocedure"]], "C3dBlueTridentProcedure": [[112, "c3dbluetridentprocedure"]], "CsvProcedure": [[113, "csvprocedure"]], "DataframeProcedure": [[114, "dataframeprocedure"]], "ImuReaderProcedure": [[115, "imureaderprocedure"]], "RelativeAnglesProcedure": [[116, "relativeanglesprocedure"]], "Imu": [[117, "imu"], [123, "imu"]], "ImuReaderFilter": [[118, "imureaderfilter"]], "opensenseInterfaceImuInverseKinematicFilter": [[119, "opensenseinterfaceimuinversekinematicfilter"]], "opensenseInterfaceImuPlacerFilter": [[120, "opensenseinterfaceimuplacerfilter"]], "ImuInverseKinematicXMLProcedure": [[121, "imuinversekinematicxmlprocedure"]], "ImuPlacerXMLProcedure": [[122, "imuplacerxmlprocedure"]], "pyCGM2.IMU": [[123, "pycgm2-imu"]], "reader": [[123, "reader"]], "motion": [[123, "motion"]], "relative angles": [[123, "relative-angles"]], "opensense procedures": [[123, "opensense-procedures"]], "placer": [[123, "placer"]], "fitter": [[123, "fitter"]], "InspectorFilter": [[124, "inspectorfilter"]], "InspectorProcedure": [[125, "inspectorprocedure"]], "MarkerPresenceDetectionProcedure": [[126, "markerpresencedetectionprocedure"]], "pyCGM2.Inspector": [[127, "pycgm2-inspector"]], "firstOrderFiniteDifference": [[128, "firstorderfinitedifference"]], "matrixFirstDerivation": [[129, "matrixfirstderivation"]], "matrixSecondDerivation": [[130, "matrixsecondderivation"]], "splineDerivation": [[131, "splinederivation"]], "splineFittingDerivation": [[132, "splinefittingderivation"]], "euler_xyz": [[133, "euler-xyz"]], "euler_xzy": [[134, "euler-xzy"]], "euler_yxz": [[135, "euler-yxz"]], "euler_yzx": [[136, "euler-yzx"]], "euler_zxy": [[137, "euler-zxy"]], "euler_zyx": [[138, "euler-zyx"]], "wrapEulerTo": [[139, "wrapeulerto"]], "LineLineIntersect": [[140, "linelineintersect"]], "angleFrom2Vectors": [[141, "anglefrom2vectors"]], "computeAngle": [[142, "computeangle"]], "oppositeVector": [[143, "oppositevector"]], "timeSequenceNormalisation": [[144, "timesequencenormalisation"]], "rms": [[145, "rms"]], "skewMatrix": [[146, "skewmatrix"]], "pyCGM2.Math": [[147, "pycgm2-math"]], "derivation": [[147, "derivation"]], "euler": [[147, "euler"]], "geometry": [[147, "geometry"]], "normalisation": [[147, "normalisation"]], "numeric": [[147, "numeric"]], "body segment parameters": [[148, "body-segment-parameters"]], "functions": [[148, "functions"], [241, "functions"], [281, "functions"]], "pyCGM2.Model.CGM2": [[149, "pycgm2-model-cgm2"]], "CGM2": [[149, "cgm2"]], "decorators": [[149, "decorators"]], "CGM2_1": [[152, "cgm2-1"]], "CGM2_2": [[153, "cgm2-2"]], "CGM2_3": [[154, "cgm2-3"]], "CGM2_4": [[155, "cgm2-4"]], "CGM2_5": [[156, "cgm2-5"]], "pyCGM2.Model.CGM2.decorators.applyBasicDecorators": [[157, "pycgm2-model-cgm2-decorators-applybasicdecorators"]], "pyCGM2.Model.CGM2.decorators.applyHJCDecorators": [[158, "pycgm2-model-cgm2-decorators-applyhjcdecorators"]], "pyCGM2.Model.CGM2.decorators.applyKJC_AJCDecorators": [[159, "pycgm2-model-cgm2-decorators-applykjc-ajcdecorators"]], "opensimXmlInterface": [[160, "opensimxmlinterface"]], "osimCgmInterface": [[161, "osimcgminterface"]], "osimInterface": [[162, "osiminterface"]], "opensimInterfaceAnalysesFilter": [[163, "opensiminterfaceanalysesfilter"]], "opensimInterfaceInverseDynamicsFilter": [[164, "opensiminterfaceinversedynamicsfilter"]], "opensimInterfaceInverseKinematicsFilter": [[165, "opensiminterfaceinversekinematicsfilter"]], "opensimInterfaceScalingFilter": [[166, "opensiminterfacescalingfilter"]], "opensimInterfaceStaticOptimizationFilter": [[167, "opensiminterfacestaticoptimizationfilter"]], "AnalysesXmlCgmDrivenModelProcedure": [[168, "analysesxmlcgmdrivenmodelprocedure"]], "AnalysesXmlCgmProcedure": [[169, "analysesxmlcgmprocedure"]], "AnalysesXmlProcedure": [[170, "analysesxmlprocedure"]], "InverseDynamicsXmlCgmProcedure": [[171, "inversedynamicsxmlcgmprocedure"]], "InverseDynamicsXmlProcedure": [[172, "inversedynamicsxmlprocedure"]], "InverseKinematicXmlCgmProcedure": [[173, "inversekinematicxmlcgmprocedure"]], "InverseKinematicXmlProcedure": [[174, "inversekinematicxmlprocedure"]], "ScalingXmlCgmProcedure": [[175, "scalingxmlcgmprocedure"]], "ScalingXmlProcedure": [[176, "scalingxmlprocedure"]], "StaticOptimisationXmlCgmProcedure": [[177, "staticoptimisationxmlcgmprocedure"]], "StaticOptimisationXmlProcedure": [[178, "staticoptimisationxmlprocedure"]], "ForcePlateIntegrationProcedure": [[179, "forceplateintegrationprocedure"]], "GaitForcePlateIntegrationProcedure": [[180, "gaitforceplateintegrationprocedure"]], "ModelCorrectionProcedure": [[181, "modelcorrectionprocedure"]], "Naim2019ThighMisaligmentCorrectionProcedure": [[182, "naim2019thighmisaligmentcorrectionprocedure"]], "GeneralScoreResidualProcedure": [[183, "generalscoreresidualprocedure"]], "ModelScoreResidualProcedure": [[184, "modelscoreresidualprocedure"]], "QualityProcedure": [[185, "qualityprocedure"]], "WandAngleQualityProcedure": [[186, "wandanglequalityprocedure"]], "Bsp": [[187, "bsp"]], "pyCGM2.Model.bodySegmentParameters.updateFromcustomMp": [[188, "pycgm2-model-bodysegmentparameters-updatefromcustommp"]], "Frame": [[189, "frame"]], "Node": [[190, "node"]], "pyCGM2.Model.frame.angleAxis_TO_quaternion": [[191, "pycgm2-model-frame-angleaxis-to-quaternion"]], "pyCGM2.Model.frame.angleAxis_TO_rotationMatrix": [[192, "pycgm2-model-frame-angleaxis-to-rotationmatrix"]], "pyCGM2.Model.frame.quaternion_TO_angleAxis": [[193, "pycgm2-model-frame-quaternion-to-angleaxis"]], "pyCGM2.Model.frame.quaternion_TO_rotationMatrix": [[194, "pycgm2-model-frame-quaternion-to-rotationmatrix"]], "pyCGM2.Model.frame.rotationMatrix_TO_angleAxis": [[195, "pycgm2-model-frame-rotationmatrix-to-angleaxis"]], "pyCGM2.Model.frame.rotationMatrix_TO_quaternion": [[196, "pycgm2-model-frame-rotationmatrix-to-quaternion"]], "pyCGM2.Model.frame.setFrameData": [[197, "pycgm2-model-frame-setframedata"]], "AnatomicalReferential": [[198, "anatomicalreferential"]], "ClinicalDescriptor": [[199, "clinicaldescriptor"]], "Joint": [[200, "joint"]], "Model": [[201, "model"]], "Model6Dof": [[202, "model6dof"]], "Referential": [[203, "referential"]], "Segment": [[204, "segment"]], "TechnicalReferential": [[205, "technicalreferential"]], "AnkleCalibrationDecorator": [[206, "anklecalibrationdecorator"]], "Cgm1ManualOffsets": [[207, "cgm1manualoffsets"]], "DecoratorModel": [[208, "decoratormodel"]], "HipJointCenterDecorator": [[209, "hipjointcenterdecorator"]], "Kad": [[210, "kad"]], "KneeCalibrationDecorator": [[211, "kneecalibrationdecorator"]], "pyCGM2.Model.modelDecorator.VCMJointCentre": [[212, "pycgm2-model-modeldecorator-vcmjointcentre"]], "pyCGM2.Model.modelDecorator.bellRegression": [[213, "pycgm2-model-modeldecorator-bellregression"]], "pyCGM2.Model.modelDecorator.calibration2Dof": [[214, "pycgm2-model-modeldecorator-calibration2dof"]], "pyCGM2.Model.modelDecorator.chord": [[215, "pycgm2-model-modeldecorator-chord"]], "pyCGM2.Model.modelDecorator.davisRegression": [[216, "pycgm2-model-modeldecorator-davisregression"]], "pyCGM2.Model.modelDecorator.footJointCentreFromMet": [[217, "pycgm2-model-modeldecorator-footjointcentrefrommet"]], "pyCGM2.Model.modelDecorator.haraRegression": [[218, "pycgm2-model-modeldecorator-hararegression"]], "pyCGM2.Model.modelDecorator.harringtonRegression": [[219, "pycgm2-model-modeldecorator-harringtonregression"]], "pyCGM2.Model.modelDecorator.midPoint": [[220, "pycgm2-model-modeldecorator-midpoint"]], "pyCGM2.Model.modelDecorator.saraCalibration": [[221, "pycgm2-model-modeldecorator-saracalibration"]], "CGMLowerlimbInverseDynamicProcedure": [[222, "cgmlowerlimbinversedynamicprocedure"]], "CentreOfMassFilter": [[223, "centreofmassfilter"]], "CoordinateSystemDisplayFilter": [[224, "coordinatesystemdisplayfilter"]], "ForcePlateAssemblyFilter": [[225, "forceplateassemblyfilter"]], "GeneralCalibrationProcedure": [[226, "generalcalibrationprocedure"]], "GeneralCoordinateSystemProcedure": [[227, "generalcoordinatesystemprocedure"]], "GroundReactionForceAdapterFilter": [[228, "groundreactionforceadapterfilter"]], "GroundReactionIntegrationFilter": [[229, "groundreactionintegrationfilter"]], "InverseDynamicFilter": [[230, "inversedynamicfilter"]], "InverseDynamicProcedure": [[231, "inversedynamicprocedure"]], "JointPowerFilter": [[232, "jointpowerfilter"]], "ModelAbsoluteAnglesFilter": [[233, "modelabsoluteanglesfilter"]], "ModelCalibrationFilter": [[234, "modelcalibrationfilter"]], "ModelCoordinateSystemProcedure": [[235, "modelcoordinatesystemprocedure"]], "ModelJCSFilter": [[236, "modeljcsfilter"]], "ModelMotionCorrectionFilter": [[237, "modelmotioncorrectionfilter"]], "ModelMotionFilter": [[238, "modelmotionfilter"]], "ModelQualityFilter": [[239, "modelqualityfilter"]], "StaticCalibrationProcedure": [[240, "staticcalibrationprocedure"]], "pyCGM2.Model": [[241, "pycgm2-model"]], "coordinate system": [[241, "coordinate-system"]], "calibration": [[241, "calibration"]], "inverse dynamics": [[241, "inverse-dynamics"], [243, "inverse-dynamics"]], "model quality": [[241, "model-quality"]], "model correction": [[241, "model-correction"]], "force plate integration": [[241, "force-plate-integration"]], "Decorators": [[241, "decorators"]], "Componants": [[242, "componants"], [388, "componants"]], "model": [[242, "model"]], "frame": [[242, "frame"]], "pyCGM2.Model.Opensim.interface": [[243, "pycgm2-model-opensim-interface"]], "Interface": [[243, "interface"]], "scaling": [[243, "scaling"]], "kinematic fitting": [[243, "kinematic-fitting"]], "static optimization": [[243, "static-optimization"]], "analysis report": [[243, "analysis-report"]], "API Reference": [[244, "api-reference"]], "pyCGM2.Nexus.eclipse": [[245, "pycgm2-nexus-eclipse"]], "AnalogDevice": [[246, "analogdevice"]], "Channel": [[247, "channel"]], "Device": [[248, "device"]], "ForcePlate": [[249, "forceplate"]], "EnfReader": [[250, "enfreader"]], "PatientEnfReader": [[251, "patientenfreader"]], "SessionEnfReader": [[252, "sessionenfreader"]], "TrialEnfReader": [[253, "trialenfreader"]], "cleanEnf": [[254, "cleanenf"]], "generateEmptyENF": [[255, "generateemptyenf"]], "getCurrentMarkedEnfs": [[256, "getcurrentmarkedenfs"]], "getCurrentMarkedNodes": [[257, "getcurrentmarkednodes"]], "getEnfFiles": [[258, "getenffiles"]], "NexusConstructAcquisitionFilter": [[259, "nexusconstructacquisitionfilter"]], "NexusModelFilter": [[260, "nexusmodelfilter"]], "appendAnalysisParameters": [[261, "appendanalysisparameters"]], "appendAngleFromAcq": [[262, "appendanglefromacq"]], "appendBones": [[263, "appendbones"]], "appendBtkScalarFromAcq": [[264, "appendbtkscalarfromacq"]], "appendForceFromAcq": [[265, "appendforcefromacq"]], "appendModelledMarkerFromAcq": [[266, "appendmodelledmarkerfromacq"]], "appendMomentFromAcq": [[267, "appendmomentfromacq"]], "appendPowerFromAcq": [[268, "appendpowerfromacq"]], "checkActivatedSubject": [[269, "checkactivatedsubject"]], "createEvents": [[270, "createevents"]], "createGeneralEvents": [[271, "creategeneralevents"]], "getActiveSubject": [[272, "getactivesubject"]], "getForcePlateAssignment": [[273, "getforceplateassignment"]], "setTrajectoryFromAcq": [[274, "settrajectoryfromacq"]], "setTrajectoryFromArray": [[275, "settrajectoryfromarray"]], "getNexusSubjectMp": [[276, "getnexussubjectmp"]], "updateNexusSubjectMp": [[277, "updatenexussubjectmp"]], "pyCGM2.Nexus": [[278, "pycgm2-nexus"]], "Devices": [[278, "devices"]], "Tools": [[278, "tools"]], "Utils": [[278, "utils"], [389, "utils"]], "pyCGM2.Processing.analysis": [[279, "pycgm2-processing-analysis"]], "The analysis object": [[279, "the-analysis-object"]], "pyCGM2.Processing.Classification": [[280, "pycgm2-processing-classification"]], "pyCGM2.Processing.cycle": [[281, "pycgm2-processing-cycle"]], "Procedure (builder)": [[281, "procedure-builder"]], "the cycle object": [[281, "the-cycle-object"]], "pyCGM2.Processing.JointPatterns": [[282, "pycgm2-processing-jointpatterns"], [336, "pycgm2-processing-jointpatterns"]], "C3dManager": [[283, "c3dmanager"]], "C3dManagerFilter": [[284, "c3dmanagerfilter"]], "C3dManagerProcedure": [[285, "c3dmanagerprocedure"]], "DistinctC3dSetProcedure": [[286, "distinctc3dsetprocedure"]], "UniqueBtkAcqSetProcedure": [[287, "uniquebtkacqsetprocedure"]], "UniqueC3dSetProcedure": [[288, "uniquec3dsetprocedure"]], "ClassificationFilter": [[289, "classificationfilter"]], "ClassificationProcedure": [[290, "classificationprocedure"]], "PFKEprocedure": [[291, "pfkeprocedure"]], "DiscretePointsFilter": [[292, "discretepointsfilter"]], "BenedettiProcedure": [[293, "benedettiprocedure"]], "DiscretePointProcedure": [[294, "discretepointprocedure"]], "GoldbergProcedure": [[295, "goldbergprocedure"]], "MaxMinProcedure": [[296, "maxminprocedure"]], "JointPatternFilter": [[297, "jointpatternfilter"]], "JointPatternProcedure": [[298, "jointpatternprocedure"]], "XlsJointPatternProcedure": [[299, "xlsjointpatternprocedure"]], "ProgressionFrameFilter": [[300, "progressionframefilter"]], "PelvisProgressionFrameProcedure": [[301, "pelvisprogressionframeprocedure"]], "PointProgressionFrameProcedure": [[302, "pointprogressionframeprocedure"]], "ProgressionFrameProcedure": [[303, "progressionframeprocedure"]], "ThoraxProgressionFrameProcedure": [[304, "thoraxprogressionframeprocedure"]], "RepresentativeCycleFilter": [[305, "representativecyclefilter"]], "RepresentativeProcedure": [[306, "representativeprocedure"]], "Sangeux2015Procedure": [[307, "sangeux2015procedure"]], "ScoreFilter": [[308, "scorefilter"]], "CGM1_GPS": [[309, "cgm1-gps"]], "ScoreProcedure": [[310, "scoreprocedure"]], "AbstractBuilder": [[311, "abstractbuilder"]], "Analysis": [[312, "analysis"]], "AnalysisBuilder": [[313, "analysisbuilder"]], "AnalysisFilter": [[314, "analysisfilter"]], "AnalysisStructure": [[315, "analysisstructure"]], "GaitAnalysisBuilder": [[316, "gaitanalysisbuilder"]], "pyCGM2.Processing.analysisHandler.getAnalysisSection": [[317, "pycgm2-processing-analysishandler-getanalysissection"]], "pyCGM2.Processing.analysisHandler.getNumberOfCycle": [[318, "pycgm2-processing-analysishandler-getnumberofcycle"]], "pyCGM2.Processing.analysisHandler.getPhases": [[319, "pycgm2-processing-analysishandler-getphases"]], "pyCGM2.Processing.analysisHandler.getValues": [[320, "pycgm2-processing-analysishandler-getvalues"]], "pyCGM2.Processing.analysisHandler.isKeyExist": [[321, "pycgm2-processing-analysishandler-iskeyexist"]], "pyCGM2.Processing.analysisHandler.normalizedMuscleLength_withPose": [[322, "pycgm2-processing-analysishandler-normalizedmusclelength-withpose"]], "Cycle": [[323, "cycle"]], "Cycles": [[324, "cycles"]], "CyclesBuilder": [[325, "cyclesbuilder"]], "CyclesFilter": [[326, "cyclesfilter"]], "GaitCycle": [[327, "gaitcycle"]], "GaitCyclesBuilder": [[328, "gaitcyclesbuilder"]], "pyCGM2.Processing.cycle.analog_descriptiveStats": [[329, "pycgm2-processing-cycle-analog-descriptivestats"]], "pyCGM2.Processing.cycle.construcGaitCycle": [[330, "pycgm2-processing-cycle-construcgaitcycle"]], "pyCGM2.Processing.cycle.point_descriptiveStats": [[331, "pycgm2-processing-cycle-point-descriptivestats"]], "pyCGM2.Processing.cycle.spatioTemporelParameter_descriptiveStats": [[332, "pycgm2-processing-cycle-spatiotemporelparameter-descriptivestats"]], "AnalysisExportFilter": [[333, "analysisexportfilter"]], "XlsAnalysisExportFilter": [[334, "xlsanalysisexportfilter"]], "XlsExportDataFrameFilter": [[335, "xlsexportdataframefilter"]], "pyCGM2.Processing.C3dManager": [[337, "pycgm2-processing-c3dmanager"]], "the c3dmanager instance": [[337, "the-c3dmanager-instance"]], "pyCGM2.Processing": [[338, "pycgm2-processing"]], "pyCGM2.Processing.ProgressionFrame": [[339, "pycgm2-processing-progressionframe"]], "pyCGM2.Processing.Representative": [[340, "pycgm2-processing-representative"]], "pyCGM2.Processing.Scores": [[341, "pycgm2-processing-scores"]], "SubjectMp": [[342, "subjectmp"]], "detectMeasurementType": [[343, "detectmeasurementtype"]], "findDynamic": [[344, "finddynamic"]], "findKneeCalibration": [[345, "findkneecalibration"]], "findStatic": [[346, "findstatic"]], "getFilename": [[347, "getfilename"], [483, "getfilename"]], "getForcePlateAssigment": [[348, "getforceplateassigment"]], "getKneeFunctionCalibMethod": [[349, "getkneefunctioncalibmethod"]], "get_creation_date": [[350, "get-creation-date"]], "get_modelled_trials": [[351, "get-modelled-trials"]], "isType": [[352, "istype"]], "pyCGM2.QTM": [[353, "pycgm2-qtm"]], "KinematicsPlotComparisonViewer": [[354, "kinematicsplotcomparisonviewer"]], "KineticsPlotComparisonViewer": [[355, "kineticsplotcomparisonviewer"]], "SaggitalGagePlotViewer": [[356, "saggitalgageplotviewer"]], "CoactivationEmgPlotViewer": [[357, "coactivationemgplotviewer"]], "EnvEmgGaitPlotPanelViewer": [[358, "envemggaitplotpanelviewer"]], "MultipleAnalysis_EnvEmgPlotPanelViewer": [[359, "multipleanalysis-envemgplotpanelviewer"]], "TemporalEmgPlotViewer": [[360, "temporalemgplotviewer"]], "NormalizedGaitGrfIntegrationPlotViewer": [[361, "normalizedgaitgrfintegrationplotviewer"]], "NormalizedGaitMeanGrfIntegrationPlotViewer": [[362, "normalizedgaitmeangrfintegrationplotviewer"]], "NormalizedGroundReactionForcePlotViewer": [[363, "normalizedgroundreactionforceplotviewer"]], "MuscleNormalizedPlotPanelViewer": [[364, "musclenormalizedplotpanelviewer"]], "GpsMapPlotViewer": [[365, "gpsmapplotviewer"]], "NormalizedKinematicsPlotViewer": [[366, "normalizedkinematicsplotviewer"]], "NormalizedKineticsPlotViewer": [[367, "normalizedkineticsplotviewer"]], "PlotViewer": [[368, "plotviewer"]], "SpatioTemporalPlotViewer": [[369, "spatiotemporalplotviewer"]], "TemporalKinematicsPlotViewer": [[370, "temporalkinematicsplotviewer"]], "TemporalKineticsPlotViewer": [[371, "temporalkineticsplotviewer"]], "NormalSTP": [[372, "normalstp"]], "NormativeData": [[373, "normativedata"]], "pyCGM2.Report.plot.addNormalActivationLayer": [[374, "pycgm2-report-plot-addnormalactivationlayer"]], "pyCGM2.Report.plot.addRectanglePatches": [[375, "pycgm2-report-plot-addrectanglepatches"]], "pyCGM2.Report.plot.addTemporalNormalActivationLayer": [[376, "pycgm2-report-plot-addtemporalnormalactivationlayer"]], "pyCGM2.Report.plot.consistencyPlot": [[377, "pycgm2-report-plot-consistencyplot"]], "pyCGM2.Report.plot.descriptivePlot": [[378, "pycgm2-report-plot-descriptiveplot"]], "pyCGM2.Report.plot.gaitConsistencyPlot": [[379, "pycgm2-report-plot-gaitconsistencyplot"]], "pyCGM2.Report.plot.gaitDescriptivePlot": [[380, "pycgm2-report-plot-gaitdescriptiveplot"]], "pyCGM2.Report.plot.gaitMeanPlot": [[381, "pycgm2-report-plot-gaitmeanplot"]], "pyCGM2.Report.plot.meanPlot": [[382, "pycgm2-report-plot-meanplot"]], "pyCGM2.Report.plot.stpHorizontalHistogram": [[383, "pycgm2-report-plot-stphorizontalhistogram"]], "pyCGM2.Report.plot.temporalPlot": [[384, "pycgm2-report-plot-temporalplot"]], "PlottingFilter": [[385, "plottingfilter"]], "pyCGM2.Report.plotUtils.colorContext": [[386, "pycgm2-report-plotutils-colorcontext"]], "pyCGM2.Report.normativeDatasets": [[387, "pycgm2-report-normativedatasets"]], "pyCGM2.Report.plot": [[388, "pycgm2-report-plot"]], "pyCGM2.Report": [[389, "pycgm2-report"]], "Viewers": [[389, "viewers"]], "base viewers": [[389, "base-viewers"]], "spatiotemporal parameter viewers": [[389, "spatiotemporal-parameter-viewers"]], "kinematics and kinetics viewers": [[389, "kinematics-and-kinetics-viewers"]], "emg viewers": [[389, "emg-viewers"]], "ground reaction viewers": [[389, "ground-reaction-viewers"]], "muscle viewers": [[389, "muscle-viewers"]], "custom viewers": [[389, "custom-viewers"]], "comparison viewers": [[389, "comparison-viewers"]], "detectStart_fromThreshold": [[390, "detectstart-fromthreshold"]], "detect_cusum": [[391, "detect-cusum"]], "detect_onset": [[392, "detect-onset"]], "detect_peaks": [[393, "detect-peaks"]], "detect_seq": [[394, "detect-seq"]], "arrayLowPassFiltering": [[395, "arraylowpassfiltering"]], "downsample": [[396, "downsample"]], "enveloppe": [[397, "enveloppe"]], "forcePlateFiltering": [[398, "forceplatefiltering"]], "highPass": [[399, "highpass"]], "markerFiltering": [[400, "markerfiltering"]], "rectify": [[401, "rectify"]], "remove50hz": [[402, "remove50hz"]], "pyCGM2.Signal": [[403, "pycgm2-signal"]], "Detector": [[403, "detector"]], "Signal processing": [[403, "signal-processing"]], "GetAnalogNames": [[404, "getanalognames"]], "GetMarkerNames": [[405, "getmarkernames"]], "_getSectionFromMd": [[406, "getsectionfrommd"]], "applyOnValidFrames": [[407, "applyonvalidframes"]], "applyRotation": [[408, "applyrotation"]], "applyTranslators": [[409, "applytranslators"]], "applyValidFramesOnOutput": [[410, "applyvalidframesonoutput"]], "automaticKineticDetection": [[411, "automatickineticdetection"]], "btkAnalogToKtkTimeseries": [[412, "btkanalogtoktktimeseries"]], "btkPointToKtkTimeseries": [[413, "btkpointtoktktimeseries"]], "buildTrials": [[414, "buildtrials"]], "calculateAngleFrom3points": [[415, "calculateanglefrom3points"]], "changeSubjectName": [[416, "changesubjectname"]], "checkForcePlateExist": [[417, "checkforceplateexist"]], "checkGap": [[418, "checkgap"]], "checkMarkers": [[419, "checkmarkers"]], "checkMetadata": [[420, "checkmetadata"]], "checkMultipleSubject": [[421, "checkmultiplesubject"]], "cleanAcq": [[422, "cleanacq"]], "clearEvents": [[423, "clearevents"]], "clearPoints": [[424, "clearpoints"]], "constructMarker": [[425, "constructmarker"]], "constructPhantom": [[426, "constructphantom"]], "createPhantoms": [[427, "createphantoms"]], "deleteContextEvents": [[428, "deletecontextevents"]], "findMarkerGap": [[429, "findmarkergap"]], "findValidFrames": [[430, "findvalidframes"]], "getAllParamAnalysis": [[431, "getallparamanalysis"]], "getForcePlateWrench": [[432, "getforceplatewrench"]], "getFrameBoundaries": [[433, "getframeboundaries"]], "getLabelsFromScalar": [[434, "getlabelsfromscalar"]], "getNumberOfForcePlate": [[435, "getnumberofforceplate"]], "getNumberOfModelOutputs": [[436, "getnumberofmodeloutputs"]], "getParamAnalysis": [[437, "getparamanalysis"]], "getScalar": [[438, "getscalar"]], "getStartEndEvents": [[439, "getstartendevents"]], "getValidFrames": [[440, "getvalidframes"]], "getVisibleMarkersAtFrame": [[441, "getvisiblemarkersatframe"]], "hasChild": [[442, "haschild"]], "isAnalogExist": [[443, "isanalogexist"]], "isEventExist": [[444, "iseventexist"]], "isGap": [[445, "isgap"]], "isKineticFlag": [[446, "iskineticflag"]], "isPhantom": [[447, "isphantom"]], "isPointExist": [[448, "ispointexist"]], "isPointsExist": [[449, "ispointsexist"]], "keepAndDeleteOtherPoints": [[450, "keepanddeleteotherpoints"]], "markerUnitConverter": [[451, "markerunitconverter"]], "markersToArray": [[452, "markerstoarray"]], "modifyEventSubject": [[453, "modifyeventsubject"]], "modifySubject": [[454, "modifysubject"]], "renameEvent": [[455, "renameevent"]], "smartAppendAnalog": [[456, "smartappendanalog"]], "smartAppendParamAnalysis": [[457, "smartappendparamanalysis"]], "smartAppendPoint": [[458, "smartappendpoint"]], "smartCreateEvent": [[459, "smartcreateevent"]], "smartGetEvents": [[460, "smartgetevents"]], "smartGetMetadata": [[461, "smartgetmetadata"]], "smartReader": [[462, "smartreader"]], "smartSetMetadata": [[463, "smartsetmetadata"]], "smartWriter": [[464, "smartwriter"]], "sortedEvents": [[465, "sortedevents"]], "export_CgmToMot": [[466, "export-cgmtomot"]], "footReactionMotFile": [[467, "footreactionmotfile"]], "mot2pointValues": [[468, "mot2pointvalues"]], "smartGetValues": [[469, "smartgetvalues"]], "sto2pointValues": [[470, "sto2pointvalues"]], "transformMarker_ToOsimReferencial": [[471, "transformmarker-toosimreferencial"]], "pyCGM2.Tools": [[472, "pycgm2-tools"]], "btkTools functions": [[472, "btktools-functions"]], "opensim tools functions": [[472, "opensim-tools-functions"]], "concatenateExcelFiles": [[473, "concatenateexcelfiles"]], "copyPaste": [[474, "copypaste"]], "copyPasteDirectory": [[475, "copypastedirectory"]], "copySessionFolder": [[476, "copysessionfolder"]], "createDir": [[477, "createdir"]], "deleteDirectory": [[478, "deletedirectory"]], "getC3dFiles": [[479, "getc3dfiles"]], "getDirname": [[480, "getdirname"]], "getDirs": [[481, "getdirs"]], "getFileCreationDate": [[482, "getfilecreationdate"]], "getFiles": [[484, "getfiles"]], "getIKweightSet": [[485, "getikweightset"]], "getMp": [[486, "getmp"]], "getMpFileContent": [[487, "getmpfilecontent"]], "getTranslators": [[488, "gettranslators"]], "is_json": [[489, "is-json"]], "is_yaml": [[490, "is-yaml"]], "loadAnalysis": [[491, "loadanalysis"]], "loadModel": [[492, "loadmodel"]], "loadModelSettings": [[493, "loadmodelsettings"]], "loadMp": [[494, "loadmp"]], "loadSettings": [[495, "loadsettings"]], "openFile": [[496, "openfile"]], "openJson": [[497, "openjson"]], "openPickleFile": [[498, "openpicklefile"]], "openYaml": [[499, "openyaml"]], "readContent": [[500, "readcontent"]], "readXml": [[501, "readxml"]], "renameFile": [[502, "renamefile"]], "saveAnalysis": [[503, "saveanalysis"]], "saveJson": [[504, "savejson"]], "saveModel": [[505, "savemodel"]], "saveMp": [[506, "savemp"]], "savePickleFile": [[507, "savepicklefile"]], "saveYaml": [[508, "saveyaml"]], "try_as": [[509, "try-as"]], "checkSimilarElement": [[510, "checksimilarelement"]], "getSimilarElement": [[511, "getsimilarelement"]], "homogeneizeArguments": [[512, "homogeneizearguments"]], "isInRange": [[513, "isinrange"]], "str": [[514, "str"]], "toBool": [[515, "tobool"]], "pyCGM2.Utils": [[516, "pycgm2-utils"]], "files functions": [[516, "files-functions"]], "utils functions": [[516, "utils-functions"]], "Third party package": [[517, "third-party-package"]], "BtK - biomechanical toolkit": [[517, "btk-biomechanical-toolkit"]], "Nexus API": [[517, "nexus-api"]], "Opensim API": [[517, "opensim-api"]]}, "indexentries": {"automaticcpdeviations() (in module pycgm2.lib.analysis)": [[5, "pyCGM2.Lib.analysis.automaticCPdeviations"]], "exportanalysis() (in module pycgm2.lib.analysis)": [[6, "pyCGM2.Lib.analysis.exportAnalysis"]], "makeanalysis() (in module pycgm2.lib.analysis)": [[7, "pyCGM2.Lib.analysis.makeAnalysis"]], "calibrate() (in module pycgm2.lib.cgm.cgm1)": [[9, "pyCGM2.Lib.CGM.cgm1.calibrate"]], "fitting() (in module pycgm2.lib.cgm.cgm1)": [[10, "pyCGM2.Lib.CGM.cgm1.fitting"]], "calibrate() (in module pycgm2.lib.cgm.cgm1_1)": [[11, "pyCGM2.Lib.CGM.cgm1_1.calibrate"]], "fitting() (in module pycgm2.lib.cgm.cgm1_1)": [[12, "pyCGM2.Lib.CGM.cgm1_1.fitting"]], "calibrate() (in module pycgm2.lib.cgm.cgm2_1)": [[13, "pyCGM2.Lib.CGM.cgm2_1.calibrate"]], "fitting() (in module pycgm2.lib.cgm.cgm2_1)": [[14, "pyCGM2.Lib.CGM.cgm2_1.fitting"]], "calibrate() (in module pycgm2.lib.cgm.cgm2_2)": [[15, "pyCGM2.Lib.CGM.cgm2_2.calibrate"]], "fitting() (in module pycgm2.lib.cgm.cgm2_2)": [[16, "pyCGM2.Lib.CGM.cgm2_2.fitting"]], "calibrate() (in module pycgm2.lib.cgm.cgm2_3)": [[17, "pyCGM2.Lib.CGM.cgm2_3.calibrate"]], "fitting() (in module pycgm2.lib.cgm.cgm2_3)": [[18, "pyCGM2.Lib.CGM.cgm2_3.fitting"]], "calibrate() (in module pycgm2.lib.cgm.cgm2_4)": [[19, "pyCGM2.Lib.CGM.cgm2_4.calibrate"]], "fitting() (in module pycgm2.lib.cgm.cgm2_4)": [[20, "pyCGM2.Lib.CGM.cgm2_4.fitting"]], "calibrate() (in module pycgm2.lib.cgm.cgm2_5)": [[21, "pyCGM2.Lib.CGM.cgm2_5.calibrate"]], "fitting() (in module pycgm2.lib.cgm.cgm2_5)": [[22, "pyCGM2.Lib.CGM.cgm2_5.fitting"]], "calibration2dof() (in module pycgm2.lib.cgm.kneecalibration)": [[23, "pyCGM2.Lib.CGM.kneeCalibration.calibration2Dof"]], "sara() (in module pycgm2.lib.cgm.kneecalibration)": [[24, "pyCGM2.Lib.CGM.kneeCalibration.sara"]], "calibrate() (in module pycgm2.lib.cgm.musculoskeletal.cgm2_2)": [[25, "pyCGM2.Lib.CGM.musculoskeletal.cgm2_2.calibrate"]], "fitting() (in module pycgm2.lib.cgm.musculoskeletal.cgm2_2)": [[26, "pyCGM2.Lib.CGM.musculoskeletal.cgm2_2.fitting"]], "calibrate() (in module pycgm2.lib.cgm.musculoskeletal.cgm2_3)": [[27, "pyCGM2.Lib.CGM.musculoskeletal.cgm2_3.calibrate"]], "fitting() (in module pycgm2.lib.cgm.musculoskeletal.cgm2_3)": [[28, "pyCGM2.Lib.CGM.musculoskeletal.cgm2_3.fitting"]], "loademg() (in module pycgm2.lib.emg)": [[30, "pyCGM2.Lib.emg.loadEmg"]], "normalizedemg() (in module pycgm2.lib.emg)": [[31, "pyCGM2.Lib.emg.normalizedEMG"]], "processemg() (in module pycgm2.lib.emg)": [[32, "pyCGM2.Lib.emg.processEMG"]], "processemg_frombtkacq() (in module pycgm2.lib.emg)": [[33, "pyCGM2.Lib.emg.processEMG_fromBtkAcq"]], "zeni() (in module pycgm2.lib.eventdetector)": [[35, "pyCGM2.Lib.eventDetector.zeni"]], "compareemgenvelops() (in module pycgm2.lib.plot)": [[37, "pyCGM2.Lib.plot.compareEmgEnvelops"]], "comparekinematic() (in module pycgm2.lib.plot)": [[38, "pyCGM2.Lib.plot.compareKinematic"]], "comparekinetic() (in module pycgm2.lib.plot)": [[39, "pyCGM2.Lib.plot.compareKinetic"]], "compareselectedemgevelops() (in module pycgm2.lib.plot)": [[40, "pyCGM2.Lib.plot.compareSelectedEmgEvelops"]], "plotconsistencyenvelopemgpanel() (in module pycgm2.lib.plot)": [[41, "pyCGM2.Lib.plot.plotConsistencyEnvelopEMGpanel"]], "plotdescriptiveenvelopemgpanel() (in module pycgm2.lib.plot)": [[42, "pyCGM2.Lib.plot.plotDescriptiveEnvelopEMGpanel"]], "plotpfke() (in module pycgm2.lib.plot)": [[43, "pyCGM2.Lib.plot.plotPFKE"]], "plotsaggitalgagepanel() (in module pycgm2.lib.plot)": [[44, "pyCGM2.Lib.plot.plotSaggitalGagePanel"]], "plottemporalemg() (in module pycgm2.lib.plot)": [[45, "pyCGM2.Lib.plot.plotTemporalEMG"]], "plottemporalkinematic() (in module pycgm2.lib.plot)": [[46, "pyCGM2.Lib.plot.plotTemporalKinematic"]], "plottemporalkinetic() (in module pycgm2.lib.plot)": [[47, "pyCGM2.Lib.plot.plotTemporalKinetic"]], "plot_consistencykinematic() (in module pycgm2.lib.plot)": [[48, "pyCGM2.Lib.plot.plot_ConsistencyKinematic"]], "plot_consistencykinetic() (in module pycgm2.lib.plot)": [[49, "pyCGM2.Lib.plot.plot_ConsistencyKinetic"]], "plot_descriptivegrf() (in module pycgm2.lib.plot)": [[50, "pyCGM2.Lib.plot.plot_DescriptiveGRF"]], "plot_descriptivegrfintegration() (in module pycgm2.lib.plot)": [[51, "pyCGM2.Lib.plot.plot_DescriptiveGrfIntegration"]], "plot_descriptivekinematic() (in module pycgm2.lib.plot)": [[52, "pyCGM2.Lib.plot.plot_DescriptiveKinematic"]], "plot_descriptivekinetic() (in module pycgm2.lib.plot)": [[53, "pyCGM2.Lib.plot.plot_DescriptiveKinetic"]], "plot_descriptivemusclelength() (in module pycgm2.lib.plot)": [[54, "pyCGM2.Lib.plot.plot_DescriptiveMuscleLength"]], "plot_map() (in module pycgm2.lib.plot)": [[55, "pyCGM2.Lib.plot.plot_MAP"]], "plot_spatiotemporal() (in module pycgm2.lib.plot)": [[56, "pyCGM2.Lib.plot.plot_spatioTemporal"]], "pdfgaitreport() (in module pycgm2.lib.report)": [[58, "pyCGM2.Lib.report.pdfGaitReport"]], "anomalycorrectionprocedure (class in pycgm2.anomaly.anomalycorrectionprocedures)": [[62, "pyCGM2.Anomaly.anomalyCorrectionProcedures.AnomalyCorrectionProcedure"]], "__init__() (pycgm2.anomaly.anomalycorrectionprocedures.anomalycorrectionprocedure method)": [[62, "pyCGM2.Anomaly.anomalyCorrectionProcedures.AnomalyCorrectionProcedure.__init__"]], "markeranomalycorrectionprocedure (class in pycgm2.anomaly.anomalycorrectionprocedures)": [[63, "pyCGM2.Anomaly.anomalyCorrectionProcedures.MarkerAnomalyCorrectionProcedure"]], "__init__() (pycgm2.anomaly.anomalycorrectionprocedures.markeranomalycorrectionprocedure method)": [[63, "pyCGM2.Anomaly.anomalyCorrectionProcedures.MarkerAnomalyCorrectionProcedure.__init__"]], "_distance_threshold (pycgm2.anomaly.anomalycorrectionprocedures.markeranomalycorrectionprocedure attribute)": [[63, "pyCGM2.Anomaly.anomalyCorrectionProcedures.MarkerAnomalyCorrectionProcedure._distance_threshold"]], "_plot (pycgm2.anomaly.anomalycorrectionprocedures.markeranomalycorrectionprocedure attribute)": [[63, "pyCGM2.Anomaly.anomalyCorrectionProcedures.MarkerAnomalyCorrectionProcedure._plot"]], "m_anomalyindexes (pycgm2.anomaly.anomalycorrectionprocedures.markeranomalycorrectionprocedure attribute)": [[63, "pyCGM2.Anomaly.anomalyCorrectionProcedures.MarkerAnomalyCorrectionProcedure.m_anomalyIndexes"]], "m_markers (pycgm2.anomaly.anomalycorrectionprocedures.markeranomalycorrectionprocedure attribute)": [[63, "pyCGM2.Anomaly.anomalyCorrectionProcedures.MarkerAnomalyCorrectionProcedure.m_markers"]], "run() (pycgm2.anomaly.anomalycorrectionprocedures.markeranomalycorrectionprocedure method)": [[63, "pyCGM2.Anomaly.anomalyCorrectionProcedures.MarkerAnomalyCorrectionProcedure.run"]], "anomalydetectionprocedure (class in pycgm2.anomaly.anomalydetectionprocedures)": [[64, "pyCGM2.Anomaly.anomalyDetectionProcedures.AnomalyDetectionProcedure"]], "__init__() (pycgm2.anomaly.anomalydetectionprocedures.anomalydetectionprocedure method)": [[64, "pyCGM2.Anomaly.anomalyDetectionProcedures.AnomalyDetectionProcedure.__init__"]], "getanomaly() (pycgm2.anomaly.anomalydetectionprocedures.anomalydetectionprocedure method)": [[64, "pyCGM2.Anomaly.anomalyDetectionProcedures.AnomalyDetectionProcedure.getAnomaly"]], "run() (pycgm2.anomaly.anomalydetectionprocedures.anomalydetectionprocedure method)": [[64, "pyCGM2.Anomaly.anomalyDetectionProcedures.AnomalyDetectionProcedure.run"]], "anthropodataanomalyprocedure (class in pycgm2.anomaly.anomalydetectionprocedures)": [[65, "pyCGM2.Anomaly.anomalyDetectionProcedures.AnthropoDataAnomalyProcedure"]], "__init__() (pycgm2.anomaly.anomalydetectionprocedures.anthropodataanomalyprocedure method)": [[65, "pyCGM2.Anomaly.anomalyDetectionProcedures.AnthropoDataAnomalyProcedure.__init__"]], "mp (pycgm2.anomaly.anomalydetectionprocedures.anthropodataanomalyprocedure attribute)": [[65, "pyCGM2.Anomaly.anomalyDetectionProcedures.AnthropoDataAnomalyProcedure.mp"]], "run() (pycgm2.anomaly.anomalydetectionprocedures.anthropodataanomalyprocedure method)": [[65, "pyCGM2.Anomaly.anomalyDetectionProcedures.AnthropoDataAnomalyProcedure.run"]], "forceplateanomalyprocedure (class in pycgm2.anomaly.anomalydetectionprocedures)": [[66, "pyCGM2.Anomaly.anomalyDetectionProcedures.ForcePlateAnomalyProcedure"]], "__init__() (pycgm2.anomaly.anomalydetectionprocedures.forceplateanomalyprocedure method)": [[66, "pyCGM2.Anomaly.anomalyDetectionProcedures.ForcePlateAnomalyProcedure.__init__"]], "run() (pycgm2.anomaly.anomalydetectionprocedures.forceplateanomalyprocedure method)": [[66, "pyCGM2.Anomaly.anomalyDetectionProcedures.ForcePlateAnomalyProcedure.run"]], "gaiteventanomalyprocedure (class in pycgm2.anomaly.anomalydetectionprocedures)": [[67, "pyCGM2.Anomaly.anomalyDetectionProcedures.GaitEventAnomalyProcedure"]], "__init__() (pycgm2.anomaly.anomalydetectionprocedures.gaiteventanomalyprocedure method)": [[67, "pyCGM2.Anomaly.anomalyDetectionProcedures.GaitEventAnomalyProcedure.__init__"]], "run() (pycgm2.anomaly.anomalydetectionprocedures.gaiteventanomalyprocedure method)": [[67, "pyCGM2.Anomaly.anomalyDetectionProcedures.GaitEventAnomalyProcedure.run"]], "markeranomalydetectionrollingprocedure (class in pycgm2.anomaly.anomalydetectionprocedures)": [[68, "pyCGM2.Anomaly.anomalyDetectionProcedures.MarkerAnomalyDetectionRollingProcedure"]], "__init__() (pycgm2.anomaly.anomalydetectionprocedures.markeranomalydetectionrollingprocedure method)": [[68, "pyCGM2.Anomaly.anomalyDetectionProcedures.MarkerAnomalyDetectionRollingProcedure.__init__"]], "_apriorierror (pycgm2.anomaly.anomalydetectionprocedures.markeranomalydetectionrollingprocedure attribute)": [[68, "pyCGM2.Anomaly.anomalyDetectionProcedures.MarkerAnomalyDetectionRollingProcedure._aprioriError"]], "_method (pycgm2.anomaly.anomalydetectionprocedures.markeranomalydetectionrollingprocedure attribute)": [[68, "pyCGM2.Anomaly.anomalyDetectionProcedures.MarkerAnomalyDetectionRollingProcedure._method"]], "_plot (pycgm2.anomaly.anomalydetectionprocedures.markeranomalydetectionrollingprocedure attribute)": [[68, "pyCGM2.Anomaly.anomalyDetectionProcedures.MarkerAnomalyDetectionRollingProcedure._plot"]], "_treshold (pycgm2.anomaly.anomalydetectionprocedures.markeranomalydetectionrollingprocedure attribute)": [[68, "pyCGM2.Anomaly.anomalyDetectionProcedures.MarkerAnomalyDetectionRollingProcedure._treshold"]], "_window (pycgm2.anomaly.anomalydetectionprocedures.markeranomalydetectionrollingprocedure attribute)": [[68, "pyCGM2.Anomaly.anomalyDetectionProcedures.MarkerAnomalyDetectionRollingProcedure._window"]], "m_markers (pycgm2.anomaly.anomalydetectionprocedures.markeranomalydetectionrollingprocedure attribute)": [[68, "pyCGM2.Anomaly.anomalyDetectionProcedures.MarkerAnomalyDetectionRollingProcedure.m_markers"]], "run() (pycgm2.anomaly.anomalydetectionprocedures.markeranomalydetectionrollingprocedure method)": [[68, "pyCGM2.Anomaly.anomalyDetectionProcedures.MarkerAnomalyDetectionRollingProcedure.run"]], "anomalycorrectionfilter (class in pycgm2.anomaly.anomalyfilters)": [[69, "pyCGM2.Anomaly.anomalyFilters.AnomalyCorrectionFilter"]], "__init__() (pycgm2.anomaly.anomalyfilters.anomalycorrectionfilter method)": [[69, "pyCGM2.Anomaly.anomalyFilters.AnomalyCorrectionFilter.__init__"]], "run() (pycgm2.anomaly.anomalyfilters.anomalycorrectionfilter method)": [[69, "pyCGM2.Anomaly.anomalyFilters.AnomalyCorrectionFilter.run"]], "anomalydetectionfilter (class in pycgm2.anomaly.anomalyfilters)": [[70, "pyCGM2.Anomaly.anomalyFilters.AnomalyDetectionFilter"]], "__init__() (pycgm2.anomaly.anomalyfilters.anomalydetectionfilter method)": [[70, "pyCGM2.Anomaly.anomalyFilters.AnomalyDetectionFilter.__init__"]], "run() (pycgm2.anomaly.anomalyfilters.anomalydetectionfilter method)": [[70, "pyCGM2.Anomaly.anomalyFilters.AnomalyDetectionFilter.run"]], "coactivationprocedure (class in pycgm2.emg.coactivationprocedures)": [[72, "pyCGM2.EMG.coactivationProcedures.CoActivationProcedure"]], "__init__() (pycgm2.emg.coactivationprocedures.coactivationprocedure method)": [[72, "pyCGM2.EMG.coactivationProcedures.CoActivationProcedure.__init__"]], "falconercoactivationprocedure (class in pycgm2.emg.coactivationprocedures)": [[73, "pyCGM2.EMG.coactivationProcedures.FalconerCoActivationProcedure"]], "__init__() (pycgm2.emg.coactivationprocedures.falconercoactivationprocedure method)": [[73, "pyCGM2.EMG.coactivationProcedures.FalconerCoActivationProcedure.__init__"]], "run() (pycgm2.emg.coactivationprocedures.falconercoactivationprocedure method)": [[73, "pyCGM2.EMG.coactivationProcedures.FalconerCoActivationProcedure.run"]], "unithancoactivationprocedure (class in pycgm2.emg.coactivationprocedures)": [[74, "pyCGM2.EMG.coactivationProcedures.UnithanCoActivationProcedure"]], "__init__() (pycgm2.emg.coactivationprocedures.unithancoactivationprocedure method)": [[74, "pyCGM2.EMG.coactivationProcedures.UnithanCoActivationProcedure.__init__"]], "run() (pycgm2.emg.coactivationprocedures.unithancoactivationprocedure method)": [[74, "pyCGM2.EMG.coactivationProcedures.UnithanCoActivationProcedure.run"]], "amplitudesprocedure (class in pycgm2.emg.discreteemgprocedures)": [[75, "pyCGM2.EMG.discreteEmgProcedures.AmplitudesProcedure"]], "name (pycgm2.emg.discreteemgprocedures.amplitudesprocedure attribute)": [[75, "pyCGM2.EMG.discreteEmgProcedures.AmplitudesProcedure.NAME"]], "__init__() (pycgm2.emg.discreteemgprocedures.amplitudesprocedure method)": [[75, "pyCGM2.EMG.discreteEmgProcedures.AmplitudesProcedure.__init__"]], "detect() (pycgm2.emg.discreteemgprocedures.amplitudesprocedure method)": [[75, "pyCGM2.EMG.discreteEmgProcedures.AmplitudesProcedure.detect"]], "discreteemgprocedure (class in pycgm2.emg.discreteemgprocedures)": [[76, "pyCGM2.EMG.discreteEmgProcedures.DiscreteEmgProcedure"]], "__init__() (pycgm2.emg.discreteemgprocedures.discreteemgprocedure method)": [[76, "pyCGM2.EMG.discreteEmgProcedures.DiscreteEmgProcedure.__init__"]], "basicemgprocessingfilter (class in pycgm2.emg.emgfilters)": [[77, "pyCGM2.EMG.emgFilters.BasicEmgProcessingFilter"]], "__init__() (pycgm2.emg.emgfilters.basicemgprocessingfilter method)": [[77, "pyCGM2.EMG.emgFilters.BasicEmgProcessingFilter.__init__"]], "run() (pycgm2.emg.emgfilters.basicemgprocessingfilter method)": [[77, "pyCGM2.EMG.emgFilters.BasicEmgProcessingFilter.run"]], "sethighpassfrequencies() (pycgm2.emg.emgfilters.basicemgprocessingfilter method)": [[77, "pyCGM2.EMG.emgFilters.BasicEmgProcessingFilter.setHighPassFrequencies"]], "discreteemgfilter (class in pycgm2.emg.emgfilters)": [[78, "pyCGM2.EMG.emgFilters.DiscreteEMGFilter"]], "__init__() (pycgm2.emg.emgfilters.discreteemgfilter method)": [[78, "pyCGM2.EMG.emgFilters.DiscreteEMGFilter.__init__"]], "getoutput() (pycgm2.emg.emgfilters.discreteemgfilter method)": [[78, "pyCGM2.EMG.emgFilters.DiscreteEMGFilter.getOutput"]], "setcondexpinf() (pycgm2.emg.emgfilters.discreteemgfilter method)": [[78, "pyCGM2.EMG.emgFilters.DiscreteEMGFilter.setCondExpInf"]], "setsubjinfo() (pycgm2.emg.emgfilters.discreteemgfilter method)": [[78, "pyCGM2.EMG.emgFilters.DiscreteEMGFilter.setSubjInfo"]], "emgcoactivationfilter (class in pycgm2.emg.emgfilters)": [[79, "pyCGM2.EMG.emgFilters.EmgCoActivationFilter"]], "__init__() (pycgm2.emg.emgfilters.emgcoactivationfilter method)": [[79, "pyCGM2.EMG.emgFilters.EmgCoActivationFilter.__init__"]], "run() (pycgm2.emg.emgfilters.emgcoactivationfilter method)": [[79, "pyCGM2.EMG.emgFilters.EmgCoActivationFilter.run"]], "setcoactivationmethod() (pycgm2.emg.emgfilters.emgcoactivationfilter method)": [[79, "pyCGM2.EMG.emgFilters.EmgCoActivationFilter.setCoactivationMethod"]], "setemg1() (pycgm2.emg.emgfilters.emgcoactivationfilter method)": [[79, "pyCGM2.EMG.emgFilters.EmgCoActivationFilter.setEMG1"]], "setemg2() (pycgm2.emg.emgfilters.emgcoactivationfilter method)": [[79, "pyCGM2.EMG.emgFilters.EmgCoActivationFilter.setEMG2"]], "emgenvelopprocessingfilter (class in pycgm2.emg.emgfilters)": [[80, "pyCGM2.EMG.emgFilters.EmgEnvelopProcessingFilter"]], "__init__() (pycgm2.emg.emgfilters.emgenvelopprocessingfilter method)": [[80, "pyCGM2.EMG.emgFilters.EmgEnvelopProcessingFilter.__init__"]], "run() (pycgm2.emg.emgfilters.emgenvelopprocessingfilter method)": [[80, "pyCGM2.EMG.emgFilters.EmgEnvelopProcessingFilter.run"]], "setcutofffrequency() (pycgm2.emg.emgfilters.emgenvelopprocessingfilter method)": [[80, "pyCGM2.EMG.emgFilters.EmgEnvelopProcessingFilter.setCutoffFrequency"]], "emgnormalisationprocessingfilter (class in pycgm2.emg.emgfilters)": [[81, "pyCGM2.EMG.emgFilters.EmgNormalisationProcessingFilter"]], "__init__() (pycgm2.emg.emgfilters.emgnormalisationprocessingfilter method)": [[81, "pyCGM2.EMG.emgFilters.EmgNormalisationProcessingFilter.__init__"]], "processanalysis() (pycgm2.emg.emgfilters.emgnormalisationprocessingfilter method)": [[81, "pyCGM2.EMG.emgFilters.EmgNormalisationProcessingFilter.processAnalysis"]], "processc3d() (pycgm2.emg.emgfilters.emgnormalisationprocessingfilter method)": [[81, "pyCGM2.EMG.emgFilters.EmgNormalisationProcessingFilter.processC3d"]], "run() (pycgm2.emg.emgfilters.emgnormalisationprocessingfilter method)": [[81, "pyCGM2.EMG.emgFilters.EmgNormalisationProcessingFilter.run"]], "setc3ds() (pycgm2.emg.emgfilters.emgnormalisationprocessingfilter method)": [[81, "pyCGM2.EMG.emgFilters.EmgNormalisationProcessingFilter.setC3ds"]], "setmaxmethod() (pycgm2.emg.emgfilters.emgnormalisationprocessingfilter method)": [[81, "pyCGM2.EMG.emgFilters.EmgNormalisationProcessingFilter.setMaxMethod"]], "setthresholdfromotheranalysis() (pycgm2.emg.emgfilters.emgnormalisationprocessingfilter method)": [[81, "pyCGM2.EMG.emgFilters.EmgNormalisationProcessingFilter.setThresholdFromOtherAnalysis"]], "emgmanager (class in pycgm2.emg.emgmanager)": [[82, "pyCGM2.EMG.emgManager.EmgManager"]], "__init__() (pycgm2.emg.emgmanager.emgmanager method)": [[82, "pyCGM2.EMG.emgManager.EmgManager.__init__"]], "getchannel() (pycgm2.emg.emgmanager.emgmanager method)": [[82, "pyCGM2.EMG.emgManager.EmgManager.getChannel"]], "getchannelsection() (pycgm2.emg.emgmanager.emgmanager method)": [[82, "pyCGM2.EMG.emgManager.EmgManager.getChannelSection"]], "getchannels() (pycgm2.emg.emgmanager.emgmanager method)": [[82, "pyCGM2.EMG.emgManager.EmgManager.getChannels"]], "getmuscles() (pycgm2.emg.emgmanager.emgmanager method)": [[82, "pyCGM2.EMG.emgManager.EmgManager.getMuscles"]], "getnormalactivity() (pycgm2.emg.emgmanager.emgmanager method)": [[82, "pyCGM2.EMG.emgManager.EmgManager.getNormalActivity"]], "getprocessingsection() (pycgm2.emg.emgmanager.emgmanager method)": [[82, "pyCGM2.EMG.emgManager.EmgManager.getProcessingSection"]], "getsides() (pycgm2.emg.emgmanager.emgmanager method)": [[82, "pyCGM2.EMG.emgManager.EmgManager.getSides"]], "analysissection (class in pycgm2.enums)": [[84, "pyCGM2.enums.AnalysisSection"]], "emg (pycgm2.enums.analysissection attribute)": [[84, "pyCGM2.enums.AnalysisSection.Emg"]], "kinematic (pycgm2.enums.analysissection attribute)": [[84, "pyCGM2.enums.AnalysisSection.Kinematic"]], "kinetic (pycgm2.enums.analysissection attribute)": [[84, "pyCGM2.enums.AnalysisSection.Kinetic"]], "__init__() (pycgm2.enums.analysissection method)": [[84, "pyCGM2.enums.AnalysisSection.__init__"]], "bodypart (class in pycgm2.enums)": [[85, "pyCGM2.enums.BodyPart"]], "fullbody (pycgm2.enums.bodypart attribute)": [[85, "pyCGM2.enums.BodyPart.FullBody"]], "lowerlimb (pycgm2.enums.bodypart attribute)": [[85, "pyCGM2.enums.BodyPart.LowerLimb"]], "lowerlimbtrunk (pycgm2.enums.bodypart attribute)": [[85, "pyCGM2.enums.BodyPart.LowerLimbTrunk"]], "upperlimb (pycgm2.enums.bodypart attribute)": [[85, "pyCGM2.enums.BodyPart.UpperLimb"]], "__init__() (pycgm2.enums.bodypart method)": [[85, "pyCGM2.enums.BodyPart.__init__"]], "bodypartplot (class in pycgm2.enums)": [[86, "pyCGM2.enums.BodyPartPlot"]], "lowerlimb (pycgm2.enums.bodypartplot attribute)": [[86, "pyCGM2.enums.BodyPartPlot.LowerLimb"]], "trunk (pycgm2.enums.bodypartplot attribute)": [[86, "pyCGM2.enums.BodyPartPlot.Trunk"]], "upperlimb (pycgm2.enums.bodypartplot attribute)": [[86, "pyCGM2.enums.BodyPartPlot.UpperLimb"]], "__init__() (pycgm2.enums.bodypartplot method)": [[86, "pyCGM2.enums.BodyPartPlot.__init__"]], "angle (pycgm2.enums.datatype attribute)": [[87, "pyCGM2.enums.DataType.Angle"]], "datatype (class in pycgm2.enums)": [[87, "pyCGM2.enums.DataType"]], "force (pycgm2.enums.datatype attribute)": [[87, "pyCGM2.enums.DataType.Force"]], "marker (pycgm2.enums.datatype attribute)": [[87, "pyCGM2.enums.DataType.Marker"]], "moment (pycgm2.enums.datatype attribute)": [[87, "pyCGM2.enums.DataType.Moment"]], "power (pycgm2.enums.datatype attribute)": [[87, "pyCGM2.enums.DataType.Power"]], "segment (pycgm2.enums.datatype attribute)": [[87, "pyCGM2.enums.DataType.Segment"]], "__init__() (pycgm2.enums.datatype method)": [[87, "pyCGM2.enums.DataType.__init__"]], "eclipsetype (class in pycgm2.enums)": [[88, "pyCGM2.enums.EclipseType"]], "patient (pycgm2.enums.eclipsetype attribute)": [[88, "pyCGM2.enums.EclipseType.Patient"]], "session (pycgm2.enums.eclipsetype attribute)": [[88, "pyCGM2.enums.EclipseType.Session"]], "trial (pycgm2.enums.eclipsetype attribute)": [[88, "pyCGM2.enums.EclipseType.Trial"]], "__init__() (pycgm2.enums.eclipsetype method)": [[88, "pyCGM2.enums.EclipseType.__init__"]], "emgamplitudenormalization (class in pycgm2.enums)": [[89, "pyCGM2.enums.EmgAmplitudeNormalization"]], "maxmax (pycgm2.enums.emgamplitudenormalization attribute)": [[89, "pyCGM2.enums.EmgAmplitudeNormalization.MaxMax"]], "meanmax (pycgm2.enums.emgamplitudenormalization attribute)": [[89, "pyCGM2.enums.EmgAmplitudeNormalization.MeanMax"]], "medianmax (pycgm2.enums.emgamplitudenormalization attribute)": [[89, "pyCGM2.enums.EmgAmplitudeNormalization.MedianMax"]], "threshold (pycgm2.enums.emgamplitudenormalization attribute)": [[89, "pyCGM2.enums.EmgAmplitudeNormalization.Threshold"]], "__init__() (pycgm2.enums.emgamplitudenormalization method)": [[89, "pyCGM2.enums.EmgAmplitudeNormalization.__init__"]], "harringtonpredictor (class in pycgm2.enums)": [[90, "pyCGM2.enums.HarringtonPredictor"]], "leglength (pycgm2.enums.harringtonpredictor attribute)": [[90, "pyCGM2.enums.HarringtonPredictor.LegLength"]], "native (pycgm2.enums.harringtonpredictor attribute)": [[90, "pyCGM2.enums.HarringtonPredictor.Native"]], "pelviswidth (pycgm2.enums.harringtonpredictor attribute)": [[90, "pyCGM2.enums.HarringtonPredictor.PelvisWidth"]], "__init__() (pycgm2.enums.harringtonpredictor method)": [[90, "pyCGM2.enums.HarringtonPredictor.__init__"]], "basic (pycgm2.enums.jointcalibrationmethod attribute)": [[91, "pyCGM2.enums.JointCalibrationMethod.Basic"]], "jointcalibrationmethod (class in pycgm2.enums)": [[91, "pyCGM2.enums.JointCalibrationMethod"]], "kad (pycgm2.enums.jointcalibrationmethod attribute)": [[91, "pyCGM2.enums.JointCalibrationMethod.KAD"]], "medial (pycgm2.enums.jointcalibrationmethod attribute)": [[91, "pyCGM2.enums.JointCalibrationMethod.Medial"]], "__init__() (pycgm2.enums.jointcalibrationmethod method)": [[91, "pyCGM2.enums.JointCalibrationMethod.__init__"]], "distal (pycgm2.enums.momentprojection attribute)": [[92, "pyCGM2.enums.MomentProjection.Distal"]], "global (pycgm2.enums.momentprojection attribute)": [[92, "pyCGM2.enums.MomentProjection.Global"]], "jcs (pycgm2.enums.momentprojection attribute)": [[92, "pyCGM2.enums.MomentProjection.JCS"]], "jcs_dual (pycgm2.enums.momentprojection attribute)": [[92, "pyCGM2.enums.MomentProjection.JCS_Dual"]], "momentprojection (class in pycgm2.enums)": [[92, "pyCGM2.enums.MomentProjection"]], "proximal (pycgm2.enums.momentprojection attribute)": [[92, "pyCGM2.enums.MomentProjection.Proximal"]], "__init__() (pycgm2.enums.momentprojection method)": [[92, "pyCGM2.enums.MomentProjection.__init__"]], "central (pycgm2.enums.segmentside attribute)": [[93, "pyCGM2.enums.SegmentSide.Central"]], "left (pycgm2.enums.segmentside attribute)": [[93, "pyCGM2.enums.SegmentSide.Left"]], "right (pycgm2.enums.segmentside attribute)": [[93, "pyCGM2.enums.SegmentSide.Right"]], "segmentside (class in pycgm2.enums)": [[93, "pyCGM2.enums.SegmentSide"]], "__init__() (pycgm2.enums.segmentside method)": [[93, "pyCGM2.enums.SegmentSide.__init__"]], "enumfromtext() (in module pycgm2.enums)": [[94, "pyCGM2.enums.enumFromtext"]], "determinist (pycgm2.enums.motionmethod attribute)": [[95, "pyCGM2.enums.motionMethod.Determinist"]], "sodervisk (pycgm2.enums.motionmethod attribute)": [[95, "pyCGM2.enums.motionMethod.Sodervisk"]], "unknown (pycgm2.enums.motionmethod attribute)": [[95, "pyCGM2.enums.motionMethod.Unknown"]], "__init__() (pycgm2.enums.motionmethod method)": [[95, "pyCGM2.enums.motionMethod.__init__"]], "motionmethod (class in pycgm2.enums)": [[95, "pyCGM2.enums.motionMethod"]], "eventfilter (class in pycgm2.events.eventfilters)": [[97, "pyCGM2.Events.eventFilters.EventFilter"]], "__init__() (pycgm2.events.eventfilters.eventfilter method)": [[97, "pyCGM2.Events.eventFilters.EventFilter.__init__"]], "detect() (pycgm2.events.eventfilters.eventfilter method)": [[97, "pyCGM2.Events.eventFilters.EventFilter.detect"]], "getstate() (pycgm2.events.eventfilters.eventfilter method)": [[97, "pyCGM2.Events.eventFilters.EventFilter.getState"]], "eventprocedure (class in pycgm2.events.eventprocedures)": [[98, "pyCGM2.Events.eventProcedures.EventProcedure"]], "__init__() (pycgm2.events.eventprocedures.eventprocedure method)": [[98, "pyCGM2.Events.eventProcedures.EventProcedure.__init__"]], "zeniprocedure (class in pycgm2.events.eventprocedures)": [[99, "pyCGM2.Events.eventProcedures.ZeniProcedure"]], "__init__() (pycgm2.events.eventprocedures.zeniprocedure method)": [[99, "pyCGM2.Events.eventProcedures.ZeniProcedure.__init__"]], "description (pycgm2.events.eventprocedures.zeniprocedure attribute)": [[99, "pyCGM2.Events.eventProcedures.ZeniProcedure.description"]], "detect() (pycgm2.events.eventprocedures.zeniprocedure method)": [[99, "pyCGM2.Events.eventProcedures.ZeniProcedure.detect"]], "footoffoffset (pycgm2.events.eventprocedures.zeniprocedure attribute)": [[99, "pyCGM2.Events.eventProcedures.ZeniProcedure.footOffOffset"]], "footstrikeoffset (pycgm2.events.eventprocedures.zeniprocedure attribute)": [[99, "pyCGM2.Events.eventProcedures.ZeniProcedure.footStrikeOffset"]], "setfootoffoffset() (pycgm2.events.eventprocedures.zeniprocedure method)": [[99, "pyCGM2.Events.eventProcedures.ZeniProcedure.setFootOffOffset"]], "setfootstrikeoffset() (pycgm2.events.eventprocedures.zeniprocedure method)": [[99, "pyCGM2.Events.eventProcedures.ZeniProcedure.setFootStrikeOffset"]], "forceplateintegration() (in module pycgm2.forceplates.forceplates)": [[101, "pyCGM2.ForcePlates.forceplates.ForcePlateIntegration"]], "addforceplategeneralevents() (in module pycgm2.forceplates.forceplates)": [[102, "pyCGM2.ForcePlates.forceplates.addForcePlateGeneralEvents"]], "appendforceplatecornerasmarker() (in module pycgm2.forceplates.forceplates)": [[103, "pyCGM2.ForcePlates.forceplates.appendForcePlateCornerAsMarker"]], "combineforceplate() (in module pycgm2.forceplates.forceplates)": [[104, "pyCGM2.ForcePlates.forceplates.combineForcePlate"]], "correctforceplatetype5() (in module pycgm2.forceplates.forceplates)": [[105, "pyCGM2.ForcePlates.forceplates.correctForcePlateType5"]], "detectgaitconsecutiveforceplates() (in module pycgm2.forceplates.forceplates)": [[106, "pyCGM2.ForcePlates.forceplates.detectGaitConsecutiveForcePlates"]], "matchingfootsideonforceplate() (in module pycgm2.forceplates.forceplates)": [[107, "pyCGM2.ForcePlates.forceplates.matchingFootSideOnForceplate"]], "globalanglemotionprocedure (class in pycgm2.imu.procedures.imumotionprocedure)": [[108, "pyCGM2.IMU.Procedures.imuMotionProcedure.GlobalAngleMotionProcedure"]], "__init__() (pycgm2.imu.procedures.imumotionprocedure.globalanglemotionprocedure method)": [[108, "pyCGM2.IMU.Procedures.imuMotionProcedure.GlobalAngleMotionProcedure.__init__"]], "compute() (pycgm2.imu.procedures.imumotionprocedure.globalanglemotionprocedure method)": [[108, "pyCGM2.IMU.Procedures.imuMotionProcedure.GlobalAngleMotionProcedure.compute"]], "imumotionprocedure (class in pycgm2.imu.procedures.imumotionprocedure)": [[109, "pyCGM2.IMU.Procedures.imuMotionProcedure.ImuMotionProcedure"]], "__init__() (pycgm2.imu.procedures.imumotionprocedure.imumotionprocedure method)": [[109, "pyCGM2.IMU.Procedures.imuMotionProcedure.ImuMotionProcedure.__init__"]], "quaternionmotionprocedure (class in pycgm2.imu.procedures.imumotionprocedure)": [[110, "pyCGM2.IMU.Procedures.imuMotionProcedure.QuaternionMotionProcedure"]], "__init__() (pycgm2.imu.procedures.imumotionprocedure.quaternionmotionprocedure method)": [[110, "pyCGM2.IMU.Procedures.imuMotionProcedure.QuaternionMotionProcedure.__init__"]], "compute() (pycgm2.imu.procedures.imumotionprocedure.quaternionmotionprocedure method)": [[110, "pyCGM2.IMU.Procedures.imuMotionProcedure.QuaternionMotionProcedure.compute"]], "realignedmotionprocedure (class in pycgm2.imu.procedures.imumotionprocedure)": [[111, "pyCGM2.IMU.Procedures.imuMotionProcedure.RealignedMotionProcedure"]], "__init__() (pycgm2.imu.procedures.imumotionprocedure.realignedmotionprocedure method)": [[111, "pyCGM2.IMU.Procedures.imuMotionProcedure.RealignedMotionProcedure.__init__"]], "compute() (pycgm2.imu.procedures.imumotionprocedure.realignedmotionprocedure method)": [[111, "pyCGM2.IMU.Procedures.imuMotionProcedure.RealignedMotionProcedure.compute"]], "c3dbluetridentprocedure (class in pycgm2.imu.procedures.imureaderprocedures)": [[112, "pyCGM2.IMU.Procedures.imuReaderProcedures.C3dBlueTridentProcedure"]], "__init__() (pycgm2.imu.procedures.imureaderprocedures.c3dbluetridentprocedure method)": [[112, "pyCGM2.IMU.Procedures.imuReaderProcedures.C3dBlueTridentProcedure.__init__"]], "read() (pycgm2.imu.procedures.imureaderprocedures.c3dbluetridentprocedure method)": [[112, "pyCGM2.IMU.Procedures.imuReaderProcedures.C3dBlueTridentProcedure.read"]], "csvprocedure (class in pycgm2.imu.procedures.imureaderprocedures)": [[113, "pyCGM2.IMU.Procedures.imuReaderProcedures.CsvProcedure"]], "__init__() (pycgm2.imu.procedures.imureaderprocedures.csvprocedure method)": [[113, "pyCGM2.IMU.Procedures.imuReaderProcedures.CsvProcedure.__init__"]], "read() (pycgm2.imu.procedures.imureaderprocedures.csvprocedure method)": [[113, "pyCGM2.IMU.Procedures.imuReaderProcedures.CsvProcedure.read"]], "dataframeprocedure (class in pycgm2.imu.procedures.imureaderprocedures)": [[114, "pyCGM2.IMU.Procedures.imuReaderProcedures.DataframeProcedure"]], "__init__() (pycgm2.imu.procedures.imureaderprocedures.dataframeprocedure method)": [[114, "pyCGM2.IMU.Procedures.imuReaderProcedures.DataframeProcedure.__init__"]], "read() (pycgm2.imu.procedures.imureaderprocedures.dataframeprocedure method)": [[114, "pyCGM2.IMU.Procedures.imuReaderProcedures.DataframeProcedure.read"]], "imureaderprocedure (class in pycgm2.imu.procedures.imureaderprocedures)": [[115, "pyCGM2.IMU.Procedures.imuReaderProcedures.ImuReaderProcedure"]], "__init__() (pycgm2.imu.procedures.imureaderprocedures.imureaderprocedure method)": [[115, "pyCGM2.IMU.Procedures.imuReaderProcedures.ImuReaderProcedure.__init__"]], "downsample() (pycgm2.imu.procedures.imureaderprocedures.imureaderprocedure method)": [[115, "pyCGM2.IMU.Procedures.imuReaderProcedures.ImuReaderProcedure.downsample"]], "relativeanglesprocedure (class in pycgm2.imu.procedures.relativeimuangleprocedures)": [[116, "pyCGM2.IMU.Procedures.relativeImuAngleProcedures.RelativeAnglesProcedure"]], "__init__() (pycgm2.imu.procedures.relativeimuangleprocedures.relativeanglesprocedure method)": [[116, "pyCGM2.IMU.Procedures.relativeImuAngleProcedures.RelativeAnglesProcedure.__init__"]], "compute() (pycgm2.imu.procedures.relativeimuangleprocedures.relativeanglesprocedure method)": [[116, "pyCGM2.IMU.Procedures.relativeImuAngleProcedures.RelativeAnglesProcedure.compute"]], "imu (class in pycgm2.imu.imu)": [[117, "pyCGM2.IMU.imu.Imu"]], "__init__() (pycgm2.imu.imu.imu method)": [[117, "pyCGM2.IMU.imu.Imu.__init__"]], "downsample() (pycgm2.imu.imu.imu method)": [[117, "pyCGM2.IMU.imu.Imu.downsample"]], "getacceleration() (pycgm2.imu.imu.imu method)": [[117, "pyCGM2.IMU.imu.Imu.getAcceleration"]], "getangleaxis() (pycgm2.imu.imu.imu method)": [[117, "pyCGM2.IMU.imu.Imu.getAngleAxis"]], "getangularvelocity() (pycgm2.imu.imu.imu method)": [[117, "pyCGM2.IMU.imu.Imu.getAngularVelocity"]], "getmagnetometer() (pycgm2.imu.imu.imu method)": [[117, "pyCGM2.IMU.imu.Imu.getMagnetometer"]], "getmotion() (pycgm2.imu.imu.imu method)": [[117, "pyCGM2.IMU.imu.Imu.getMotion"]], "getquaternions() (pycgm2.imu.imu.imu method)": [[117, "pyCGM2.IMU.imu.Imu.getQuaternions"]], "reinit() (pycgm2.imu.imu.imu method)": [[117, "pyCGM2.IMU.imu.Imu.reInit"]], "update() (pycgm2.imu.imu.imu method)": [[117, "pyCGM2.IMU.imu.Imu.update"]], "imureaderfilter (class in pycgm2.imu.imufilters)": [[118, "pyCGM2.IMU.imuFilters.ImuReaderFilter"]], "__init__() (pycgm2.imu.imufilters.imureaderfilter method)": [[118, "pyCGM2.IMU.imuFilters.ImuReaderFilter.__init__"]], "run() (pycgm2.imu.imufilters.imureaderfilter method)": [[118, "pyCGM2.IMU.imuFilters.ImuReaderFilter.run"]], "__init__() (pycgm2.imu.opensense.interface.opensensefilters.opensenseinterfaceimuinversekinematicfilter method)": [[119, "pyCGM2.IMU.opensense.interface.opensenseFilters.opensenseInterfaceImuInverseKinematicFilter.__init__"]], "opensenseinterfaceimuinversekinematicfilter (class in pycgm2.imu.opensense.interface.opensensefilters)": [[119, "pyCGM2.IMU.opensense.interface.opensenseFilters.opensenseInterfaceImuInverseKinematicFilter"]], "run() (pycgm2.imu.opensense.interface.opensensefilters.opensenseinterfaceimuinversekinematicfilter method)": [[119, "pyCGM2.IMU.opensense.interface.opensenseFilters.opensenseInterfaceImuInverseKinematicFilter.run"]], "__init__() (pycgm2.imu.opensense.interface.opensensefilters.opensenseinterfaceimuplacerfilter method)": [[120, "pyCGM2.IMU.opensense.interface.opensenseFilters.opensenseInterfaceImuPlacerFilter.__init__"]], "getcalibratedosimname() (pycgm2.imu.opensense.interface.opensensefilters.opensenseinterfaceimuplacerfilter method)": [[120, "pyCGM2.IMU.opensense.interface.opensenseFilters.opensenseInterfaceImuPlacerFilter.getCalibratedOsimName"]], "opensenseinterfaceimuplacerfilter (class in pycgm2.imu.opensense.interface.opensensefilters)": [[120, "pyCGM2.IMU.opensense.interface.opensenseFilters.opensenseInterfaceImuPlacerFilter"]], "run() (pycgm2.imu.opensense.interface.opensensefilters.opensenseinterfaceimuplacerfilter method)": [[120, "pyCGM2.IMU.opensense.interface.opensenseFilters.opensenseInterfaceImuPlacerFilter.run"]], "imuinversekinematicxmlprocedure (class in pycgm2.imu.opensense.interface.procedures.opensenseimukinematicfitterprocedure)": [[121, "pyCGM2.IMU.opensense.interface.procedures.opensenseImuKinematicFitterProcedure.ImuInverseKinematicXMLProcedure"]], "__init__() (pycgm2.imu.opensense.interface.procedures.opensenseimukinematicfitterprocedure.imuinversekinematicxmlprocedure method)": [[121, "pyCGM2.IMU.opensense.interface.procedures.opensenseImuKinematicFitterProcedure.ImuInverseKinematicXMLProcedure.__init__"]], "finalize() (pycgm2.imu.opensense.interface.procedures.opensenseimukinematicfitterprocedure.imuinversekinematicxmlprocedure method)": [[121, "pyCGM2.IMU.opensense.interface.procedures.opensenseImuKinematicFitterProcedure.ImuInverseKinematicXMLProcedure.finalize"]], "prepareimu() (pycgm2.imu.opensense.interface.procedures.opensenseimukinematicfitterprocedure.imuinversekinematicxmlprocedure method)": [[121, "pyCGM2.IMU.opensense.interface.procedures.opensenseImuKinematicFitterProcedure.ImuInverseKinematicXMLProcedure.prepareImu"]], "prepareimumapper() (pycgm2.imu.opensense.interface.procedures.opensenseimukinematicfitterprocedure.imuinversekinematicxmlprocedure method)": [[121, "pyCGM2.IMU.opensense.interface.procedures.opensenseImuKinematicFitterProcedure.ImuInverseKinematicXMLProcedure.prepareImuMapper"]], "prepareorientationfile() (pycgm2.imu.opensense.interface.procedures.opensenseimukinematicfitterprocedure.imuinversekinematicxmlprocedure method)": [[121, "pyCGM2.IMU.opensense.interface.procedures.opensenseImuKinematicFitterProcedure.ImuInverseKinematicXMLProcedure.prepareOrientationFile"]], "preparesensortoopensimrotation() (pycgm2.imu.opensense.interface.procedures.opensenseimukinematicfitterprocedure.imuinversekinematicxmlprocedure method)": [[121, "pyCGM2.IMU.opensense.interface.procedures.opensenseImuKinematicFitterProcedure.ImuInverseKinematicXMLProcedure.prepareSensorToOpensimRotation"]], "preparexml() (pycgm2.imu.opensense.interface.procedures.opensenseimukinematicfitterprocedure.imuinversekinematicxmlprocedure method)": [[121, "pyCGM2.IMU.opensense.interface.procedures.opensenseImuKinematicFitterProcedure.ImuInverseKinematicXMLProcedure.prepareXml"]], "run() (pycgm2.imu.opensense.interface.procedures.opensenseimukinematicfitterprocedure.imuinversekinematicxmlprocedure method)": [[121, "pyCGM2.IMU.opensense.interface.procedures.opensenseImuKinematicFitterProcedure.ImuInverseKinematicXMLProcedure.run"]], "setsetupfile() (pycgm2.imu.opensense.interface.procedures.opensenseimukinematicfitterprocedure.imuinversekinematicxmlprocedure method)": [[121, "pyCGM2.IMU.opensense.interface.procedures.opensenseImuKinematicFitterProcedure.ImuInverseKinematicXMLProcedure.setSetupFile"]], "settimerange() (pycgm2.imu.opensense.interface.procedures.opensenseimukinematicfitterprocedure.imuinversekinematicxmlprocedure method)": [[121, "pyCGM2.IMU.opensense.interface.procedures.opensenseImuKinematicFitterProcedure.ImuInverseKinematicXMLProcedure.setTimeRange"]], "imuplacerxmlprocedure (class in pycgm2.imu.opensense.interface.procedures.opensenseimuplacerinterfaceprocedure)": [[122, "pyCGM2.IMU.opensense.interface.procedures.opensenseImuPlacerInterfaceProcedure.ImuPlacerXMLProcedure"]], "__init__() (pycgm2.imu.opensense.interface.procedures.opensenseimuplacerinterfaceprocedure.imuplacerxmlprocedure method)": [[122, "pyCGM2.IMU.opensense.interface.procedures.opensenseImuPlacerInterfaceProcedure.ImuPlacerXMLProcedure.__init__"]], "finalize() (pycgm2.imu.opensense.interface.procedures.opensenseimuplacerinterfaceprocedure.imuplacerxmlprocedure method)": [[122, "pyCGM2.IMU.opensense.interface.procedures.opensenseImuPlacerInterfaceProcedure.ImuPlacerXMLProcedure.finalize"]], "preparebaseimu() (pycgm2.imu.opensense.interface.procedures.opensenseimuplacerinterfaceprocedure.imuplacerxmlprocedure method)": [[122, "pyCGM2.IMU.opensense.interface.procedures.opensenseImuPlacerInterfaceProcedure.ImuPlacerXMLProcedure.prepareBaseImu"]], "prepareimu() (pycgm2.imu.opensense.interface.procedures.opensenseimuplacerinterfaceprocedure.imuplacerxmlprocedure method)": [[122, "pyCGM2.IMU.opensense.interface.procedures.opensenseImuPlacerInterfaceProcedure.ImuPlacerXMLProcedure.prepareImu"]], "prepareimumapper() (pycgm2.imu.opensense.interface.procedures.opensenseimuplacerinterfaceprocedure.imuplacerxmlprocedure method)": [[122, "pyCGM2.IMU.opensense.interface.procedures.opensenseImuPlacerInterfaceProcedure.ImuPlacerXMLProcedure.prepareImuMapper"]], "prepareorientationfile() (pycgm2.imu.opensense.interface.procedures.opensenseimuplacerinterfaceprocedure.imuplacerxmlprocedure method)": [[122, "pyCGM2.IMU.opensense.interface.procedures.opensenseImuPlacerInterfaceProcedure.ImuPlacerXMLProcedure.prepareOrientationFile"]], "preparesensortoopensimrotation() (pycgm2.imu.opensense.interface.procedures.opensenseimuplacerinterfaceprocedure.imuplacerxmlprocedure method)": [[122, "pyCGM2.IMU.opensense.interface.procedures.opensenseImuPlacerInterfaceProcedure.ImuPlacerXMLProcedure.prepareSensorToOpensimRotation"]], "preparexml() (pycgm2.imu.opensense.interface.procedures.opensenseimuplacerinterfaceprocedure.imuplacerxmlprocedure method)": [[122, "pyCGM2.IMU.opensense.interface.procedures.opensenseImuPlacerInterfaceProcedure.ImuPlacerXMLProcedure.prepareXml"]], "run() (pycgm2.imu.opensense.interface.procedures.opensenseimuplacerinterfaceprocedure.imuplacerxmlprocedure method)": [[122, "pyCGM2.IMU.opensense.interface.procedures.opensenseImuPlacerInterfaceProcedure.ImuPlacerXMLProcedure.run"]], "setsetupfile() (pycgm2.imu.opensense.interface.procedures.opensenseimuplacerinterfaceprocedure.imuplacerxmlprocedure method)": [[122, "pyCGM2.IMU.opensense.interface.procedures.opensenseImuPlacerInterfaceProcedure.ImuPlacerXMLProcedure.setSetupFile"]], "inspectorfilter (class in pycgm2.inspector.inspectorfilters)": [[124, "pyCGM2.Inspector.inspectorFilters.InspectorFilter"]], "__init__() (pycgm2.inspector.inspectorfilters.inspectorfilter method)": [[124, "pyCGM2.Inspector.inspectorFilters.InspectorFilter.__init__"]], "run() (pycgm2.inspector.inspectorfilters.inspectorfilter method)": [[124, "pyCGM2.Inspector.inspectorFilters.InspectorFilter.run"]], "inspectorprocedure (class in pycgm2.inspector.inspectorprocedures)": [[125, "pyCGM2.Inspector.inspectorProcedures.InspectorProcedure"]], "__init__() (pycgm2.inspector.inspectorprocedures.inspectorprocedure method)": [[125, "pyCGM2.Inspector.inspectorProcedures.InspectorProcedure.__init__"]], "markerpresencedetectionprocedure (class in pycgm2.inspector.inspectorprocedures)": [[126, "pyCGM2.Inspector.inspectorProcedures.MarkerPresenceDetectionProcedure"]], "__init__() (pycgm2.inspector.inspectorprocedures.markerpresencedetectionprocedure method)": [[126, "pyCGM2.Inspector.inspectorProcedures.MarkerPresenceDetectionProcedure.__init__"]], "run() (pycgm2.inspector.inspectorprocedures.markerpresencedetectionprocedure method)": [[126, "pyCGM2.Inspector.inspectorProcedures.MarkerPresenceDetectionProcedure.run"]], "firstorderfinitedifference() (in module pycgm2.math.derivation)": [[128, "pyCGM2.Math.derivation.firstOrderFiniteDifference"]], "matrixfirstderivation() (in module pycgm2.math.derivation)": [[129, "pyCGM2.Math.derivation.matrixFirstDerivation"]], "matrixsecondderivation() (in module pycgm2.math.derivation)": [[130, "pyCGM2.Math.derivation.matrixSecondDerivation"]], "splinederivation() (in module pycgm2.math.derivation)": [[131, "pyCGM2.Math.derivation.splineDerivation"]], "splinefittingderivation() (in module pycgm2.math.derivation)": [[132, "pyCGM2.Math.derivation.splineFittingDerivation"]], "euler_xyz() (in module pycgm2.math.euler)": [[133, "pyCGM2.Math.euler.euler_xyz"]], "euler_xzy() (in module pycgm2.math.euler)": [[134, "pyCGM2.Math.euler.euler_xzy"]], "euler_yxz() (in module pycgm2.math.euler)": [[135, "pyCGM2.Math.euler.euler_yxz"]], "euler_yzx() (in module pycgm2.math.euler)": [[136, "pyCGM2.Math.euler.euler_yzx"]], "euler_zxy() (in module pycgm2.math.euler)": [[137, "pyCGM2.Math.euler.euler_zxy"]], "euler_zyx() (in module pycgm2.math.euler)": [[138, "pyCGM2.Math.euler.euler_zyx"]], "wrapeulerto() (in module pycgm2.math.euler)": [[139, "pyCGM2.Math.euler.wrapEulerTo"]], "linelineintersect() (in module pycgm2.math.geometry)": [[140, "pyCGM2.Math.geometry.LineLineIntersect"]], "anglefrom2vectors() (in module pycgm2.math.geometry)": [[141, "pyCGM2.Math.geometry.angleFrom2Vectors"]], "computeangle() (in module pycgm2.math.geometry)": [[142, "pyCGM2.Math.geometry.computeAngle"]], "oppositevector() (in module pycgm2.math.geometry)": [[143, "pyCGM2.Math.geometry.oppositeVector"]], "timesequencenormalisation() (in module pycgm2.math.normalisation)": [[144, "pyCGM2.Math.normalisation.timeSequenceNormalisation"]], "rms() (in module pycgm2.math.numeric)": [[145, "pyCGM2.Math.numeric.rms"]], "skewmatrix() (in module pycgm2.math.numeric)": [[146, "pyCGM2.Math.numeric.skewMatrix"]], "cgm (class in pycgm2.model.cgm2.cgm)": [[150, "pyCGM2.Model.CGM2.cgm.CGM"]], "__init__() (pycgm2.model.cgm2.cgm.cgm method)": [[150, "pyCGM2.Model.CGM2.cgm.CGM.__init__"]], "detectcalibrationmethods() (pycgm2.model.cgm2.cgm.cgm class method)": [[150, "pyCGM2.Model.CGM2.cgm.CGM.detectCalibrationMethods"]], "getstatictrackingmarkers() (pycgm2.model.cgm2.cgm.cgm method)": [[150, "pyCGM2.Model.CGM2.cgm.CGM.getStaticTrackingMarkers"]], "get_markerlabelforpigstatic() (pycgm2.model.cgm2.cgm.cgm class method)": [[150, "pyCGM2.Model.CGM2.cgm.CGM.get_markerLabelForPiGStatic"]], "setstaexpertmode() (pycgm2.model.cgm2.cgm.cgm method)": [[150, "pyCGM2.Model.CGM2.cgm.CGM.setSTAexpertMode"]], "setstatictrackingmarkers() (pycgm2.model.cgm2.cgm.cgm method)": [[150, "pyCGM2.Model.CGM2.cgm.CGM.setStaticTrackingMarkers"]], "cgm1 (class in pycgm2.model.cgm2.cgm)": [[151, "pyCGM2.Model.CGM2.cgm.CGM1"]], "__init__() (pycgm2.model.cgm2.cgm.cgm1 method)": [[151, "pyCGM2.Model.CGM2.cgm.CGM1.__init__"]], "calibrate() (pycgm2.model.cgm2.cgm.cgm1 method)": [[151, "pyCGM2.Model.CGM2.cgm.CGM1.calibrate"]], "calibrationprocedure() (pycgm2.model.cgm2.cgm.cgm1 method)": [[151, "pyCGM2.Model.CGM2.cgm.CGM1.calibrationProcedure"]], "computemotion() (pycgm2.model.cgm2.cgm.cgm1 method)": [[151, "pyCGM2.Model.CGM2.cgm.CGM1.computeMotion"]], "computeoptimizedsegmentmotion() (pycgm2.model.cgm2.cgm.cgm1 method)": [[151, "pyCGM2.Model.CGM2.cgm.CGM1.computeOptimizedSegmentMotion"]], "configure() (pycgm2.model.cgm2.cgm.cgm1 method)": [[151, "pyCGM2.Model.CGM2.cgm.CGM1.configure"]], "getabdaddanklejointoffset() (pycgm2.model.cgm2.cgm.cgm1 method)": [[151, "pyCGM2.Model.CGM2.cgm.CGM1.getAbdAddAnkleJointOffset"]], "getfootoffset() (pycgm2.model.cgm2.cgm.cgm1 method)": [[151, "pyCGM2.Model.CGM2.cgm.CGM1.getFootOffset"]], "getshankoffsets() (pycgm2.model.cgm2.cgm.cgm1 method)": [[151, "pyCGM2.Model.CGM2.cgm.CGM1.getShankOffsets"]], "getstaticmarkers() (pycgm2.model.cgm2.cgm.cgm1 method)": [[151, "pyCGM2.Model.CGM2.cgm.CGM1.getStaticMarkers"]], "getthighoffset() (pycgm2.model.cgm2.cgm.cgm1 method)": [[151, "pyCGM2.Model.CGM2.cgm.CGM1.getThighOffset"]], "gettibialtorsionoffset() (pycgm2.model.cgm2.cgm.cgm1 method)": [[151, "pyCGM2.Model.CGM2.cgm.CGM1.getTibialTorsionOffset"]], "gettrackingmarkers() (pycgm2.model.cgm2.cgm.cgm1 method)": [[151, "pyCGM2.Model.CGM2.cgm.CGM1.getTrackingMarkers"]], "opensimgeometry() (pycgm2.model.cgm2.cgm.cgm1 method)": [[151, "pyCGM2.Model.CGM2.cgm.CGM1.opensimGeometry"]], "opensimiktask() (pycgm2.model.cgm2.cgm.cgm1 method)": [[151, "pyCGM2.Model.CGM2.cgm.CGM1.opensimIkTask"]], "opensimtrackingmarkers() (pycgm2.model.cgm2.cgm.cgm1 method)": [[151, "pyCGM2.Model.CGM2.cgm.CGM1.opensimTrackingMarkers"]], "setversion() (pycgm2.model.cgm2.cgm.cgm1 method)": [[151, "pyCGM2.Model.CGM2.cgm.CGM1.setVersion"]], "viconexport() (pycgm2.model.cgm2.cgm.cgm1 method)": [[151, "pyCGM2.Model.CGM2.cgm.CGM1.viconExport"]], "cgm2_1 (class in pycgm2.model.cgm2.cgm2)": [[152, "pyCGM2.Model.CGM2.cgm2.CGM2_1"]], "__init__() (pycgm2.model.cgm2.cgm2.cgm2_1 method)": [[152, "pyCGM2.Model.CGM2.cgm2.CGM2_1.__init__"]], "decoratedmodel (pycgm2.model.cgm2.cgm2.cgm2_1 attribute)": [[152, "pyCGM2.Model.CGM2.cgm2.CGM2_1.decoratedModel"]], "version (pycgm2.model.cgm2.cgm2.cgm2_1 attribute)": [[152, "pyCGM2.Model.CGM2.cgm2.CGM2_1.version"]], "cgm2_2 (class in pycgm2.model.cgm2.cgm2)": [[153, "pyCGM2.Model.CGM2.cgm2.CGM2_2"]], "__init__() (pycgm2.model.cgm2.cgm2.cgm2_2 method)": [[153, "pyCGM2.Model.CGM2.cgm2.CGM2_2.__init__"]], "decoratedmodel (pycgm2.model.cgm2.cgm2.cgm2_2 attribute)": [[153, "pyCGM2.Model.CGM2.cgm2.CGM2_2.decoratedModel"]], "getstaticiktargets() (pycgm2.model.cgm2.cgm2.cgm2_2 method)": [[153, "pyCGM2.Model.CGM2.cgm2.CGM2_2.getStaticIkTargets"]], "m_staticiktargets (pycgm2.model.cgm2.cgm2.cgm2_2 attribute)": [[153, "pyCGM2.Model.CGM2.cgm2.CGM2_2.m_staticIkTargets"]], "setstaticiktargets() (pycgm2.model.cgm2.cgm2.cgm2_2 method)": [[153, "pyCGM2.Model.CGM2.cgm2.CGM2_2.setStaticIkTargets"]], "version (pycgm2.model.cgm2.cgm2.cgm2_2 attribute)": [[153, "pyCGM2.Model.CGM2.cgm2.CGM2_2.version"]], "cgm2_3 (class in pycgm2.model.cgm2.cgm2)": [[154, "pyCGM2.Model.CGM2.cgm2.CGM2_3"]], "lowerlimb_tracking_markers (pycgm2.model.cgm2.cgm2.cgm2_3 attribute)": [[154, "pyCGM2.Model.CGM2.cgm2.CGM2_3.LOWERLIMB_TRACKING_MARKERS"]], "__init__() (pycgm2.model.cgm2.cgm2.cgm2_3 method)": [[154, "pyCGM2.Model.CGM2.cgm2.CGM2_3.__init__"]], "calibrate() (pycgm2.model.cgm2.cgm2.cgm2_3 method)": [[154, "pyCGM2.Model.CGM2.cgm2.CGM2_3.calibrate"]], "decoratedmodel (pycgm2.model.cgm2.cgm2.cgm2_3 attribute)": [[154, "pyCGM2.Model.CGM2.cgm2.CGM2_3.decoratedModel"]], "getstaticiktargets() (pycgm2.model.cgm2.cgm2.cgm2_3 method)": [[154, "pyCGM2.Model.CGM2.cgm2.CGM2_3.getStaticIkTargets"]], "m_staticiktargets (pycgm2.model.cgm2.cgm2.cgm2_3 attribute)": [[154, "pyCGM2.Model.CGM2.cgm2.CGM2_3.m_staticIkTargets"]], "opensimiktask() (pycgm2.model.cgm2.cgm2.cgm2_3 method)": [[154, "pyCGM2.Model.CGM2.cgm2.CGM2_3.opensimIkTask"]], "setstaticiktargets() (pycgm2.model.cgm2.cgm2.cgm2_3 method)": [[154, "pyCGM2.Model.CGM2.cgm2.CGM2_3.setStaticIkTargets"]], "version (pycgm2.model.cgm2.cgm2.cgm2_3 attribute)": [[154, "pyCGM2.Model.CGM2.cgm2.CGM2_3.version"]], "analysis_kinematic_labels_dict (pycgm2.model.cgm2.cgm2.cgm2_4 attribute)": [[155, "pyCGM2.Model.CGM2.cgm2.CGM2_4.ANALYSIS_KINEMATIC_LABELS_DICT"]], "analysis_kinetic_labels_dict (pycgm2.model.cgm2.cgm2.cgm2_4 attribute)": [[155, "pyCGM2.Model.CGM2.cgm2.CGM2_4.ANALYSIS_KINETIC_LABELS_DICT"]], "cgm2_4 (class in pycgm2.model.cgm2.cgm2)": [[155, "pyCGM2.Model.CGM2.cgm2.CGM2_4"]], "lowerlimb_joints (pycgm2.model.cgm2.cgm2.cgm2_4 attribute)": [[155, "pyCGM2.Model.CGM2.cgm2.CGM2_4.LOWERLIMB_JOINTS"]], "lowerlimb_segments (pycgm2.model.cgm2.cgm2.cgm2_4 attribute)": [[155, "pyCGM2.Model.CGM2.cgm2.CGM2_4.LOWERLIMB_SEGMENTS"]], "lowerlimb_tracking_markers (pycgm2.model.cgm2.cgm2.cgm2_4 attribute)": [[155, "pyCGM2.Model.CGM2.cgm2.CGM2_4.LOWERLIMB_TRACKING_MARKERS"]], "__init__() (pycgm2.model.cgm2.cgm2.cgm2_4 method)": [[155, "pyCGM2.Model.CGM2.cgm2.CGM2_4.__init__"]], "calibrate() (pycgm2.model.cgm2.cgm2.cgm2_4 method)": [[155, "pyCGM2.Model.CGM2.cgm2.CGM2_4.calibrate"]], "computemotion() (pycgm2.model.cgm2.cgm2.cgm2_4 method)": [[155, "pyCGM2.Model.CGM2.cgm2.CGM2_4.computeMotion"]], "computeoptimizedsegmentmotion() (pycgm2.model.cgm2.cgm2.cgm2_4 method)": [[155, "pyCGM2.Model.CGM2.cgm2.CGM2_4.computeOptimizedSegmentMotion"]], "gethindfootoffset() (pycgm2.model.cgm2.cgm2.cgm2_4 method)": [[155, "pyCGM2.Model.CGM2.cgm2.CGM2_4.getHindFootOffset"]], "opensimgeometry() (pycgm2.model.cgm2.cgm2.cgm2_4 method)": [[155, "pyCGM2.Model.CGM2.cgm2.CGM2_4.opensimGeometry"]], "opensimiktask() (pycgm2.model.cgm2.cgm2.cgm2_4 method)": [[155, "pyCGM2.Model.CGM2.cgm2.CGM2_4.opensimIkTask"]], "viconexport() (pycgm2.model.cgm2.cgm2.cgm2_4 method)": [[155, "pyCGM2.Model.CGM2.cgm2.CGM2_4.viconExport"]], "cgm2_5 (class in pycgm2.model.cgm2.cgm2)": [[156, "pyCGM2.Model.CGM2.cgm2.CGM2_5"]], "__init__() (pycgm2.model.cgm2.cgm2.cgm2_5 method)": [[156, "pyCGM2.Model.CGM2.cgm2.CGM2_5.__init__"]], "applybasicdecorators() (in module pycgm2.model.cgm2.decorators)": [[157, "pyCGM2.Model.CGM2.decorators.applyBasicDecorators"]], "applyhjcdecorators() (in module pycgm2.model.cgm2.decorators)": [[158, "pyCGM2.Model.CGM2.decorators.applyHJCDecorators"]], "applykjc_ajcdecorators() (in module pycgm2.model.cgm2.decorators)": [[159, "pyCGM2.Model.CGM2.decorators.applyKJC_AJCDecorators"]], "__init__() (pycgm2.model.opensim.interface.opensiminterface.opensimxmlinterface method)": [[160, "pyCGM2.Model.Opensim.interface.opensimInterface.opensimXmlInterface.__init__"]], "getsoup() (pycgm2.model.opensim.interface.opensiminterface.opensimxmlinterface method)": [[160, "pyCGM2.Model.Opensim.interface.opensimInterface.opensimXmlInterface.getSoup"]], "opensimxmlinterface (class in pycgm2.model.opensim.interface.opensiminterface)": [[160, "pyCGM2.Model.Opensim.interface.opensimInterface.opensimXmlInterface"]], "set_inlist_fromattr() (pycgm2.model.opensim.interface.opensiminterface.opensimxmlinterface method)": [[160, "pyCGM2.Model.Opensim.interface.opensimInterface.opensimXmlInterface.set_inList_fromAttr"]], "set_many() (pycgm2.model.opensim.interface.opensiminterface.opensimxmlinterface method)": [[160, "pyCGM2.Model.Opensim.interface.opensimInterface.opensimXmlInterface.set_many"]], "set_many_inlist() (pycgm2.model.opensim.interface.opensiminterface.opensimxmlinterface method)": [[160, "pyCGM2.Model.Opensim.interface.opensimInterface.opensimXmlInterface.set_many_inList"]], "set_one() (pycgm2.model.opensim.interface.opensiminterface.opensimxmlinterface method)": [[160, "pyCGM2.Model.Opensim.interface.opensimInterface.opensimXmlInterface.set_one"]], "update() (pycgm2.model.opensim.interface.opensiminterface.opensimxmlinterface method)": [[160, "pyCGM2.Model.Opensim.interface.opensimInterface.opensimXmlInterface.update"]], "__init__() (pycgm2.model.opensim.interface.opensiminterface.osimcgminterface method)": [[161, "pyCGM2.Model.Opensim.interface.opensimInterface.osimCgmInterface.__init__"]], "osimcgminterface (class in pycgm2.model.opensim.interface.opensiminterface)": [[161, "pyCGM2.Model.Opensim.interface.opensimInterface.osimCgmInterface"]], "__init__() (pycgm2.model.opensim.interface.opensiminterface.osiminterface method)": [[162, "pyCGM2.Model.Opensim.interface.opensimInterface.osimInterface.__init__"]], "getbodies() (pycgm2.model.opensim.interface.opensiminterface.osiminterface method)": [[162, "pyCGM2.Model.Opensim.interface.opensimInterface.osimInterface.getBodies"]], "getcoordinates() (pycgm2.model.opensim.interface.opensiminterface.osiminterface method)": [[162, "pyCGM2.Model.Opensim.interface.opensimInterface.osimInterface.getCoordinates"]], "getmuscles() (pycgm2.model.opensim.interface.opensiminterface.osiminterface method)": [[162, "pyCGM2.Model.Opensim.interface.opensimInterface.osimInterface.getMuscles"]], "getmuscles_byside() (pycgm2.model.opensim.interface.opensiminterface.osiminterface method)": [[162, "pyCGM2.Model.Opensim.interface.opensimInterface.osimInterface.getMuscles_bySide"]], "osiminterface (class in pycgm2.model.opensim.interface.opensiminterface)": [[162, "pyCGM2.Model.Opensim.interface.opensimInterface.osimInterface"]], "xml (pycgm2.model.opensim.interface.opensiminterface.osiminterface attribute)": [[162, "pyCGM2.Model.Opensim.interface.opensimInterface.osimInterface.xml"]], "__init__() (pycgm2.model.opensim.interface.opensiminterfacefilters.opensiminterfaceanalysesfilter method)": [[163, "pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceAnalysesFilter.__init__"]], "getacq() (pycgm2.model.opensim.interface.opensiminterfacefilters.opensiminterfaceanalysesfilter method)": [[163, "pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceAnalysesFilter.getAcq"]], "opensiminterfaceanalysesfilter (class in pycgm2.model.opensim.interface.opensiminterfacefilters)": [[163, "pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceAnalysesFilter"]], "pushstotoacq() (pycgm2.model.opensim.interface.opensiminterfacefilters.opensiminterfaceanalysesfilter method)": [[163, "pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceAnalysesFilter.pushStoToAcq"]], "run() (pycgm2.model.opensim.interface.opensiminterfacefilters.opensiminterfaceanalysesfilter method)": [[163, "pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceAnalysesFilter.run"]], "__init__() (pycgm2.model.opensim.interface.opensiminterfacefilters.opensiminterfaceinversedynamicsfilter method)": [[164, "pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceInverseDynamicsFilter.__init__"]], "getacq() (pycgm2.model.opensim.interface.opensiminterfacefilters.opensiminterfaceinversedynamicsfilter method)": [[164, "pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceInverseDynamicsFilter.getAcq"]], "opensiminterfaceinversedynamicsfilter (class in pycgm2.model.opensim.interface.opensiminterfacefilters)": [[164, "pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceInverseDynamicsFilter"]], "pushstotoacq() (pycgm2.model.opensim.interface.opensiminterfacefilters.opensiminterfaceinversedynamicsfilter method)": [[164, "pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceInverseDynamicsFilter.pushStoToAcq"]], "run() (pycgm2.model.opensim.interface.opensiminterfacefilters.opensiminterfaceinversedynamicsfilter method)": [[164, "pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceInverseDynamicsFilter.run"]], "__init__() (pycgm2.model.opensim.interface.opensiminterfacefilters.opensiminterfaceinversekinematicsfilter method)": [[165, "pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceInverseKinematicsFilter.__init__"]], "getacq() (pycgm2.model.opensim.interface.opensiminterfacefilters.opensiminterfaceinversekinematicsfilter method)": [[165, "pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceInverseKinematicsFilter.getAcq"]], "opensiminterfaceinversekinematicsfilter (class in pycgm2.model.opensim.interface.opensiminterfacefilters)": [[165, "pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceInverseKinematicsFilter"]], "pushfittedmarkersintoacquisition() (pycgm2.model.opensim.interface.opensiminterfacefilters.opensiminterfaceinversekinematicsfilter method)": [[165, "pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceInverseKinematicsFilter.pushFittedMarkersIntoAcquisition"]], "pushmottoacq() (pycgm2.model.opensim.interface.opensiminterfacefilters.opensiminterfaceinversekinematicsfilter method)": [[165, "pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceInverseKinematicsFilter.pushMotToAcq"]], "run() (pycgm2.model.opensim.interface.opensiminterfacefilters.opensiminterfaceinversekinematicsfilter method)": [[165, "pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceInverseKinematicsFilter.run"]], "__init__() (pycgm2.model.opensim.interface.opensiminterfacefilters.opensiminterfacescalingfilter method)": [[166, "pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceScalingFilter.__init__"]], "getosim() (pycgm2.model.opensim.interface.opensiminterfacefilters.opensiminterfacescalingfilter method)": [[166, "pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceScalingFilter.getOsim"]], "getosimname() (pycgm2.model.opensim.interface.opensiminterfacefilters.opensiminterfacescalingfilter method)": [[166, "pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceScalingFilter.getOsimName"]], "opensiminterfacescalingfilter (class in pycgm2.model.opensim.interface.opensiminterfacefilters)": [[166, "pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceScalingFilter"]], "run() (pycgm2.model.opensim.interface.opensiminterfacefilters.opensiminterfacescalingfilter method)": [[166, "pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceScalingFilter.run"]], "__init__() (pycgm2.model.opensim.interface.opensiminterfacefilters.opensiminterfacestaticoptimizationfilter method)": [[167, "pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceStaticOptimizationFilter.__init__"]], "getacq() (pycgm2.model.opensim.interface.opensiminterfacefilters.opensiminterfacestaticoptimizationfilter method)": [[167, "pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceStaticOptimizationFilter.getAcq"]], "opensiminterfacestaticoptimizationfilter (class in pycgm2.model.opensim.interface.opensiminterfacefilters)": [[167, "pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceStaticOptimizationFilter"]], "pushstotoacq() (pycgm2.model.opensim.interface.opensiminterfacefilters.opensiminterfacestaticoptimizationfilter method)": [[167, "pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceStaticOptimizationFilter.pushStoToAcq"]], "run() (pycgm2.model.opensim.interface.opensiminterfacefilters.opensiminterfacestaticoptimizationfilter method)": [[167, "pyCGM2.Model.Opensim.interface.opensimInterfaceFilters.opensimInterfaceStaticOptimizationFilter.run"]], "analysesxmlcgmdrivenmodelprocedure (class in pycgm2.model.opensim.interface.procedures.analysisreport.opensimanalysesinterfaceprocedure)": [[168, "pyCGM2.Model.Opensim.interface.procedures.analysisReport.opensimAnalysesInterfaceProcedure.AnalysesXmlCgmDrivenModelProcedure"]], "__init__() (pycgm2.model.opensim.interface.procedures.analysisreport.opensimanalysesinterfaceprocedure.analysesxmlcgmdrivenmodelprocedure method)": [[168, "pyCGM2.Model.Opensim.interface.procedures.analysisReport.opensimAnalysesInterfaceProcedure.AnalysesXmlCgmDrivenModelProcedure.__init__"]], "finalize() (pycgm2.model.opensim.interface.procedures.analysisreport.opensimanalysesinterfaceprocedure.analysesxmlcgmdrivenmodelprocedure method)": [[168, "pyCGM2.Model.Opensim.interface.procedures.analysisReport.opensimAnalysesInterfaceProcedure.AnalysesXmlCgmDrivenModelProcedure.finalize"]], "preparexml() (pycgm2.model.opensim.interface.procedures.analysisreport.opensimanalysesinterfaceprocedure.analysesxmlcgmdrivenmodelprocedure method)": [[168, "pyCGM2.Model.Opensim.interface.procedures.analysisReport.opensimAnalysesInterfaceProcedure.AnalysesXmlCgmDrivenModelProcedure.prepareXml"]], "setpose() (pycgm2.model.opensim.interface.procedures.analysisreport.opensimanalysesinterfaceprocedure.analysesxmlcgmdrivenmodelprocedure method)": [[168, "pyCGM2.Model.Opensim.interface.procedures.analysisReport.opensimAnalysesInterfaceProcedure.AnalysesXmlCgmDrivenModelProcedure.setPose"]], "analysesxmlcgmprocedure (class in pycgm2.model.opensim.interface.procedures.analysisreport.opensimanalysesinterfaceprocedure)": [[169, "pyCGM2.Model.Opensim.interface.procedures.analysisReport.opensimAnalysesInterfaceProcedure.AnalysesXmlCgmProcedure"]], "__init__() (pycgm2.model.opensim.interface.procedures.analysisreport.opensimanalysesinterfaceprocedure.analysesxmlcgmprocedure method)": [[169, "pyCGM2.Model.Opensim.interface.procedures.analysisReport.opensimAnalysesInterfaceProcedure.AnalysesXmlCgmProcedure.__init__"]], "finalize() (pycgm2.model.opensim.interface.procedures.analysisreport.opensimanalysesinterfaceprocedure.analysesxmlcgmprocedure method)": [[169, "pyCGM2.Model.Opensim.interface.procedures.analysisReport.opensimAnalysesInterfaceProcedure.AnalysesXmlCgmProcedure.finalize"]], "preparexml() (pycgm2.model.opensim.interface.procedures.analysisreport.opensimanalysesinterfaceprocedure.analysesxmlcgmprocedure method)": [[169, "pyCGM2.Model.Opensim.interface.procedures.analysisReport.opensimAnalysesInterfaceProcedure.AnalysesXmlCgmProcedure.prepareXml"]], "analysesxmlprocedure (class in pycgm2.model.opensim.interface.procedures.analysisreport.opensimanalysesinterfaceprocedure)": [[170, "pyCGM2.Model.Opensim.interface.procedures.analysisReport.opensimAnalysesInterfaceProcedure.AnalysesXmlProcedure"]], "__init__() (pycgm2.model.opensim.interface.procedures.analysisreport.opensimanalysesinterfaceprocedure.analysesxmlprocedure method)": [[170, "pyCGM2.Model.Opensim.interface.procedures.analysisReport.opensimAnalysesInterfaceProcedure.AnalysesXmlProcedure.__init__"]], "finalize() (pycgm2.model.opensim.interface.procedures.analysisreport.opensimanalysesinterfaceprocedure.analysesxmlprocedure method)": [[170, "pyCGM2.Model.Opensim.interface.procedures.analysisReport.opensimAnalysesInterfaceProcedure.AnalysesXmlProcedure.finalize"]], "preparetrial_frombtkacq() (pycgm2.model.opensim.interface.procedures.analysisreport.opensimanalysesinterfaceprocedure.analysesxmlprocedure method)": [[170, "pyCGM2.Model.Opensim.interface.procedures.analysisReport.opensimAnalysesInterfaceProcedure.AnalysesXmlProcedure.prepareTrial_fromBtkAcq"]], "preparetrial_frommotfiles() (pycgm2.model.opensim.interface.procedures.analysisreport.opensimanalysesinterfaceprocedure.analysesxmlprocedure method)": [[170, "pyCGM2.Model.Opensim.interface.procedures.analysisReport.opensimAnalysesInterfaceProcedure.AnalysesXmlProcedure.prepareTrial_fromMotFiles"]], "preparexml() (pycgm2.model.opensim.interface.procedures.analysisreport.opensimanalysesinterfaceprocedure.analysesxmlprocedure method)": [[170, "pyCGM2.Model.Opensim.interface.procedures.analysisReport.opensimAnalysesInterfaceProcedure.AnalysesXmlProcedure.prepareXml"]], "run() (pycgm2.model.opensim.interface.procedures.analysisreport.opensimanalysesinterfaceprocedure.analysesxmlprocedure method)": [[170, "pyCGM2.Model.Opensim.interface.procedures.analysisReport.opensimAnalysesInterfaceProcedure.AnalysesXmlProcedure.run"]], "setframerange() (pycgm2.model.opensim.interface.procedures.analysisreport.opensimanalysesinterfaceprocedure.analysesxmlprocedure method)": [[170, "pyCGM2.Model.Opensim.interface.procedures.analysisReport.opensimAnalysesInterfaceProcedure.AnalysesXmlProcedure.setFrameRange"]], "setsetupfiles() (pycgm2.model.opensim.interface.procedures.analysisreport.opensimanalysesinterfaceprocedure.analysesxmlprocedure method)": [[170, "pyCGM2.Model.Opensim.interface.procedures.analysisReport.opensimAnalysesInterfaceProcedure.AnalysesXmlProcedure.setSetupFiles"]], "settimerange() (pycgm2.model.opensim.interface.procedures.analysisreport.opensimanalysesinterfaceprocedure.analysesxmlprocedure method)": [[170, "pyCGM2.Model.Opensim.interface.procedures.analysisReport.opensimAnalysesInterfaceProcedure.AnalysesXmlProcedure.setTimeRange"]], "inversedynamicsxmlcgmprocedure (class in pycgm2.model.opensim.interface.procedures.inversedynamics.opensiminversedynamicsinterfaceprocedure)": [[171, "pyCGM2.Model.Opensim.interface.procedures.inverseDynamics.opensimInverseDynamicsInterfaceProcedure.InverseDynamicsXmlCgmProcedure"]], "__init__() (pycgm2.model.opensim.interface.procedures.inversedynamics.opensiminversedynamicsinterfaceprocedure.inversedynamicsxmlcgmprocedure method)": [[171, "pyCGM2.Model.Opensim.interface.procedures.inverseDynamics.opensimInverseDynamicsInterfaceProcedure.InverseDynamicsXmlCgmProcedure.__init__"]], "finalize() (pycgm2.model.opensim.interface.procedures.inversedynamics.opensiminversedynamicsinterfaceprocedure.inversedynamicsxmlcgmprocedure method)": [[171, "pyCGM2.Model.Opensim.interface.procedures.inverseDynamics.opensimInverseDynamicsInterfaceProcedure.InverseDynamicsXmlCgmProcedure.finalize"]], "preparexml() (pycgm2.model.opensim.interface.procedures.inversedynamics.opensiminversedynamicsinterfaceprocedure.inversedynamicsxmlcgmprocedure method)": [[171, "pyCGM2.Model.Opensim.interface.procedures.inverseDynamics.opensimInverseDynamicsInterfaceProcedure.InverseDynamicsXmlCgmProcedure.prepareXml"]], "run() (pycgm2.model.opensim.interface.procedures.inversedynamics.opensiminversedynamicsinterfaceprocedure.inversedynamicsxmlcgmprocedure method)": [[171, "pyCGM2.Model.Opensim.interface.procedures.inverseDynamics.opensimInverseDynamicsInterfaceProcedure.InverseDynamicsXmlCgmProcedure.run"]], "inversedynamicsxmlprocedure (class in pycgm2.model.opensim.interface.procedures.inversedynamics.opensiminversedynamicsinterfaceprocedure)": [[172, "pyCGM2.Model.Opensim.interface.procedures.inverseDynamics.opensimInverseDynamicsInterfaceProcedure.InverseDynamicsXmlProcedure"]], "__init__() (pycgm2.model.opensim.interface.procedures.inversedynamics.opensiminversedynamicsinterfaceprocedure.inversedynamicsxmlprocedure method)": [[172, "pyCGM2.Model.Opensim.interface.procedures.inverseDynamics.opensimInverseDynamicsInterfaceProcedure.InverseDynamicsXmlProcedure.__init__"]], "finalize() (pycgm2.model.opensim.interface.procedures.inversedynamics.opensiminversedynamicsinterfaceprocedure.inversedynamicsxmlprocedure method)": [[172, "pyCGM2.Model.Opensim.interface.procedures.inverseDynamics.opensimInverseDynamicsInterfaceProcedure.InverseDynamicsXmlProcedure.finalize"]], "preparetrial_frombtkacq() (pycgm2.model.opensim.interface.procedures.inversedynamics.opensiminversedynamicsinterfaceprocedure.inversedynamicsxmlprocedure method)": [[172, "pyCGM2.Model.Opensim.interface.procedures.inverseDynamics.opensimInverseDynamicsInterfaceProcedure.InverseDynamicsXmlProcedure.prepareTrial_fromBtkAcq"]], "preparexml() (pycgm2.model.opensim.interface.procedures.inversedynamics.opensiminversedynamicsinterfaceprocedure.inversedynamicsxmlprocedure method)": [[172, "pyCGM2.Model.Opensim.interface.procedures.inverseDynamics.opensimInverseDynamicsInterfaceProcedure.InverseDynamicsXmlProcedure.prepareXml"]], "run() (pycgm2.model.opensim.interface.procedures.inversedynamics.opensiminversedynamicsinterfaceprocedure.inversedynamicsxmlprocedure method)": [[172, "pyCGM2.Model.Opensim.interface.procedures.inverseDynamics.opensimInverseDynamicsInterfaceProcedure.InverseDynamicsXmlProcedure.run"]], "setframerange() (pycgm2.model.opensim.interface.procedures.inversedynamics.opensiminversedynamicsinterfaceprocedure.inversedynamicsxmlprocedure method)": [[172, "pyCGM2.Model.Opensim.interface.procedures.inverseDynamics.opensimInverseDynamicsInterfaceProcedure.InverseDynamicsXmlProcedure.setFrameRange"]], "setsetupfiles() (pycgm2.model.opensim.interface.procedures.inversedynamics.opensiminversedynamicsinterfaceprocedure.inversedynamicsxmlprocedure method)": [[172, "pyCGM2.Model.Opensim.interface.procedures.inverseDynamics.opensimInverseDynamicsInterfaceProcedure.InverseDynamicsXmlProcedure.setSetupFiles"]], "settimerange() (pycgm2.model.opensim.interface.procedures.inversedynamics.opensiminversedynamicsinterfaceprocedure.inversedynamicsxmlprocedure method)": [[172, "pyCGM2.Model.Opensim.interface.procedures.inverseDynamics.opensimInverseDynamicsInterfaceProcedure.InverseDynamicsXmlProcedure.setTimeRange"]], "inversekinematicxmlcgmprocedure (class in pycgm2.model.opensim.interface.procedures.inversekinematics.opensiminversekinematicsinterfaceprocedure)": [[173, "pyCGM2.Model.Opensim.interface.procedures.inverseKinematics.opensimInverseKinematicsInterfaceProcedure.InverseKinematicXmlCgmProcedure"]], "__init__() (pycgm2.model.opensim.interface.procedures.inversekinematics.opensiminversekinematicsinterfaceprocedure.inversekinematicxmlcgmprocedure method)": [[173, "pyCGM2.Model.Opensim.interface.procedures.inverseKinematics.opensimInverseKinematicsInterfaceProcedure.InverseKinematicXmlCgmProcedure.__init__"]], "finalize() (pycgm2.model.opensim.interface.procedures.inversekinematics.opensiminversekinematicsinterfaceprocedure.inversekinematicxmlcgmprocedure method)": [[173, "pyCGM2.Model.Opensim.interface.procedures.inverseKinematics.opensimInverseKinematicsInterfaceProcedure.InverseKinematicXmlCgmProcedure.finalize"]], "inversekinematicxmlprocedure (class in pycgm2.model.opensim.interface.procedures.inversekinematics.opensiminversekinematicsinterfaceprocedure)": [[174, "pyCGM2.Model.Opensim.interface.procedures.inverseKinematics.opensimInverseKinematicsInterfaceProcedure.InverseKinematicXmlProcedure"]], "__init__() (pycgm2.model.opensim.interface.procedures.inversekinematics.opensiminversekinematicsinterfaceprocedure.inversekinematicxmlprocedure method)": [[174, "pyCGM2.Model.Opensim.interface.procedures.inverseKinematics.opensimInverseKinematicsInterfaceProcedure.InverseKinematicXmlProcedure.__init__"]], "finalize() (pycgm2.model.opensim.interface.procedures.inversekinematics.opensiminversekinematicsinterfaceprocedure.inversekinematicxmlprocedure method)": [[174, "pyCGM2.Model.Opensim.interface.procedures.inverseKinematics.opensimInverseKinematicsInterfaceProcedure.InverseKinematicXmlProcedure.finalize"]], "preparetrial_frombtkacq() (pycgm2.model.opensim.interface.procedures.inversekinematics.opensiminversekinematicsinterfaceprocedure.inversekinematicxmlprocedure method)": [[174, "pyCGM2.Model.Opensim.interface.procedures.inverseKinematics.opensimInverseKinematicsInterfaceProcedure.InverseKinematicXmlProcedure.prepareTrial_fromBtkAcq"]], "prepareweights() (pycgm2.model.opensim.interface.procedures.inversekinematics.opensiminversekinematicsinterfaceprocedure.inversekinematicxmlprocedure method)": [[174, "pyCGM2.Model.Opensim.interface.procedures.inverseKinematics.opensimInverseKinematicsInterfaceProcedure.InverseKinematicXmlProcedure.prepareWeights"]], "preparexml() (pycgm2.model.opensim.interface.procedures.inversekinematics.opensiminversekinematicsinterfaceprocedure.inversekinematicxmlprocedure method)": [[174, "pyCGM2.Model.Opensim.interface.procedures.inverseKinematics.opensimInverseKinematicsInterfaceProcedure.InverseKinematicXmlProcedure.prepareXml"]], "run() (pycgm2.model.opensim.interface.procedures.inversekinematics.opensiminversekinematicsinterfaceprocedure.inversekinematicxmlprocedure method)": [[174, "pyCGM2.Model.Opensim.interface.procedures.inverseKinematics.opensimInverseKinematicsInterfaceProcedure.InverseKinematicXmlProcedure.run"]], "setaccuracy() (pycgm2.model.opensim.interface.procedures.inversekinematics.opensiminversekinematicsinterfaceprocedure.inversekinematicxmlprocedure method)": [[174, "pyCGM2.Model.Opensim.interface.procedures.inverseKinematics.opensimInverseKinematicsInterfaceProcedure.InverseKinematicXmlProcedure.setAccuracy"]], "setframerange() (pycgm2.model.opensim.interface.procedures.inversekinematics.opensiminversekinematicsinterfaceprocedure.inversekinematicxmlprocedure method)": [[174, "pyCGM2.Model.Opensim.interface.procedures.inverseKinematics.opensimInverseKinematicsInterfaceProcedure.InverseKinematicXmlProcedure.setFrameRange"]], "setsetupfile() (pycgm2.model.opensim.interface.procedures.inversekinematics.opensiminversekinematicsinterfaceprocedure.inversekinematicxmlprocedure method)": [[174, "pyCGM2.Model.Opensim.interface.procedures.inverseKinematics.opensimInverseKinematicsInterfaceProcedure.InverseKinematicXmlProcedure.setSetupFile"]], "settimerange() (pycgm2.model.opensim.interface.procedures.inversekinematics.opensiminversekinematicsinterfaceprocedure.inversekinematicxmlprocedure method)": [[174, "pyCGM2.Model.Opensim.interface.procedures.inverseKinematics.opensimInverseKinematicsInterfaceProcedure.InverseKinematicXmlProcedure.setTimeRange"]], "scalingxmlcgmprocedure (class in pycgm2.model.opensim.interface.procedures.scaling.opensimscalinginterfaceprocedure)": [[175, "pyCGM2.Model.Opensim.interface.procedures.scaling.opensimScalingInterfaceProcedure.ScalingXmlCgmProcedure"]], "__init__() (pycgm2.model.opensim.interface.procedures.scaling.opensimscalinginterfaceprocedure.scalingxmlcgmprocedure method)": [[175, "pyCGM2.Model.Opensim.interface.procedures.scaling.opensimScalingInterfaceProcedure.ScalingXmlCgmProcedure.__init__"]], "finalize() (pycgm2.model.opensim.interface.procedures.scaling.opensimscalinginterfaceprocedure.scalingxmlcgmprocedure method)": [[175, "pyCGM2.Model.Opensim.interface.procedures.scaling.opensimScalingInterfaceProcedure.ScalingXmlCgmProcedure.finalize"]], "preparexml() (pycgm2.model.opensim.interface.procedures.scaling.opensimscalinginterfaceprocedure.scalingxmlcgmprocedure method)": [[175, "pyCGM2.Model.Opensim.interface.procedures.scaling.opensimScalingInterfaceProcedure.ScalingXmlCgmProcedure.prepareXml"]], "run() (pycgm2.model.opensim.interface.procedures.scaling.opensimscalinginterfaceprocedure.scalingxmlcgmprocedure method)": [[175, "pyCGM2.Model.Opensim.interface.procedures.scaling.opensimScalingInterfaceProcedure.ScalingXmlCgmProcedure.run"]], "scalingxmlprocedure (class in pycgm2.model.opensim.interface.procedures.scaling.opensimscalinginterfaceprocedure)": [[176, "pyCGM2.Model.Opensim.interface.procedures.scaling.opensimScalingInterfaceProcedure.ScalingXmlProcedure"]], "__init__() (pycgm2.model.opensim.interface.procedures.scaling.opensimscalinginterfaceprocedure.scalingxmlprocedure method)": [[176, "pyCGM2.Model.Opensim.interface.procedures.scaling.opensimScalingInterfaceProcedure.ScalingXmlProcedure.__init__"]], "finalize() (pycgm2.model.opensim.interface.procedures.scaling.opensimscalinginterfaceprocedure.scalingxmlprocedure method)": [[176, "pyCGM2.Model.Opensim.interface.procedures.scaling.opensimScalingInterfaceProcedure.ScalingXmlProcedure.finalize"]], "preparestatictrial_frombtkacq() (pycgm2.model.opensim.interface.procedures.scaling.opensimscalinginterfaceprocedure.scalingxmlprocedure method)": [[176, "pyCGM2.Model.Opensim.interface.procedures.scaling.opensimScalingInterfaceProcedure.ScalingXmlProcedure.prepareStaticTrial_fromBtkAcq"]], "preparexml() (pycgm2.model.opensim.interface.procedures.scaling.opensimscalinginterfaceprocedure.scalingxmlprocedure method)": [[176, "pyCGM2.Model.Opensim.interface.procedures.scaling.opensimScalingInterfaceProcedure.ScalingXmlProcedure.prepareXml"]], "run() (pycgm2.model.opensim.interface.procedures.scaling.opensimscalinginterfaceprocedure.scalingxmlprocedure method)": [[176, "pyCGM2.Model.Opensim.interface.procedures.scaling.opensimScalingInterfaceProcedure.ScalingXmlProcedure.run"]], "setsetupfiles() (pycgm2.model.opensim.interface.procedures.scaling.opensimscalinginterfaceprocedure.scalingxmlprocedure method)": [[176, "pyCGM2.Model.Opensim.interface.procedures.scaling.opensimScalingInterfaceProcedure.ScalingXmlProcedure.setSetupFiles"]], "staticoptimisationxmlcgmprocedure (class in pycgm2.model.opensim.interface.procedures.staticoptimisation.opensimstaticoptimizationinterfaceprocedure)": [[177, "pyCGM2.Model.Opensim.interface.procedures.staticOptimisation.opensimStaticOptimizationInterfaceProcedure.StaticOptimisationXmlCgmProcedure"]], "__init__() (pycgm2.model.opensim.interface.procedures.staticoptimisation.opensimstaticoptimizationinterfaceprocedure.staticoptimisationxmlcgmprocedure method)": [[177, "pyCGM2.Model.Opensim.interface.procedures.staticOptimisation.opensimStaticOptimizationInterfaceProcedure.StaticOptimisationXmlCgmProcedure.__init__"]], "finalize() (pycgm2.model.opensim.interface.procedures.staticoptimisation.opensimstaticoptimizationinterfaceprocedure.staticoptimisationxmlcgmprocedure method)": [[177, "pyCGM2.Model.Opensim.interface.procedures.staticOptimisation.opensimStaticOptimizationInterfaceProcedure.StaticOptimisationXmlCgmProcedure.finalize"]], "preparexml() (pycgm2.model.opensim.interface.procedures.staticoptimisation.opensimstaticoptimizationinterfaceprocedure.staticoptimisationxmlcgmprocedure method)": [[177, "pyCGM2.Model.Opensim.interface.procedures.staticOptimisation.opensimStaticOptimizationInterfaceProcedure.StaticOptimisationXmlCgmProcedure.prepareXml"]], "staticoptimisationxmlprocedure (class in pycgm2.model.opensim.interface.procedures.staticoptimisation.opensimstaticoptimizationinterfaceprocedure)": [[178, "pyCGM2.Model.Opensim.interface.procedures.staticOptimisation.opensimStaticOptimizationInterfaceProcedure.StaticOptimisationXmlProcedure"]], "__init__() (pycgm2.model.opensim.interface.procedures.staticoptimisation.opensimstaticoptimizationinterfaceprocedure.staticoptimisationxmlprocedure method)": [[178, "pyCGM2.Model.Opensim.interface.procedures.staticOptimisation.opensimStaticOptimizationInterfaceProcedure.StaticOptimisationXmlProcedure.__init__"]], "finalize() (pycgm2.model.opensim.interface.procedures.staticoptimisation.opensimstaticoptimizationinterfaceprocedure.staticoptimisationxmlprocedure method)": [[178, "pyCGM2.Model.Opensim.interface.procedures.staticOptimisation.opensimStaticOptimizationInterfaceProcedure.StaticOptimisationXmlProcedure.finalize"]], "preparetrial_frombtkacq() (pycgm2.model.opensim.interface.procedures.staticoptimisation.opensimstaticoptimizationinterfaceprocedure.staticoptimisationxmlprocedure method)": [[178, "pyCGM2.Model.Opensim.interface.procedures.staticOptimisation.opensimStaticOptimizationInterfaceProcedure.StaticOptimisationXmlProcedure.prepareTrial_fromBtkAcq"]], "preparexml() (pycgm2.model.opensim.interface.procedures.staticoptimisation.opensimstaticoptimizationinterfaceprocedure.staticoptimisationxmlprocedure method)": [[178, "pyCGM2.Model.Opensim.interface.procedures.staticOptimisation.opensimStaticOptimizationInterfaceProcedure.StaticOptimisationXmlProcedure.prepareXml"]], "run() (pycgm2.model.opensim.interface.procedures.staticoptimisation.opensimstaticoptimizationinterfaceprocedure.staticoptimisationxmlprocedure method)": [[178, "pyCGM2.Model.Opensim.interface.procedures.staticOptimisation.opensimStaticOptimizationInterfaceProcedure.StaticOptimisationXmlProcedure.run"]], "setframerange() (pycgm2.model.opensim.interface.procedures.staticoptimisation.opensimstaticoptimizationinterfaceprocedure.staticoptimisationxmlprocedure method)": [[178, "pyCGM2.Model.Opensim.interface.procedures.staticOptimisation.opensimStaticOptimizationInterfaceProcedure.StaticOptimisationXmlProcedure.setFrameRange"]], "setresultsdirname() (pycgm2.model.opensim.interface.procedures.staticoptimisation.opensimstaticoptimizationinterfaceprocedure.staticoptimisationxmlprocedure method)": [[178, "pyCGM2.Model.Opensim.interface.procedures.staticOptimisation.opensimStaticOptimizationInterfaceProcedure.StaticOptimisationXmlProcedure.setResultsDirname"]], "setsetupfiles() (pycgm2.model.opensim.interface.procedures.staticoptimisation.opensimstaticoptimizationinterfaceprocedure.staticoptimisationxmlprocedure method)": [[178, "pyCGM2.Model.Opensim.interface.procedures.staticOptimisation.opensimStaticOptimizationInterfaceProcedure.StaticOptimisationXmlProcedure.setSetupFiles"]], "settimerange() (pycgm2.model.opensim.interface.procedures.staticoptimisation.opensimstaticoptimizationinterfaceprocedure.staticoptimisationxmlprocedure method)": [[178, "pyCGM2.Model.Opensim.interface.procedures.staticOptimisation.opensimStaticOptimizationInterfaceProcedure.StaticOptimisationXmlProcedure.setTimeRange"]], "forceplateintegrationprocedure (class in pycgm2.model.procedures.forceplateintegrationprocedures)": [[179, "pyCGM2.Model.Procedures.forcePlateIntegrationProcedures.ForcePlateIntegrationProcedure"]], "__init__() (pycgm2.model.procedures.forceplateintegrationprocedures.forceplateintegrationprocedure method)": [[179, "pyCGM2.Model.Procedures.forcePlateIntegrationProcedures.ForcePlateIntegrationProcedure.__init__"]], "gaitforceplateintegrationprocedure (class in pycgm2.model.procedures.forceplateintegrationprocedures)": [[180, "pyCGM2.Model.Procedures.forcePlateIntegrationProcedures.GaitForcePlateIntegrationProcedure"]], "__init__() (pycgm2.model.procedures.forceplateintegrationprocedures.gaitforceplateintegrationprocedure method)": [[180, "pyCGM2.Model.Procedures.forcePlateIntegrationProcedures.GaitForcePlateIntegrationProcedure.__init__"]], "compute() (pycgm2.model.procedures.forceplateintegrationprocedures.gaitforceplateintegrationprocedure method)": [[180, "id0"], [180, "pyCGM2.Model.Procedures.forcePlateIntegrationProcedures.GaitForcePlateIntegrationProcedure.compute"]], "modelcorrectionprocedure (class in pycgm2.model.procedures.modelmotioncorrection)": [[181, "pyCGM2.Model.Procedures.modelMotionCorrection.ModelCorrectionProcedure"]], "__init__() (pycgm2.model.procedures.modelmotioncorrection.modelcorrectionprocedure method)": [[181, "pyCGM2.Model.Procedures.modelMotionCorrection.ModelCorrectionProcedure.__init__"]], "naim2019thighmisaligmentcorrectionprocedure (class in pycgm2.model.procedures.modelmotioncorrection)": [[182, "pyCGM2.Model.Procedures.modelMotionCorrection.Naim2019ThighMisaligmentCorrectionProcedure"]], "__init__() (pycgm2.model.procedures.modelmotioncorrection.naim2019thighmisaligmentcorrectionprocedure method)": [[182, "pyCGM2.Model.Procedures.modelMotionCorrection.Naim2019ThighMisaligmentCorrectionProcedure.__init__"]], "correct() (pycgm2.model.procedures.modelmotioncorrection.naim2019thighmisaligmentcorrectionprocedure method)": [[182, "pyCGM2.Model.Procedures.modelMotionCorrection.Naim2019ThighMisaligmentCorrectionProcedure.correct"]], "generalscoreresidualprocedure (class in pycgm2.model.procedures.modelquality)": [[183, "pyCGM2.Model.Procedures.modelQuality.GeneralScoreResidualProcedure"]], "__init__() (pycgm2.model.procedures.modelquality.generalscoreresidualprocedure method)": [[183, "pyCGM2.Model.Procedures.modelQuality.GeneralScoreResidualProcedure.__init__"]], "setdefinition() (pycgm2.model.procedures.modelquality.generalscoreresidualprocedure method)": [[183, "pyCGM2.Model.Procedures.modelQuality.GeneralScoreResidualProcedure.setDefinition"]], "modelscoreresidualprocedure (class in pycgm2.model.procedures.modelquality)": [[184, "pyCGM2.Model.Procedures.modelQuality.ModelScoreResidualProcedure"]], "__init__() (pycgm2.model.procedures.modelquality.modelscoreresidualprocedure method)": [[184, "pyCGM2.Model.Procedures.modelQuality.ModelScoreResidualProcedure.__init__"]], "qualityprocedure (class in pycgm2.model.procedures.modelquality)": [[185, "pyCGM2.Model.Procedures.modelQuality.QualityProcedure"]], "__init__() (pycgm2.model.procedures.modelquality.qualityprocedure method)": [[185, "pyCGM2.Model.Procedures.modelQuality.QualityProcedure.__init__"]], "wandanglequalityprocedure (class in pycgm2.model.procedures.modelquality)": [[186, "pyCGM2.Model.Procedures.modelQuality.WandAngleQualityProcedure"]], "__init__() (pycgm2.model.procedures.modelquality.wandanglequalityprocedure method)": [[186, "pyCGM2.Model.Procedures.modelQuality.WandAngleQualityProcedure.__init__"]], "run() (pycgm2.model.procedures.modelquality.wandanglequalityprocedure method)": [[186, "pyCGM2.Model.Procedures.modelQuality.WandAngleQualityProcedure.run"]], "bsp (class in pycgm2.model.bodysegmentparameters)": [[187, "pyCGM2.Model.bodySegmentParameters.Bsp"]], "__init__() (pycgm2.model.bodysegmentparameters.bsp method)": [[187, "pyCGM2.Model.bodySegmentParameters.Bsp.__init__"]], "compute() (pycgm2.model.bodysegmentparameters.bsp method)": [[187, "pyCGM2.Model.bodySegmentParameters.Bsp.compute"]], "setparameters() (pycgm2.model.bodysegmentparameters.bsp class method)": [[187, "pyCGM2.Model.bodySegmentParameters.Bsp.setParameters"]], "updatefromcustommp() (in module pycgm2.model.bodysegmentparameters)": [[188, "pyCGM2.Model.bodySegmentParameters.updateFromcustomMp"]], "frame (class in pycgm2.model.frame)": [[189, "pyCGM2.Model.frame.Frame"]], "__init__() (pycgm2.model.frame.frame method)": [[189, "pyCGM2.Model.frame.Frame.__init__"]], "addnode() (pycgm2.model.frame.frame method)": [[189, "pyCGM2.Model.frame.Frame.addNode"]], "constructfromanglesaxis() (pycgm2.model.frame.frame method)": [[189, "pyCGM2.Model.frame.Frame.constructFromAnglesAxis"]], "constructfromquaternion() (pycgm2.model.frame.frame method)": [[189, "pyCGM2.Model.frame.Frame.constructFromQuaternion"]], "copynode() (pycgm2.model.frame.frame method)": [[189, "pyCGM2.Model.frame.Frame.copyNode"]], "erasenodes() (pycgm2.model.frame.frame method)": [[189, "pyCGM2.Model.frame.Frame.eraseNodes"]], "getangleaxis() (pycgm2.model.frame.frame method)": [[189, "pyCGM2.Model.frame.Frame.getAngleAxis"]], "getglobalposition() (pycgm2.model.frame.frame method)": [[189, "pyCGM2.Model.frame.Frame.getGlobalPosition"]], "getnodeindex() (pycgm2.model.frame.frame method)": [[189, "pyCGM2.Model.frame.Frame.getNodeIndex"]], "getnodelabels() (pycgm2.model.frame.frame method)": [[189, "pyCGM2.Model.frame.Frame.getNodeLabels"]], "getnode_byindex() (pycgm2.model.frame.frame method)": [[189, "pyCGM2.Model.frame.Frame.getNode_byIndex"]], "getnode_bylabel() (pycgm2.model.frame.frame method)": [[189, "pyCGM2.Model.frame.Frame.getNode_byLabel"]], "getnodes() (pycgm2.model.frame.frame method)": [[189, "pyCGM2.Model.frame.Frame.getNodes"]], "getquaternion() (pycgm2.model.frame.frame method)": [[189, "pyCGM2.Model.frame.Frame.getQuaternion"]], "getrotation() (pycgm2.model.frame.frame method)": [[189, "pyCGM2.Model.frame.Frame.getRotation"]], "gettranslation() (pycgm2.model.frame.frame method)": [[189, "pyCGM2.Model.frame.Frame.getTranslation"]], "isnodeexist() (pycgm2.model.frame.frame method)": [[189, "pyCGM2.Model.frame.Frame.isNodeExist"]], "setaxes() (pycgm2.model.frame.frame method)": [[189, "pyCGM2.Model.frame.Frame.setAxes"]], "setrotation() (pycgm2.model.frame.frame method)": [[189, "pyCGM2.Model.frame.Frame.setRotation"]], "settranslation() (pycgm2.model.frame.frame method)": [[189, "pyCGM2.Model.frame.Frame.setTranslation"]], "update() (pycgm2.model.frame.frame method)": [[189, "pyCGM2.Model.frame.Frame.update"]], "updateaxisfromrotation() (pycgm2.model.frame.frame method)": [[189, "pyCGM2.Model.frame.Frame.updateAxisFromRotation"]], "updatenode() (pycgm2.model.frame.frame method)": [[189, "pyCGM2.Model.frame.Frame.updateNode"]], "node (class in pycgm2.model.frame)": [[190, "pyCGM2.Model.frame.Node"]], "__init__() (pycgm2.model.frame.node method)": [[190, "pyCGM2.Model.frame.Node.__init__"]], "computeglobal() (pycgm2.model.frame.node method)": [[190, "pyCGM2.Model.frame.Node.computeGlobal"]], "computelocal() (pycgm2.model.frame.node method)": [[190, "pyCGM2.Model.frame.Node.computeLocal"]], "getdescription() (pycgm2.model.frame.node method)": [[190, "pyCGM2.Model.frame.Node.getDescription"]], "getglobal() (pycgm2.model.frame.node method)": [[190, "pyCGM2.Model.frame.Node.getGlobal"]], "getlabel() (pycgm2.model.frame.node method)": [[190, "pyCGM2.Model.frame.Node.getLabel"]], "getlocal() (pycgm2.model.frame.node method)": [[190, "pyCGM2.Model.frame.Node.getLocal"]], "setdescription() (pycgm2.model.frame.node method)": [[190, "pyCGM2.Model.frame.Node.setDescription"]], "angleaxis_to_quaternion() (in module pycgm2.model.frame)": [[191, "pyCGM2.Model.frame.angleAxis_TO_quaternion"]], "angleaxis_to_rotationmatrix() (in module pycgm2.model.frame)": [[192, "pyCGM2.Model.frame.angleAxis_TO_rotationMatrix"]], "quaternion_to_angleaxis() (in module pycgm2.model.frame)": [[193, "pyCGM2.Model.frame.quaternion_TO_angleAxis"]], "quaternion_to_rotationmatrix() (in module pycgm2.model.frame)": [[194, "pyCGM2.Model.frame.quaternion_TO_rotationMatrix"]], "rotationmatrix_to_angleaxis() (in module pycgm2.model.frame)": [[195, "pyCGM2.Model.frame.rotationMatrix_TO_angleAxis"]], "rotationmatrix_to_quaternion() (in module pycgm2.model.frame)": [[196, "pyCGM2.Model.frame.rotationMatrix_TO_quaternion"]], "setframedata() (in module pycgm2.model.frame)": [[197, "pyCGM2.Model.frame.setFrameData"]], "anatomicalreferential (class in pycgm2.model.model)": [[198, "pyCGM2.Model.model.AnatomicalReferential"]], "__init__() (pycgm2.model.model.anatomicalreferential method)": [[198, "pyCGM2.Model.model.AnatomicalReferential.__init__"]], "clinicaldescriptor (class in pycgm2.model.model)": [[199, "pyCGM2.Model.model.ClinicalDescriptor"]], "__init__() (pycgm2.model.model.clinicaldescriptor method)": [[199, "pyCGM2.Model.model.ClinicalDescriptor.__init__"]], "joint (class in pycgm2.model.model)": [[200, "pyCGM2.Model.model.Joint"]], "__init__() (pycgm2.model.model.joint method)": [[200, "pyCGM2.Model.model.Joint.__init__"]], "model (class in pycgm2.model.model)": [[201, "pyCGM2.Model.model.Model"]], "__init__() (pycgm2.model.model.model method)": [[201, "pyCGM2.Model.model.Model.__init__"]], "addanthropoinputparameters() (pycgm2.model.model.model method)": [[201, "pyCGM2.Model.model.Model.addAnthropoInputParameters"]], "addchain() (pycgm2.model.model.model method)": [[201, "pyCGM2.Model.model.Model.addChain"]], "addjoint() (pycgm2.model.model.model method)": [[201, "pyCGM2.Model.model.Model.addJoint"]], "addsegment() (pycgm2.model.model.model method)": [[201, "pyCGM2.Model.model.Model.addSegment"]], "checkcalibrationproperty() (pycgm2.model.model.model method)": [[201, "pyCGM2.Model.model.Model.checkCalibrationProperty"]], "decomposetrackingmarkers() (pycgm2.model.model.model method)": [[201, "pyCGM2.Model.model.Model.decomposeTrackingMarkers"]], "displaymotioncoordinatesystem() (pycgm2.model.model.model method)": [[201, "pyCGM2.Model.model.Model.displayMotionCoordinateSystem"]], "displaymotionviconcoordinatesystem() (pycgm2.model.model.model method)": [[201, "pyCGM2.Model.model.Model.displayMotionViconCoordinateSystem"]], "displaystaticcoordinatesystem() (pycgm2.model.model.model method)": [[201, "pyCGM2.Model.model.Model.displayStaticCoordinateSystem"]], "getbodypart() (pycgm2.model.model.model method)": [[201, "pyCGM2.Model.model.Model.getBodyPart"]], "getcentreofmass() (pycgm2.model.model.model method)": [[201, "pyCGM2.Model.model.Model.getCentreOfMass"]], "getclinicaldescriptor() (pycgm2.model.model.model method)": [[201, "pyCGM2.Model.model.Model.getClinicalDescriptor"]], "getjoint() (pycgm2.model.model.model method)": [[201, "pyCGM2.Model.model.Model.getJoint"]], "getjointlist() (pycgm2.model.model.model method)": [[201, "pyCGM2.Model.model.Model.getJointList"]], "getproperty() (pycgm2.model.model.model method)": [[201, "pyCGM2.Model.model.Model.getProperty"]], "getsegment() (pycgm2.model.model.model method)": [[201, "pyCGM2.Model.model.Model.getSegment"]], "getsegmentbyindex() (pycgm2.model.model.model method)": [[201, "pyCGM2.Model.model.Model.getSegmentByIndex"]], "getsegmentindex() (pycgm2.model.model.model method)": [[201, "pyCGM2.Model.model.Model.getSegmentIndex"]], "getsegmentlist() (pycgm2.model.model.model method)": [[201, "pyCGM2.Model.model.Model.getSegmentList"]], "iscalibrationproperty() (pycgm2.model.model.model method)": [[201, "pyCGM2.Model.model.Model.isCalibrationProperty"]], "isproperty() (pycgm2.model.model.model method)": [[201, "pyCGM2.Model.model.Model.isProperty"]], "removejoint() (pycgm2.model.model.model method)": [[201, "pyCGM2.Model.model.Model.removeJoint"]], "removesegment() (pycgm2.model.model.model method)": [[201, "pyCGM2.Model.model.Model.removeSegment"]], "setbodypart() (pycgm2.model.model.model method)": [[201, "pyCGM2.Model.model.Model.setBodyPart"]], "setcalibrationproperty() (pycgm2.model.model.model method)": [[201, "pyCGM2.Model.model.Model.setCalibrationProperty"]], "setcentreofmass() (pycgm2.model.model.model method)": [[201, "pyCGM2.Model.model.Model.setCentreOfMass"]], "setclinicaldescriptor() (pycgm2.model.model.model method)": [[201, "pyCGM2.Model.model.Model.setClinicalDescriptor"]], "setcoordinatesystemdefinition() (pycgm2.model.model.model method)": [[201, "pyCGM2.Model.model.Model.setCoordinateSystemDefinition"]], "setproperty() (pycgm2.model.model.model method)": [[201, "pyCGM2.Model.model.Model.setProperty"]], "setstaticfilename() (pycgm2.model.model.model method)": [[201, "pyCGM2.Model.model.Model.setStaticFilename"]], "updatesegmentfromcopy() (pycgm2.model.model.model method)": [[201, "pyCGM2.Model.model.Model.updateSegmentFromCopy"]], "model6dof (class in pycgm2.model.model)": [[202, "pyCGM2.Model.model.Model6Dof"]], "__init__() (pycgm2.model.model.model6dof method)": [[202, "pyCGM2.Model.model.Model6Dof.__init__"]], "computemotionanatomicalframe() (pycgm2.model.model.model6dof method)": [[202, "pyCGM2.Model.model.Model6Dof.computeMotionAnatomicalFrame"]], "computemotiontechnicalframe() (pycgm2.model.model.model6dof method)": [[202, "pyCGM2.Model.model.Model6Dof.computeMotionTechnicalFrame"]], "referential (class in pycgm2.model.model)": [[203, "pyCGM2.Model.model.Referential"]], "__init__() (pycgm2.model.model.referential method)": [[203, "pyCGM2.Model.model.Referential.__init__"]], "addmotionframe() (pycgm2.model.model.referential method)": [[203, "pyCGM2.Model.model.Referential.addMotionFrame"]], "additionalinfos (pycgm2.model.model.referential attribute)": [[203, "pyCGM2.Model.model.Referential.additionalInfos"]], "getaxistrajectory() (pycgm2.model.model.referential method)": [[203, "pyCGM2.Model.model.Referential.getAxisTrajectory"]], "getnodetrajectory() (pycgm2.model.model.referential method)": [[203, "pyCGM2.Model.model.Referential.getNodeTrajectory"]], "getorigintrajectory() (pycgm2.model.model.referential method)": [[203, "pyCGM2.Model.model.Referential.getOriginTrajectory"]], "motion (pycgm2.model.model.referential attribute)": [[203, "pyCGM2.Model.model.Referential.motion"]], "relativematrixanatomic (pycgm2.model.model.referential attribute)": [[203, "pyCGM2.Model.model.Referential.relativeMatrixAnatomic"]], "setstaticframe() (pycgm2.model.model.referential method)": [[203, "pyCGM2.Model.model.Referential.setStaticFrame"]], "static (pycgm2.model.model.referential attribute)": [[203, "pyCGM2.Model.model.Referential.static"]], "segment (class in pycgm2.model.model)": [[204, "pyCGM2.Model.model.Segment"]], "__init__() (pycgm2.model.model.segment method)": [[204, "pyCGM2.Model.model.Segment.__init__"]], "addcalibrationmarkerlabel() (pycgm2.model.model.segment method)": [[204, "pyCGM2.Model.model.Segment.addCalibrationMarkerLabel"]], "addexternaldevicewrench() (pycgm2.model.model.segment method)": [[204, "pyCGM2.Model.model.Segment.addExternalDeviceWrench"]], "addmarkerlabel() (pycgm2.model.model.segment method)": [[204, "pyCGM2.Model.model.Segment.addMarkerLabel"]], "addtechnicalreferential() (pycgm2.model.model.segment method)": [[204, "pyCGM2.Model.model.Segment.addTechnicalReferential"]], "addtrackingmarkerlabel() (pycgm2.model.model.segment method)": [[204, "pyCGM2.Model.model.Segment.addTrackingMarkerLabel"]], "downsampleexternaldevicewrenchs() (pycgm2.model.model.segment method)": [[204, "pyCGM2.Model.model.Segment.downSampleExternalDeviceWrenchs"]], "getangularacceleration() (pycgm2.model.model.segment method)": [[204, "pyCGM2.Model.model.Segment.getAngularAcceleration"]], "getangularvelocity() (pycgm2.model.model.segment method)": [[204, "pyCGM2.Model.model.Segment.getAngularVelocity"]], "getcomacceleration() (pycgm2.model.model.segment method)": [[204, "pyCGM2.Model.model.Segment.getComAcceleration"]], "getcomtrajectory() (pycgm2.model.model.segment method)": [[204, "pyCGM2.Model.model.Segment.getComTrajectory"]], "getcomvelocity() (pycgm2.model.model.segment method)": [[204, "pyCGM2.Model.model.Segment.getComVelocity"]], "getexistframes() (pycgm2.model.model.segment method)": [[204, "pyCGM2.Model.model.Segment.getExistFrames"]], "getreferential() (pycgm2.model.model.segment method)": [[204, "pyCGM2.Model.model.Segment.getReferential"]], "isexternaldevicewrenchsconnected() (pycgm2.model.model.segment method)": [[204, "pyCGM2.Model.model.Segment.isExternalDeviceWrenchsConnected"]], "removetrackingmarker() (pycgm2.model.model.segment method)": [[204, "pyCGM2.Model.model.Segment.removeTrackingMarker"]], "resetmarkerlabels() (pycgm2.model.model.segment method)": [[204, "pyCGM2.Model.model.Segment.resetMarkerLabels"]], "setcomposition() (pycgm2.model.model.segment method)": [[204, "pyCGM2.Model.model.Segment.setComPosition"]], "setexistframes() (pycgm2.model.model.segment method)": [[204, "pyCGM2.Model.model.Segment.setExistFrames"]], "setinertiatensor() (pycgm2.model.model.segment method)": [[204, "pyCGM2.Model.model.Segment.setInertiaTensor"]], "setlength() (pycgm2.model.model.segment method)": [[204, "pyCGM2.Model.model.Segment.setLength"]], "setmass() (pycgm2.model.model.segment method)": [[204, "pyCGM2.Model.model.Segment.setMass"]], "setrog() (pycgm2.model.model.segment method)": [[204, "pyCGM2.Model.model.Segment.setRog"]], "zeroingexternaldevice() (pycgm2.model.model.segment method)": [[204, "pyCGM2.Model.model.Segment.zeroingExternalDevice"]], "zeroingproximalwrench() (pycgm2.model.model.segment method)": [[204, "pyCGM2.Model.model.Segment.zeroingProximalWrench"]], "technicalreferential (class in pycgm2.model.model)": [[205, "pyCGM2.Model.model.TechnicalReferential"]], "__init__() (pycgm2.model.model.technicalreferential method)": [[205, "pyCGM2.Model.model.TechnicalReferential.__init__"]], "label (pycgm2.model.model.technicalreferential attribute)": [[205, "pyCGM2.Model.model.TechnicalReferential.label"]], "relativematrixanatomic (pycgm2.model.model.technicalreferential attribute)": [[205, "pyCGM2.Model.model.TechnicalReferential.relativeMatrixAnatomic"]], "setrelativematrixanatomic() (pycgm2.model.model.technicalreferential method)": [[205, "pyCGM2.Model.model.TechnicalReferential.setRelativeMatrixAnatomic"]], "anklecalibrationdecorator (class in pycgm2.model.modeldecorator)": [[206, "pyCGM2.Model.modelDecorator.AnkleCalibrationDecorator"]], "__init__() (pycgm2.model.modeldecorator.anklecalibrationdecorator method)": [[206, "pyCGM2.Model.modelDecorator.AnkleCalibrationDecorator.__init__"]], "fromajcmarker() (pycgm2.model.modeldecorator.anklecalibrationdecorator method)": [[206, "pyCGM2.Model.modelDecorator.AnkleCalibrationDecorator.fromAjcMarker"]], "midmaleolus() (pycgm2.model.modeldecorator.anklecalibrationdecorator method)": [[206, "pyCGM2.Model.modelDecorator.AnkleCalibrationDecorator.midMaleolus"]], "cgm1manualoffsets (class in pycgm2.model.modeldecorator)": [[207, "pyCGM2.Model.modelDecorator.Cgm1ManualOffsets"]], "__init__() (pycgm2.model.modeldecorator.cgm1manualoffsets method)": [[207, "pyCGM2.Model.modelDecorator.Cgm1ManualOffsets.__init__"]], "compute() (pycgm2.model.modeldecorator.cgm1manualoffsets method)": [[207, "pyCGM2.Model.modelDecorator.Cgm1ManualOffsets.compute"]], "decoratormodel (class in pycgm2.model.modeldecorator)": [[208, "pyCGM2.Model.modelDecorator.DecoratorModel"]], "__init__() (pycgm2.model.modeldecorator.decoratormodel method)": [[208, "pyCGM2.Model.modelDecorator.DecoratorModel.__init__"]], "hipjointcenterdecorator (class in pycgm2.model.modeldecorator)": [[209, "pyCGM2.Model.modelDecorator.HipJointCenterDecorator"]], "__init__() (pycgm2.model.modeldecorator.hipjointcenterdecorator method)": [[209, "pyCGM2.Model.modelDecorator.HipJointCenterDecorator.__init__"]], "bell() (pycgm2.model.modeldecorator.hipjointcenterdecorator method)": [[209, "pyCGM2.Model.modelDecorator.HipJointCenterDecorator.bell"]], "custom() (pycgm2.model.modeldecorator.hipjointcenterdecorator method)": [[209, "pyCGM2.Model.modelDecorator.HipJointCenterDecorator.custom"]], "davis() (pycgm2.model.modeldecorator.hipjointcenterdecorator method)": [[209, "pyCGM2.Model.modelDecorator.HipJointCenterDecorator.davis"]], "fromhjcmarker() (pycgm2.model.modeldecorator.hipjointcenterdecorator method)": [[209, "pyCGM2.Model.modelDecorator.HipJointCenterDecorator.fromHjcMarker"]], "greattrochanteroffset() (pycgm2.model.modeldecorator.hipjointcenterdecorator method)": [[209, "pyCGM2.Model.modelDecorator.HipJointCenterDecorator.greatTrochanterOffset"]], "hara() (pycgm2.model.modeldecorator.hipjointcenterdecorator method)": [[209, "pyCGM2.Model.modelDecorator.HipJointCenterDecorator.hara"]], "harrington() (pycgm2.model.modeldecorator.hipjointcenterdecorator method)": [[209, "pyCGM2.Model.modelDecorator.HipJointCenterDecorator.harrington"]], "kad (class in pycgm2.model.modeldecorator)": [[210, "pyCGM2.Model.modelDecorator.Kad"]], "__init__() (pycgm2.model.modeldecorator.kad method)": [[210, "pyCGM2.Model.modelDecorator.Kad.__init__"]], "compute() (pycgm2.model.modeldecorator.kad method)": [[210, "pyCGM2.Model.modelDecorator.Kad.compute"]], "kneecalibrationdecorator (class in pycgm2.model.modeldecorator)": [[211, "pyCGM2.Model.modelDecorator.KneeCalibrationDecorator"]], "__init__() (pycgm2.model.modeldecorator.kneecalibrationdecorator method)": [[211, "pyCGM2.Model.modelDecorator.KneeCalibrationDecorator.__init__"]], "calibrate2dof() (pycgm2.model.modeldecorator.kneecalibrationdecorator method)": [[211, "pyCGM2.Model.modelDecorator.KneeCalibrationDecorator.calibrate2dof"]], "fromkjcmarker() (pycgm2.model.modeldecorator.kneecalibrationdecorator method)": [[211, "pyCGM2.Model.modelDecorator.KneeCalibrationDecorator.fromKjcMarker"]], "midcondyles() (pycgm2.model.modeldecorator.kneecalibrationdecorator method)": [[211, "pyCGM2.Model.modelDecorator.KneeCalibrationDecorator.midCondyles"]], "midcondyles_kad() (pycgm2.model.modeldecorator.kneecalibrationdecorator method)": [[211, "pyCGM2.Model.modelDecorator.KneeCalibrationDecorator.midCondyles_KAD"]], "sara() (pycgm2.model.modeldecorator.kneecalibrationdecorator method)": [[211, "pyCGM2.Model.modelDecorator.KneeCalibrationDecorator.sara"]], "vcmjointcentre() (in module pycgm2.model.modeldecorator)": [[212, "pyCGM2.Model.modelDecorator.VCMJointCentre"]], "bellregression() (in module pycgm2.model.modeldecorator)": [[213, "pyCGM2.Model.modelDecorator.bellRegression"]], "calibration2dof() (in module pycgm2.model.modeldecorator)": [[214, "pyCGM2.Model.modelDecorator.calibration2Dof"]], "chord() (in module pycgm2.model.modeldecorator)": [[215, "pyCGM2.Model.modelDecorator.chord"]], "davisregression() (in module pycgm2.model.modeldecorator)": [[216, "pyCGM2.Model.modelDecorator.davisRegression"]], "footjointcentrefrommet() (in module pycgm2.model.modeldecorator)": [[217, "pyCGM2.Model.modelDecorator.footJointCentreFromMet"]], "hararegression() (in module pycgm2.model.modeldecorator)": [[218, "pyCGM2.Model.modelDecorator.haraRegression"]], "harringtonregression() (in module pycgm2.model.modeldecorator)": [[219, "pyCGM2.Model.modelDecorator.harringtonRegression"]], "midpoint() (in module pycgm2.model.modeldecorator)": [[220, "pyCGM2.Model.modelDecorator.midPoint"]], "saracalibration() (in module pycgm2.model.modeldecorator)": [[221, "pyCGM2.Model.modelDecorator.saraCalibration"]], "cgmlowerlimbinversedynamicprocedure (class in pycgm2.model.modelfilters)": [[222, "pyCGM2.Model.modelFilters.CGMLowerlimbInverseDynamicProcedure"]], "__init__() (pycgm2.model.modelfilters.cgmlowerlimbinversedynamicprocedure method)": [[222, "pyCGM2.Model.modelFilters.CGMLowerlimbInverseDynamicProcedure.__init__"]], "compute() (pycgm2.model.modelfilters.cgmlowerlimbinversedynamicprocedure method)": [[222, "pyCGM2.Model.modelFilters.CGMLowerlimbInverseDynamicProcedure.compute"]], "computesegmental() (pycgm2.model.modelfilters.cgmlowerlimbinversedynamicprocedure method)": [[222, "pyCGM2.Model.modelFilters.CGMLowerlimbInverseDynamicProcedure.computeSegmental"]], "centreofmassfilter (class in pycgm2.model.modelfilters)": [[223, "pyCGM2.Model.modelFilters.CentreOfMassFilter"]], "__init__() (pycgm2.model.modelfilters.centreofmassfilter method)": [[223, "pyCGM2.Model.modelFilters.CentreOfMassFilter.__init__"]], "compute() (pycgm2.model.modelfilters.centreofmassfilter method)": [[223, "pyCGM2.Model.modelFilters.CentreOfMassFilter.compute"]], "coordinatesystemdisplayfilter (class in pycgm2.model.modelfilters)": [[224, "pyCGM2.Model.modelFilters.CoordinateSystemDisplayFilter"]], "__init__() (pycgm2.model.modelfilters.coordinatesystemdisplayfilter method)": [[224, "pyCGM2.Model.modelFilters.CoordinateSystemDisplayFilter.__init__"]], "display() (pycgm2.model.modelfilters.coordinatesystemdisplayfilter method)": [[224, "pyCGM2.Model.modelFilters.CoordinateSystemDisplayFilter.display"]], "setstatic() (pycgm2.model.modelfilters.coordinatesystemdisplayfilter method)": [[224, "pyCGM2.Model.modelFilters.CoordinateSystemDisplayFilter.setStatic"]], "forceplateassemblyfilter (class in pycgm2.model.modelfilters)": [[225, "pyCGM2.Model.modelFilters.ForcePlateAssemblyFilter"]], "__init__() (pycgm2.model.modelfilters.forceplateassemblyfilter method)": [[225, "pyCGM2.Model.modelFilters.ForcePlateAssemblyFilter.__init__"]], "compute() (pycgm2.model.modelfilters.forceplateassemblyfilter method)": [[225, "pyCGM2.Model.modelFilters.ForcePlateAssemblyFilter.compute"]], "generalcalibrationprocedure (class in pycgm2.model.modelfilters)": [[226, "pyCGM2.Model.modelFilters.GeneralCalibrationProcedure"]], "__init__() (pycgm2.model.modelfilters.generalcalibrationprocedure method)": [[226, "pyCGM2.Model.modelFilters.GeneralCalibrationProcedure.__init__"]], "setanatomicaldefinition() (pycgm2.model.modelfilters.generalcalibrationprocedure method)": [[226, "pyCGM2.Model.modelFilters.GeneralCalibrationProcedure.setAnatomicalDefinition"]], "setdefinition() (pycgm2.model.modelfilters.generalcalibrationprocedure method)": [[226, "pyCGM2.Model.modelFilters.GeneralCalibrationProcedure.setDefinition"]], "generalcoordinatesystemprocedure (class in pycgm2.model.modelfilters)": [[227, "pyCGM2.Model.modelFilters.GeneralCoordinateSystemProcedure"]], "__init__() (pycgm2.model.modelfilters.generalcoordinatesystemprocedure method)": [[227, "pyCGM2.Model.modelFilters.GeneralCoordinateSystemProcedure.__init__"]], "definitions (pycgm2.model.modelfilters.generalcoordinatesystemprocedure attribute)": [[227, "pyCGM2.Model.modelFilters.GeneralCoordinateSystemProcedure.definitions"]], "setdefinition() (pycgm2.model.modelfilters.generalcoordinatesystemprocedure method)": [[227, "pyCGM2.Model.modelFilters.GeneralCoordinateSystemProcedure.setDefinition"]], "groundreactionforceadapterfilter (class in pycgm2.model.modelfilters)": [[228, "pyCGM2.Model.modelFilters.GroundReactionForceAdapterFilter"]], "__init__() (pycgm2.model.modelfilters.groundreactionforceadapterfilter method)": [[228, "pyCGM2.Model.modelFilters.GroundReactionForceAdapterFilter.__init__"]], "compute() (pycgm2.model.modelfilters.groundreactionforceadapterfilter method)": [[228, "pyCGM2.Model.modelFilters.GroundReactionForceAdapterFilter.compute"]], "groundreactionintegrationfilter (class in pycgm2.model.modelfilters)": [[229, "pyCGM2.Model.modelFilters.GroundReactionIntegrationFilter"]], "__init__() (pycgm2.model.modelfilters.groundreactionintegrationfilter method)": [[229, "pyCGM2.Model.modelFilters.GroundReactionIntegrationFilter.__init__"]], "compute() (pycgm2.model.modelfilters.groundreactionintegrationfilter method)": [[229, "pyCGM2.Model.modelFilters.GroundReactionIntegrationFilter.compute"]], "inversedynamicfilter (class in pycgm2.model.modelfilters)": [[230, "pyCGM2.Model.modelFilters.InverseDynamicFilter"]], "__init__() (pycgm2.model.modelfilters.inversedynamicfilter method)": [[230, "pyCGM2.Model.modelFilters.InverseDynamicFilter.__init__"]], "compute() (pycgm2.model.modelfilters.inversedynamicfilter method)": [[230, "pyCGM2.Model.modelFilters.InverseDynamicFilter.compute"]], "inversedynamicprocedure (class in pycgm2.model.modelfilters)": [[231, "pyCGM2.Model.modelFilters.InverseDynamicProcedure"]], "__init__() (pycgm2.model.modelfilters.inversedynamicprocedure method)": [[231, "pyCGM2.Model.modelFilters.InverseDynamicProcedure.__init__"]], "jointpowerfilter (class in pycgm2.model.modelfilters)": [[232, "pyCGM2.Model.modelFilters.JointPowerFilter"]], "__init__() (pycgm2.model.modelfilters.jointpowerfilter method)": [[232, "pyCGM2.Model.modelFilters.JointPowerFilter.__init__"]], "compute() (pycgm2.model.modelfilters.jointpowerfilter method)": [[232, "pyCGM2.Model.modelFilters.JointPowerFilter.compute"]], "modelabsoluteanglesfilter (class in pycgm2.model.modelfilters)": [[233, "pyCGM2.Model.modelFilters.ModelAbsoluteAnglesFilter"]], "__init__() (pycgm2.model.modelfilters.modelabsoluteanglesfilter method)": [[233, "pyCGM2.Model.modelFilters.ModelAbsoluteAnglesFilter.__init__"]], "compute() (pycgm2.model.modelfilters.modelabsoluteanglesfilter method)": [[233, "pyCGM2.Model.modelFilters.ModelAbsoluteAnglesFilter.compute"]], "modelcalibrationfilter (class in pycgm2.model.modelfilters)": [[234, "pyCGM2.Model.modelFilters.ModelCalibrationFilter"]], "__init__() (pycgm2.model.modelfilters.modelcalibrationfilter method)": [[234, "pyCGM2.Model.modelFilters.ModelCalibrationFilter.__init__"]], "compute() (pycgm2.model.modelfilters.modelcalibrationfilter method)": [[234, "pyCGM2.Model.modelFilters.ModelCalibrationFilter.compute"]], "setbooloption() (pycgm2.model.modelfilters.modelcalibrationfilter method)": [[234, "pyCGM2.Model.modelFilters.ModelCalibrationFilter.setBoolOption"]], "setnoanatomicalcalibration() (pycgm2.model.modelfilters.modelcalibrationfilter method)": [[234, "pyCGM2.Model.modelFilters.ModelCalibrationFilter.setNoAnatomicalCalibration"]], "setoption() (pycgm2.model.modelfilters.modelcalibrationfilter method)": [[234, "pyCGM2.Model.modelFilters.ModelCalibrationFilter.setOption"]], "modelcoordinatesystemprocedure (class in pycgm2.model.modelfilters)": [[235, "pyCGM2.Model.modelFilters.ModelCoordinateSystemProcedure"]], "__init__() (pycgm2.model.modelfilters.modelcoordinatesystemprocedure method)": [[235, "pyCGM2.Model.modelFilters.ModelCoordinateSystemProcedure.__init__"]], "definitions (pycgm2.model.modelfilters.modelcoordinatesystemprocedure attribute)": [[235, "pyCGM2.Model.modelFilters.ModelCoordinateSystemProcedure.definitions"]], "modeljcsfilter (class in pycgm2.model.modelfilters)": [[236, "pyCGM2.Model.modelFilters.ModelJCSFilter"]], "__init__() (pycgm2.model.modelfilters.modeljcsfilter method)": [[236, "pyCGM2.Model.modelFilters.ModelJCSFilter.__init__"]], "compute() (pycgm2.model.modelfilters.modeljcsfilter method)": [[236, "pyCGM2.Model.modelFilters.ModelJCSFilter.compute"]], "m_aqui (pycgm2.model.modelfilters.modeljcsfilter attribute)": [[236, "pyCGM2.Model.modelFilters.ModelJCSFilter.m_aqui"]], "m_fixeuler (pycgm2.model.modelfilters.modeljcsfilter attribute)": [[236, "pyCGM2.Model.modelFilters.ModelJCSFilter.m_fixEuler"]], "m_model (pycgm2.model.modelfilters.modeljcsfilter attribute)": [[236, "pyCGM2.Model.modelFilters.ModelJCSFilter.m_model"]], "setfixeuler() (pycgm2.model.modelfilters.modeljcsfilter method)": [[236, "pyCGM2.Model.modelFilters.ModelJCSFilter.setFixEuler"]], "modelmotioncorrectionfilter (class in pycgm2.model.modelfilters)": [[237, "pyCGM2.Model.modelFilters.ModelMotionCorrectionFilter"]], "__init__() (pycgm2.model.modelfilters.modelmotioncorrectionfilter method)": [[237, "pyCGM2.Model.modelFilters.ModelMotionCorrectionFilter.__init__"]], "correct() (pycgm2.model.modelfilters.modelmotioncorrectionfilter method)": [[237, "pyCGM2.Model.modelFilters.ModelMotionCorrectionFilter.correct"]], "modelmotionfilter (class in pycgm2.model.modelfilters)": [[238, "pyCGM2.Model.modelFilters.ModelMotionFilter"]], "__init__() (pycgm2.model.modelfilters.modelmotionfilter method)": [[238, "pyCGM2.Model.modelFilters.ModelMotionFilter.__init__"]], "compute() (pycgm2.model.modelfilters.modelmotionfilter method)": [[238, "pyCGM2.Model.modelFilters.ModelMotionFilter.compute"]], "segmentalcompute() (pycgm2.model.modelfilters.modelmotionfilter method)": [[238, "pyCGM2.Model.modelFilters.ModelMotionFilter.segmentalCompute"]], "setbooloption() (pycgm2.model.modelfilters.modelmotionfilter method)": [[238, "pyCGM2.Model.modelFilters.ModelMotionFilter.setBoolOption"]], "setnoanatomicalmotion() (pycgm2.model.modelfilters.modelmotionfilter method)": [[238, "pyCGM2.Model.modelFilters.ModelMotionFilter.setNoAnatomicalMotion"]], "setoption() (pycgm2.model.modelfilters.modelmotionfilter method)": [[238, "pyCGM2.Model.modelFilters.ModelMotionFilter.setOption"]], "modelqualityfilter (class in pycgm2.model.modelfilters)": [[239, "pyCGM2.Model.modelFilters.ModelQualityFilter"]], "__init__() (pycgm2.model.modelfilters.modelqualityfilter method)": [[239, "pyCGM2.Model.modelFilters.ModelQualityFilter.__init__"]], "run() (pycgm2.model.modelfilters.modelqualityfilter method)": [[239, "pyCGM2.Model.modelFilters.ModelQualityFilter.run"]], "staticcalibrationprocedure (class in pycgm2.model.modelfilters)": [[240, "pyCGM2.Model.modelFilters.StaticCalibrationProcedure"]], "__init__() (pycgm2.model.modelfilters.staticcalibrationprocedure method)": [[240, "pyCGM2.Model.modelFilters.StaticCalibrationProcedure.__init__"]], "analogdevice (class in pycgm2.nexus.devices)": [[246, "pyCGM2.Nexus.Devices.AnalogDevice"]], "__init__() (pycgm2.nexus.devices.analogdevice method)": [[246, "pyCGM2.Nexus.Devices.AnalogDevice.__init__"]], "channels (pycgm2.nexus.devices.analogdevice attribute)": [[246, "pyCGM2.Nexus.Devices.AnalogDevice.channels"]], "getchannels() (pycgm2.nexus.devices.analogdevice method)": [[246, "pyCGM2.Nexus.Devices.AnalogDevice.getChannels"]], "getunit() (pycgm2.nexus.devices.analogdevice method)": [[246, "pyCGM2.Nexus.Devices.AnalogDevice.getUnit"]], "channel (class in pycgm2.nexus.devices)": [[247, "pyCGM2.Nexus.Devices.Channel"]], "__init__() (pycgm2.nexus.devices.channel method)": [[247, "pyCGM2.Nexus.Devices.Channel.__init__"]], "description (pycgm2.nexus.devices.channel attribute)": [[247, "pyCGM2.Nexus.Devices.Channel.description"]], "getdescription() (pycgm2.nexus.devices.channel method)": [[247, "pyCGM2.Nexus.Devices.Channel.getDescription"]], "getlabel() (pycgm2.nexus.devices.channel method)": [[247, "pyCGM2.Nexus.Devices.Channel.getLabel"]], "getunit() (pycgm2.nexus.devices.channel method)": [[247, "pyCGM2.Nexus.Devices.Channel.getUnit"]], "getvalues() (pycgm2.nexus.devices.channel method)": [[247, "pyCGM2.Nexus.Devices.Channel.getValues"]], "label (pycgm2.nexus.devices.channel attribute)": [[247, "pyCGM2.Nexus.Devices.Channel.label"]], "unit (pycgm2.nexus.devices.channel attribute)": [[247, "pyCGM2.Nexus.Devices.Channel.unit"]], "values (pycgm2.nexus.devices.channel attribute)": [[247, "pyCGM2.Nexus.Devices.Channel.values"]], "device (class in pycgm2.nexus.devices)": [[248, "pyCGM2.Nexus.Devices.Device"]], "nexus (pycgm2.nexus.devices.device attribute)": [[248, "pyCGM2.Nexus.Devices.Device.NEXUS"]], "__init__() (pycgm2.nexus.devices.device method)": [[248, "pyCGM2.Nexus.Devices.Device.__init__"]], "getdevicefrequency() (pycgm2.nexus.devices.device method)": [[248, "pyCGM2.Nexus.Devices.Device.getDeviceFrequency"]], "getdevicename() (pycgm2.nexus.devices.device method)": [[248, "pyCGM2.Nexus.Devices.Device.getDeviceName"]], "getoutputnames() (pycgm2.nexus.devices.device method)": [[248, "pyCGM2.Nexus.Devices.Device.getOutputNames"]], "id (pycgm2.nexus.devices.device attribute)": [[248, "pyCGM2.Nexus.Devices.Device.id"]], "forceplate (class in pycgm2.nexus.devices)": [[249, "pyCGM2.Nexus.Devices.ForcePlate"]], "__init__() (pycgm2.nexus.devices.forceplate method)": [[249, "pyCGM2.Nexus.Devices.ForcePlate.__init__"]], "forceplateinfo (pycgm2.nexus.devices.forceplate attribute)": [[249, "pyCGM2.Nexus.Devices.ForcePlate.forcePlateInfo"]], "getcontext() (pycgm2.nexus.devices.forceplate method)": [[249, "pyCGM2.Nexus.Devices.ForcePlate.getContext"]], "getcorners() (pycgm2.nexus.devices.forceplate method)": [[249, "pyCGM2.Nexus.Devices.ForcePlate.getCorners"]], "getdescription() (pycgm2.nexus.devices.forceplate method)": [[249, "pyCGM2.Nexus.Devices.ForcePlate.getDescription"]], "getforceunit() (pycgm2.nexus.devices.forceplate method)": [[249, "pyCGM2.Nexus.Devices.ForcePlate.getForceUnit"]], "getglobalcop() (pycgm2.nexus.devices.forceplate method)": [[249, "pyCGM2.Nexus.Devices.ForcePlate.getGlobalCoP"]], "getglobalforce() (pycgm2.nexus.devices.forceplate method)": [[249, "pyCGM2.Nexus.Devices.ForcePlate.getGlobalForce"]], "getglobalmoment() (pycgm2.nexus.devices.forceplate method)": [[249, "pyCGM2.Nexus.Devices.ForcePlate.getGlobalMoment"]], "getlocalorigin() (pycgm2.nexus.devices.forceplate method)": [[249, "pyCGM2.Nexus.Devices.ForcePlate.getLocalOrigin"]], "getlocalreactionforce() (pycgm2.nexus.devices.forceplate method)": [[249, "pyCGM2.Nexus.Devices.ForcePlate.getLocalReactionForce"]], "getlocalreactionmoment() (pycgm2.nexus.devices.forceplate method)": [[249, "pyCGM2.Nexus.Devices.ForcePlate.getLocalReactionMoment"]], "getmomentunit() (pycgm2.nexus.devices.forceplate method)": [[249, "pyCGM2.Nexus.Devices.ForcePlate.getMomentUnit"]], "getorientation() (pycgm2.nexus.devices.forceplate method)": [[249, "pyCGM2.Nexus.Devices.ForcePlate.getOrientation"]], "getorigin() (pycgm2.nexus.devices.forceplate method)": [[249, "pyCGM2.Nexus.Devices.ForcePlate.getOrigin"]], "getphysicalorigin() (pycgm2.nexus.devices.forceplate method)": [[249, "pyCGM2.Nexus.Devices.ForcePlate.getPhysicalOrigin"]], "enfreader (class in pycgm2.nexus.eclipse)": [[250, "pyCGM2.Nexus.eclipse.EnfReader"]], "__init__() (pycgm2.nexus.eclipse.enfreader method)": [[250, "pyCGM2.Nexus.eclipse.EnfReader.__init__"]], "getfile() (pycgm2.nexus.eclipse.enfreader method)": [[250, "pyCGM2.Nexus.eclipse.EnfReader.getFile"]], "getpath() (pycgm2.nexus.eclipse.enfreader method)": [[250, "pyCGM2.Nexus.eclipse.EnfReader.getPath"]], "getsection() (pycgm2.nexus.eclipse.enfreader method)": [[250, "pyCGM2.Nexus.eclipse.EnfReader.getSection"]], "m_config (pycgm2.nexus.eclipse.enfreader attribute)": [[250, "pyCGM2.Nexus.eclipse.EnfReader.m_config"]], "m_file (pycgm2.nexus.eclipse.enfreader attribute)": [[250, "pyCGM2.Nexus.eclipse.EnfReader.m_file"]], "m_path (pycgm2.nexus.eclipse.enfreader attribute)": [[250, "pyCGM2.Nexus.eclipse.EnfReader.m_path"]], "patientenfreader (class in pycgm2.nexus.eclipse)": [[251, "pyCGM2.Nexus.eclipse.PatientEnfReader"]], "__init__() (pycgm2.nexus.eclipse.patientenfreader method)": [[251, "pyCGM2.Nexus.eclipse.PatientEnfReader.__init__"]], "get() (pycgm2.nexus.eclipse.patientenfreader method)": [[251, "pyCGM2.Nexus.eclipse.PatientEnfReader.get"]], "getpatientinfos() (pycgm2.nexus.eclipse.patientenfreader method)": [[251, "pyCGM2.Nexus.eclipse.PatientEnfReader.getPatientInfos"]], "save() (pycgm2.nexus.eclipse.patientenfreader method)": [[251, "pyCGM2.Nexus.eclipse.PatientEnfReader.save"]], "set() (pycgm2.nexus.eclipse.patientenfreader method)": [[251, "pyCGM2.Nexus.eclipse.PatientEnfReader.set"]], "sessionenfreader (class in pycgm2.nexus.eclipse)": [[252, "pyCGM2.Nexus.eclipse.SessionEnfReader"]], "__init__() (pycgm2.nexus.eclipse.sessionenfreader method)": [[252, "pyCGM2.Nexus.eclipse.SessionEnfReader.__init__"]], "get() (pycgm2.nexus.eclipse.sessionenfreader method)": [[252, "pyCGM2.Nexus.eclipse.SessionEnfReader.get"]], "getsessioninfos() (pycgm2.nexus.eclipse.sessionenfreader method)": [[252, "pyCGM2.Nexus.eclipse.SessionEnfReader.getSessionInfos"]], "save() (pycgm2.nexus.eclipse.sessionenfreader method)": [[252, "pyCGM2.Nexus.eclipse.SessionEnfReader.save"]], "set() (pycgm2.nexus.eclipse.sessionenfreader method)": [[252, "pyCGM2.Nexus.eclipse.SessionEnfReader.set"]], "trialenfreader (class in pycgm2.nexus.eclipse)": [[253, "pyCGM2.Nexus.eclipse.TrialEnfReader"]], "__init__() (pycgm2.nexus.eclipse.trialenfreader method)": [[253, "pyCGM2.Nexus.eclipse.TrialEnfReader.__init__"]], "get() (pycgm2.nexus.eclipse.trialenfreader method)": [[253, "pyCGM2.Nexus.eclipse.TrialEnfReader.get"]], "getc3d() (pycgm2.nexus.eclipse.trialenfreader method)": [[253, "pyCGM2.Nexus.eclipse.TrialEnfReader.getC3d"]], "getforceplateassigment() (pycgm2.nexus.eclipse.trialenfreader method)": [[253, "pyCGM2.Nexus.eclipse.TrialEnfReader.getForcePlateAssigment"]], "gettrialinfos() (pycgm2.nexus.eclipse.trialenfreader method)": [[253, "pyCGM2.Nexus.eclipse.TrialEnfReader.getTrialInfos"]], "isc3dexist() (pycgm2.nexus.eclipse.trialenfreader method)": [[253, "pyCGM2.Nexus.eclipse.TrialEnfReader.isC3dExist"]], "save() (pycgm2.nexus.eclipse.trialenfreader method)": [[253, "pyCGM2.Nexus.eclipse.TrialEnfReader.save"]], "set() (pycgm2.nexus.eclipse.trialenfreader method)": [[253, "pyCGM2.Nexus.eclipse.TrialEnfReader.set"]], "setforceplates() (pycgm2.nexus.eclipse.trialenfreader method)": [[253, "pyCGM2.Nexus.eclipse.TrialEnfReader.setForcePlates"]], "cleanenf() (in module pycgm2.nexus.eclipse)": [[254, "pyCGM2.Nexus.eclipse.cleanEnf"]], "generateemptyenf() (in module pycgm2.nexus.eclipse)": [[255, "pyCGM2.Nexus.eclipse.generateEmptyENF"]], "getcurrentmarkedenfs() (in module pycgm2.nexus.eclipse)": [[256, "pyCGM2.Nexus.eclipse.getCurrentMarkedEnfs"]], "getcurrentmarkednodes() (in module pycgm2.nexus.eclipse)": [[257, "pyCGM2.Nexus.eclipse.getCurrentMarkedNodes"]], "getenffiles() (in module pycgm2.nexus.eclipse)": [[258, "pyCGM2.Nexus.eclipse.getEnfFiles"]], "nexusconstructacquisitionfilter (class in pycgm2.nexus.nexusfilters)": [[259, "pyCGM2.Nexus.nexusFilters.NexusConstructAcquisitionFilter"]], "__init__() (pycgm2.nexus.nexusfilters.nexusconstructacquisitionfilter method)": [[259, "pyCGM2.Nexus.nexusFilters.NexusConstructAcquisitionFilter.__init__"]], "appendanalogs() (pycgm2.nexus.nexusfilters.nexusconstructacquisitionfilter method)": [[259, "pyCGM2.Nexus.nexusFilters.NexusConstructAcquisitionFilter.appendAnalogs"]], "appendevents() (pycgm2.nexus.nexusfilters.nexusconstructacquisitionfilter method)": [[259, "pyCGM2.Nexus.nexusFilters.NexusConstructAcquisitionFilter.appendEvents"]], "appendforceplates() (pycgm2.nexus.nexusfilters.nexusconstructacquisitionfilter method)": [[259, "pyCGM2.Nexus.nexusFilters.NexusConstructAcquisitionFilter.appendForcePlates"]], "appendmarkers() (pycgm2.nexus.nexusfilters.nexusconstructacquisitionfilter method)": [[259, "pyCGM2.Nexus.nexusFilters.NexusConstructAcquisitionFilter.appendMarkers"]], "appendmodeloutputs() (pycgm2.nexus.nexusfilters.nexusconstructacquisitionfilter method)": [[259, "pyCGM2.Nexus.nexusFilters.NexusConstructAcquisitionFilter.appendModelOutputs"]], "build() (pycgm2.nexus.nexusfilters.nexusconstructacquisitionfilter method)": [[259, "pyCGM2.Nexus.nexusFilters.NexusConstructAcquisitionFilter.build"]], "exportc3d() (pycgm2.nexus.nexusfilters.nexusconstructacquisitionfilter method)": [[259, "pyCGM2.Nexus.nexusFilters.NexusConstructAcquisitionFilter.exportC3d"]], "initmetadata() (pycgm2.nexus.nexusfilters.nexusconstructacquisitionfilter method)": [[259, "pyCGM2.Nexus.nexusFilters.NexusConstructAcquisitionFilter.initMetaData"]], "nexusmodelfilter (class in pycgm2.nexus.nexusfilters)": [[260, "pyCGM2.Nexus.nexusFilters.NexusModelFilter"]], "__init__() (pycgm2.nexus.nexusfilters.nexusmodelfilter method)": [[260, "pyCGM2.Nexus.nexusFilters.NexusModelFilter.__init__"]], "run() (pycgm2.nexus.nexusfilters.nexusmodelfilter method)": [[260, "pyCGM2.Nexus.nexusFilters.NexusModelFilter.run"]], "appendanalysisparameters() (in module pycgm2.nexus.nexustools)": [[261, "pyCGM2.Nexus.nexusTools.appendAnalysisParameters"]], "appendanglefromacq() (in module pycgm2.nexus.nexustools)": [[262, "pyCGM2.Nexus.nexusTools.appendAngleFromAcq"]], "appendbones() (in module pycgm2.nexus.nexustools)": [[263, "pyCGM2.Nexus.nexusTools.appendBones"]], "appendbtkscalarfromacq() (in module pycgm2.nexus.nexustools)": [[264, "pyCGM2.Nexus.nexusTools.appendBtkScalarFromAcq"]], "appendforcefromacq() (in module pycgm2.nexus.nexustools)": [[265, "pyCGM2.Nexus.nexusTools.appendForceFromAcq"]], "appendmodelledmarkerfromacq() (in module pycgm2.nexus.nexustools)": [[266, "pyCGM2.Nexus.nexusTools.appendModelledMarkerFromAcq"]], "appendmomentfromacq() (in module pycgm2.nexus.nexustools)": [[267, "pyCGM2.Nexus.nexusTools.appendMomentFromAcq"]], "appendpowerfromacq() (in module pycgm2.nexus.nexustools)": [[268, "pyCGM2.Nexus.nexusTools.appendPowerFromAcq"]], "checkactivatedsubject() (in module pycgm2.nexus.nexustools)": [[269, "pyCGM2.Nexus.nexusTools.checkActivatedSubject"]], "createevents() (in module pycgm2.nexus.nexustools)": [[270, "pyCGM2.Nexus.nexusTools.createEvents"]], "creategeneralevents() (in module pycgm2.nexus.nexustools)": [[271, "pyCGM2.Nexus.nexusTools.createGeneralEvents"]], "getactivesubject() (in module pycgm2.nexus.nexustools)": [[272, "pyCGM2.Nexus.nexusTools.getActiveSubject"]], "getforceplateassignment() (in module pycgm2.nexus.nexustools)": [[273, "pyCGM2.Nexus.nexusTools.getForcePlateAssignment"]], "settrajectoryfromacq() (in module pycgm2.nexus.nexustools)": [[274, "pyCGM2.Nexus.nexusTools.setTrajectoryFromAcq"]], "settrajectoryfromarray() (in module pycgm2.nexus.nexustools)": [[275, "pyCGM2.Nexus.nexusTools.setTrajectoryFromArray"]], "getnexussubjectmp() (in module pycgm2.nexus.nexusutils)": [[276, "pyCGM2.Nexus.nexusUtils.getNexusSubjectMp"]], "updatenexussubjectmp() (in module pycgm2.nexus.nexusutils)": [[277, "pyCGM2.Nexus.nexusUtils.updateNexusSubjectMp"]], "c3dmanager (class in pycgm2.processing.c3dmanager.c3dmanager)": [[283, "pyCGM2.Processing.C3dManager.c3dManager.C3dManager"]], "__init__() (pycgm2.processing.c3dmanager.c3dmanager.c3dmanager method)": [[283, "pyCGM2.Processing.C3dManager.c3dManager.C3dManager.__init__"]], "c3dmanagerfilter (class in pycgm2.processing.c3dmanager.c3dmanagerfilters)": [[284, "pyCGM2.Processing.C3dManager.c3dManagerFilters.C3dManagerFilter"]], "__init__() (pycgm2.processing.c3dmanager.c3dmanagerfilters.c3dmanagerfilter method)": [[284, "pyCGM2.Processing.C3dManager.c3dManagerFilters.C3dManagerFilter.__init__"]], "enableemg() (pycgm2.processing.c3dmanager.c3dmanagerfilters.c3dmanagerfilter method)": [[284, "pyCGM2.Processing.C3dManager.c3dManagerFilters.C3dManagerFilter.enableEmg"]], "enablekinematic() (pycgm2.processing.c3dmanager.c3dmanagerfilters.c3dmanagerfilter method)": [[284, "pyCGM2.Processing.C3dManager.c3dManagerFilters.C3dManagerFilter.enableKinematic"]], "enablekinetic() (pycgm2.processing.c3dmanager.c3dmanagerfilters.c3dmanagerfilter method)": [[284, "pyCGM2.Processing.C3dManager.c3dManagerFilters.C3dManagerFilter.enableKinetic"]], "enablemuscledynamic() (pycgm2.processing.c3dmanager.c3dmanagerfilters.c3dmanagerfilter method)": [[284, "pyCGM2.Processing.C3dManager.c3dManagerFilters.C3dManagerFilter.enableMuscleDynamic"]], "enablemusclegeometry() (pycgm2.processing.c3dmanager.c3dmanagerfilters.c3dmanagerfilter method)": [[284, "pyCGM2.Processing.C3dManager.c3dManagerFilters.C3dManagerFilter.enableMuscleGeometry"]], "enablespatiotemporal() (pycgm2.processing.c3dmanager.c3dmanagerfilters.c3dmanagerfilter method)": [[284, "pyCGM2.Processing.C3dManager.c3dManagerFilters.C3dManagerFilter.enableSpatioTemporal"]], "generate() (pycgm2.processing.c3dmanager.c3dmanagerfilters.c3dmanagerfilter method)": [[284, "pyCGM2.Processing.C3dManager.c3dManagerFilters.C3dManagerFilter.generate"]], "c3dmanagerprocedure (class in pycgm2.processing.c3dmanager.c3dmanagerprocedures)": [[285, "pyCGM2.Processing.C3dManager.c3dManagerProcedures.C3dManagerProcedure"]], "__init__() (pycgm2.processing.c3dmanager.c3dmanagerprocedures.c3dmanagerprocedure method)": [[285, "pyCGM2.Processing.C3dManager.c3dManagerProcedures.C3dManagerProcedure.__init__"]], "distinctc3dsetprocedure (class in pycgm2.processing.c3dmanager.c3dmanagerprocedures)": [[286, "pyCGM2.Processing.C3dManager.c3dManagerProcedures.DistinctC3dSetProcedure"]], "__init__() (pycgm2.processing.c3dmanager.c3dmanagerprocedures.distinctc3dsetprocedure method)": [[286, "pyCGM2.Processing.C3dManager.c3dManagerProcedures.DistinctC3dSetProcedure.__init__"]], "generate() (pycgm2.processing.c3dmanager.c3dmanagerprocedures.distinctc3dsetprocedure method)": [[286, "pyCGM2.Processing.C3dManager.c3dManagerProcedures.DistinctC3dSetProcedure.generate"]], "uniquebtkacqsetprocedure (class in pycgm2.processing.c3dmanager.c3dmanagerprocedures)": [[287, "pyCGM2.Processing.C3dManager.c3dManagerProcedures.UniqueBtkAcqSetProcedure"]], "__init__() (pycgm2.processing.c3dmanager.c3dmanagerprocedures.uniquebtkacqsetprocedure method)": [[287, "pyCGM2.Processing.C3dManager.c3dManagerProcedures.UniqueBtkAcqSetProcedure.__init__"]], "generate() (pycgm2.processing.c3dmanager.c3dmanagerprocedures.uniquebtkacqsetprocedure method)": [[287, "pyCGM2.Processing.C3dManager.c3dManagerProcedures.UniqueBtkAcqSetProcedure.generate"]], "uniquec3dsetprocedure (class in pycgm2.processing.c3dmanager.c3dmanagerprocedures)": [[288, "pyCGM2.Processing.C3dManager.c3dManagerProcedures.UniqueC3dSetProcedure"]], "__init__() (pycgm2.processing.c3dmanager.c3dmanagerprocedures.uniquec3dsetprocedure method)": [[288, "pyCGM2.Processing.C3dManager.c3dManagerProcedures.UniqueC3dSetProcedure.__init__"]], "generate() (pycgm2.processing.c3dmanager.c3dmanagerprocedures.uniquec3dsetprocedure method)": [[288, "pyCGM2.Processing.C3dManager.c3dManagerProcedures.UniqueC3dSetProcedure.generate"]], "classificationfilter (class in pycgm2.processing.classification.classificationfilters)": [[289, "pyCGM2.Processing.Classification.classificationFilters.ClassificationFilter"]], "__init__() (pycgm2.processing.classification.classificationfilters.classificationfilter method)": [[289, "pyCGM2.Processing.Classification.classificationFilters.ClassificationFilter.__init__"]], "run() (pycgm2.processing.classification.classificationfilters.classificationfilter method)": [[289, "pyCGM2.Processing.Classification.classificationFilters.ClassificationFilter.run"]], "classificationprocedure (class in pycgm2.processing.classification.classificationprocedures)": [[290, "pyCGM2.Processing.Classification.classificationProcedures.ClassificationProcedure"]], "__init__() (pycgm2.processing.classification.classificationprocedures.classificationprocedure method)": [[290, "pyCGM2.Processing.Classification.classificationProcedures.ClassificationProcedure.__init__"]], "pfkeprocedure (class in pycgm2.processing.classification.classificationprocedures)": [[291, "pyCGM2.Processing.Classification.classificationProcedures.PFKEprocedure"]], "__init__() (pycgm2.processing.classification.classificationprocedures.pfkeprocedure method)": [[291, "pyCGM2.Processing.Classification.classificationProcedures.PFKEprocedure.__init__"]], "plot() (pycgm2.processing.classification.classificationprocedures.pfkeprocedure method)": [[291, "pyCGM2.Processing.Classification.classificationProcedures.PFKEprocedure.plot"]], "run() (pycgm2.processing.classification.classificationprocedures.pfkeprocedure method)": [[291, "pyCGM2.Processing.Classification.classificationProcedures.PFKEprocedure.run"]], "discretepointsfilter (class in pycgm2.processing.discretepoints.discretepointfilters)": [[292, "pyCGM2.Processing.DiscretePoints.discretePointFilters.DiscretePointsFilter"]], "__init__() (pycgm2.processing.discretepoints.discretepointfilters.discretepointsfilter method)": [[292, "pyCGM2.Processing.DiscretePoints.discretePointFilters.DiscretePointsFilter.__init__"]], "getoutput() (pycgm2.processing.discretepoints.discretepointfilters.discretepointsfilter method)": [[292, "pyCGM2.Processing.DiscretePoints.discretePointFilters.DiscretePointsFilter.getOutput"]], "setcondexpinf() (pycgm2.processing.discretepoints.discretepointfilters.discretepointsfilter method)": [[292, "pyCGM2.Processing.DiscretePoints.discretePointFilters.DiscretePointsFilter.setCondExpInf"]], "setmodelinfo() (pycgm2.processing.discretepoints.discretepointfilters.discretepointsfilter method)": [[292, "pyCGM2.Processing.DiscretePoints.discretePointFilters.DiscretePointsFilter.setModelInfo"]], "setsubjinfo() (pycgm2.processing.discretepoints.discretepointfilters.discretepointsfilter method)": [[292, "pyCGM2.Processing.DiscretePoints.discretePointFilters.DiscretePointsFilter.setSubjInfo"]], "benedettiprocedure (class in pycgm2.processing.discretepoints.discretepointprocedures)": [[293, "pyCGM2.Processing.DiscretePoints.discretePointProcedures.BenedettiProcedure"]], "__init__() (pycgm2.processing.discretepoints.discretepointprocedures.benedettiprocedure method)": [[293, "pyCGM2.Processing.DiscretePoints.discretePointProcedures.BenedettiProcedure.__init__"]], "detect() (pycgm2.processing.discretepoints.discretepointprocedures.benedettiprocedure method)": [[293, "pyCGM2.Processing.DiscretePoints.discretePointProcedures.BenedettiProcedure.detect"]], "discretepointprocedure (class in pycgm2.processing.discretepoints.discretepointprocedures)": [[294, "pyCGM2.Processing.DiscretePoints.discretePointProcedures.DiscretePointProcedure"]], "__init__() (pycgm2.processing.discretepoints.discretepointprocedures.discretepointprocedure method)": [[294, "pyCGM2.Processing.DiscretePoints.discretePointProcedures.DiscretePointProcedure.__init__"]], "goldbergprocedure (class in pycgm2.processing.discretepoints.discretepointprocedures)": [[295, "pyCGM2.Processing.DiscretePoints.discretePointProcedures.GoldbergProcedure"]], "__init__() (pycgm2.processing.discretepoints.discretepointprocedures.goldbergprocedure method)": [[295, "pyCGM2.Processing.DiscretePoints.discretePointProcedures.GoldbergProcedure.__init__"]], "detect() (pycgm2.processing.discretepoints.discretepointprocedures.goldbergprocedure method)": [[295, "pyCGM2.Processing.DiscretePoints.discretePointProcedures.GoldbergProcedure.detect"]], "maxminprocedure (class in pycgm2.processing.discretepoints.discretepointprocedures)": [[296, "pyCGM2.Processing.DiscretePoints.discretePointProcedures.MaxMinProcedure"]], "__init__() (pycgm2.processing.discretepoints.discretepointprocedures.maxminprocedure method)": [[296, "pyCGM2.Processing.DiscretePoints.discretePointProcedures.MaxMinProcedure.__init__"]], "detect() (pycgm2.processing.discretepoints.discretepointprocedures.maxminprocedure method)": [[296, "pyCGM2.Processing.DiscretePoints.discretePointProcedures.MaxMinProcedure.detect"]], "jointpatternfilter (class in pycgm2.processing.jointpatterns.jointpatternfilters)": [[297, "pyCGM2.Processing.JointPatterns.jointPatternFilters.JointPatternFilter"]], "__init__() (pycgm2.processing.jointpatterns.jointpatternfilters.jointpatternfilter method)": [[297, "pyCGM2.Processing.JointPatterns.jointPatternFilters.JointPatternFilter.__init__"]], "getpatterns() (pycgm2.processing.jointpatterns.jointpatternfilters.jointpatternfilter method)": [[297, "pyCGM2.Processing.JointPatterns.jointPatternFilters.JointPatternFilter.getPatterns"]], "getvalues() (pycgm2.processing.jointpatterns.jointpatternfilters.jointpatternfilter method)": [[297, "pyCGM2.Processing.JointPatterns.jointPatternFilters.JointPatternFilter.getValues"]], "interpretcriteria() (pycgm2.processing.jointpatterns.jointpatternfilters.jointpatternfilter class method)": [[297, "pyCGM2.Processing.JointPatterns.jointPatternFilters.JointPatternFilter.interpretCriteria"]], "jointpatternprocedure (class in pycgm2.processing.jointpatterns.jointpatternprocedures)": [[298, "pyCGM2.Processing.JointPatterns.jointPatternProcedures.JointPatternProcedure"]], "__init__() (pycgm2.processing.jointpatterns.jointpatternprocedures.jointpatternprocedure method)": [[298, "pyCGM2.Processing.JointPatterns.jointPatternProcedures.JointPatternProcedure.__init__"]], "xlsjointpatternprocedure (class in pycgm2.processing.jointpatterns.jointpatternprocedures)": [[299, "pyCGM2.Processing.JointPatterns.jointPatternProcedures.XlsJointPatternProcedure"]], "__init__() (pycgm2.processing.jointpatterns.jointpatternprocedures.xlsjointpatternprocedure method)": [[299, "pyCGM2.Processing.JointPatterns.jointPatternProcedures.XlsJointPatternProcedure.__init__"]], "detectpattern() (pycgm2.processing.jointpatterns.jointpatternprocedures.xlsjointpatternprocedure method)": [[299, "pyCGM2.Processing.JointPatterns.jointPatternProcedures.XlsJointPatternProcedure.detectPattern"]], "detectvalue() (pycgm2.processing.jointpatterns.jointpatternprocedures.xlsjointpatternprocedure method)": [[299, "pyCGM2.Processing.JointPatterns.jointPatternProcedures.XlsJointPatternProcedure.detectValue"]], "progressionframefilter (class in pycgm2.processing.progressionframe.progressionframefilters)": [[300, "pyCGM2.Processing.ProgressionFrame.progressionFrameFilters.ProgressionFrameFilter"]], "__init__() (pycgm2.processing.progressionframe.progressionframefilters.progressionframefilter method)": [[300, "pyCGM2.Processing.ProgressionFrame.progressionFrameFilters.ProgressionFrameFilter.__init__"]], "compute() (pycgm2.processing.progressionframe.progressionframefilters.progressionframefilter method)": [[300, "pyCGM2.Processing.ProgressionFrame.progressionFrameFilters.ProgressionFrameFilter.compute"]], "pelvisprogressionframeprocedure (class in pycgm2.processing.progressionframe.progressionframeprocedures)": [[301, "pyCGM2.Processing.ProgressionFrame.progressionFrameProcedures.PelvisProgressionFrameProcedure"]], "__init__() (pycgm2.processing.progressionframe.progressionframeprocedures.pelvisprogressionframeprocedure method)": [[301, "pyCGM2.Processing.ProgressionFrame.progressionFrameProcedures.PelvisProgressionFrameProcedure.__init__"]], "compute() (pycgm2.processing.progressionframe.progressionframeprocedures.pelvisprogressionframeprocedure method)": [[301, "pyCGM2.Processing.ProgressionFrame.progressionFrameProcedures.PelvisProgressionFrameProcedure.compute"]], "pointprogressionframeprocedure (class in pycgm2.processing.progressionframe.progressionframeprocedures)": [[302, "pyCGM2.Processing.ProgressionFrame.progressionFrameProcedures.PointProgressionFrameProcedure"]], "__init__() (pycgm2.processing.progressionframe.progressionframeprocedures.pointprogressionframeprocedure method)": [[302, "pyCGM2.Processing.ProgressionFrame.progressionFrameProcedures.PointProgressionFrameProcedure.__init__"]], "compute() (pycgm2.processing.progressionframe.progressionframeprocedures.pointprogressionframeprocedure method)": [[302, "pyCGM2.Processing.ProgressionFrame.progressionFrameProcedures.PointProgressionFrameProcedure.compute"]], "progressionframeprocedure (class in pycgm2.processing.progressionframe.progressionframeprocedures)": [[303, "pyCGM2.Processing.ProgressionFrame.progressionFrameProcedures.ProgressionFrameProcedure"]], "__init__() (pycgm2.processing.progressionframe.progressionframeprocedures.progressionframeprocedure method)": [[303, "pyCGM2.Processing.ProgressionFrame.progressionFrameProcedures.ProgressionFrameProcedure.__init__"]], "thoraxprogressionframeprocedure (class in pycgm2.processing.progressionframe.progressionframeprocedures)": [[304, "pyCGM2.Processing.ProgressionFrame.progressionFrameProcedures.ThoraxProgressionFrameProcedure"]], "__init__() (pycgm2.processing.progressionframe.progressionframeprocedures.thoraxprogressionframeprocedure method)": [[304, "pyCGM2.Processing.ProgressionFrame.progressionFrameProcedures.ThoraxProgressionFrameProcedure.__init__"]], "compute() (pycgm2.processing.progressionframe.progressionframeprocedures.thoraxprogressionframeprocedure method)": [[304, "pyCGM2.Processing.ProgressionFrame.progressionFrameProcedures.ThoraxProgressionFrameProcedure.compute"]], "representativecyclefilter (class in pycgm2.processing.representative.representativefilters)": [[305, "pyCGM2.Processing.Representative.representativeFilters.RepresentativeCycleFilter"]], "__init__() (pycgm2.processing.representative.representativefilters.representativecyclefilter method)": [[305, "pyCGM2.Processing.Representative.representativeFilters.RepresentativeCycleFilter.__init__"]], "m_analysis (pycgm2.processing.representative.representativefilters.representativecyclefilter attribute)": [[305, "pyCGM2.Processing.Representative.representativeFilters.RepresentativeCycleFilter.m_analysis"]], "m_procedure (pycgm2.processing.representative.representativefilters.representativecyclefilter attribute)": [[305, "pyCGM2.Processing.Representative.representativeFilters.RepresentativeCycleFilter.m_procedure"]], "run() (pycgm2.processing.representative.representativefilters.representativecyclefilter method)": [[305, "pyCGM2.Processing.Representative.representativeFilters.RepresentativeCycleFilter.run"]], "representativeprocedure (class in pycgm2.processing.representative.representativeprocedures)": [[306, "pyCGM2.Processing.Representative.representativeProcedures.RepresentativeProcedure"]], "__init__() (pycgm2.processing.representative.representativeprocedures.representativeprocedure method)": [[306, "pyCGM2.Processing.Representative.representativeProcedures.RepresentativeProcedure.__init__"]], "sangeux2015procedure (class in pycgm2.processing.representative.representativeprocedures)": [[307, "pyCGM2.Processing.Representative.representativeProcedures.Sangeux2015Procedure"]], "__init__() (pycgm2.processing.representative.representativeprocedures.sangeux2015procedure method)": [[307, "pyCGM2.Processing.Representative.representativeProcedures.Sangeux2015Procedure.__init__"]], "setdata() (pycgm2.processing.representative.representativeprocedures.sangeux2015procedure method)": [[307, "pyCGM2.Processing.Representative.representativeProcedures.Sangeux2015Procedure.setData"]], "setdefaultdata() (pycgm2.processing.representative.representativeprocedures.sangeux2015procedure method)": [[307, "pyCGM2.Processing.Representative.representativeProcedures.Sangeux2015Procedure.setDefaultData"]], "scorefilter (class in pycgm2.processing.scores.scorefilters)": [[308, "pyCGM2.Processing.Scores.scoreFilters.ScoreFilter"]], "__init__() (pycgm2.processing.scores.scorefilters.scorefilter method)": [[308, "pyCGM2.Processing.Scores.scoreFilters.ScoreFilter.__init__"]], "compute() (pycgm2.processing.scores.scorefilters.scorefilter method)": [[308, "pyCGM2.Processing.Scores.scoreFilters.ScoreFilter.compute"]], "cgm1_gps (class in pycgm2.processing.scores.scoreprocedures)": [[309, "pyCGM2.Processing.Scores.scoreProcedures.CGM1_GPS"]], "__init__() (pycgm2.processing.scores.scoreprocedures.cgm1_gps method)": [[309, "pyCGM2.Processing.Scores.scoreProcedures.CGM1_GPS.__init__"]], "scoreprocedure (class in pycgm2.processing.scores.scoreprocedures)": [[310, "pyCGM2.Processing.Scores.scoreProcedures.ScoreProcedure"]], "__init__() (pycgm2.processing.scores.scoreprocedures.scoreprocedure method)": [[310, "pyCGM2.Processing.Scores.scoreProcedures.ScoreProcedure.__init__"]], "abstractbuilder (class in pycgm2.processing.analysis)": [[311, "pyCGM2.Processing.analysis.AbstractBuilder"]], "__init__() (pycgm2.processing.analysis.abstractbuilder method)": [[311, "pyCGM2.Processing.analysis.AbstractBuilder.__init__"]], "analysis (class in pycgm2.processing.analysis)": [[312, "pyCGM2.Processing.analysis.Analysis"]], "__init__() (pycgm2.processing.analysis.analysis method)": [[312, "pyCGM2.Processing.analysis.Analysis.__init__"]], "coactivations (pycgm2.processing.analysis.analysis attribute)": [[312, "pyCGM2.Processing.analysis.Analysis.coactivations"]], "emginfo (pycgm2.processing.analysis.analysis attribute)": [[312, "pyCGM2.Processing.analysis.Analysis.emgInfo"]], "emgstats (pycgm2.processing.analysis.analysis attribute)": [[312, "pyCGM2.Processing.analysis.Analysis.emgStats"]], "experimentalinfo (pycgm2.processing.analysis.analysis attribute)": [[312, "pyCGM2.Processing.analysis.Analysis.experimentalInfo"]], "getkinematiccyclenumbers() (pycgm2.processing.analysis.analysis method)": [[312, "pyCGM2.Processing.analysis.Analysis.getKinematicCycleNumbers"]], "gps (pycgm2.processing.analysis.analysis attribute)": [[312, "pyCGM2.Processing.analysis.Analysis.gps"]], "gvs (pycgm2.processing.analysis.analysis attribute)": [[312, "pyCGM2.Processing.analysis.Analysis.gvs"]], "kinematicinfo (pycgm2.processing.analysis.analysis attribute)": [[312, "pyCGM2.Processing.analysis.Analysis.kinematicInfo"]], "kinematicstats (pycgm2.processing.analysis.analysis attribute)": [[312, "pyCGM2.Processing.analysis.Analysis.kinematicStats"]], "kineticinfo (pycgm2.processing.analysis.analysis attribute)": [[312, "pyCGM2.Processing.analysis.Analysis.kineticInfo"]], "kineticstats (pycgm2.processing.analysis.analysis attribute)": [[312, "pyCGM2.Processing.analysis.Analysis.kineticStats"]], "modelinfo (pycgm2.processing.analysis.analysis attribute)": [[312, "pyCGM2.Processing.analysis.Analysis.modelInfo"]], "muscledynamicinfo (pycgm2.processing.analysis.analysis attribute)": [[312, "pyCGM2.Processing.analysis.Analysis.muscleDynamicInfo"]], "muscledynamicstats (pycgm2.processing.analysis.analysis attribute)": [[312, "pyCGM2.Processing.analysis.Analysis.muscleDynamicStats"]], "musclegeometryinfo (pycgm2.processing.analysis.analysis attribute)": [[312, "pyCGM2.Processing.analysis.Analysis.muscleGeometryInfo"]], "musclegeometrystats (pycgm2.processing.analysis.analysis attribute)": [[312, "pyCGM2.Processing.analysis.Analysis.muscleGeometryStats"]], "scoreinfo (pycgm2.processing.analysis.analysis attribute)": [[312, "pyCGM2.Processing.analysis.Analysis.scoreInfo"]], "setcoactivation() (pycgm2.processing.analysis.analysis method)": [[312, "pyCGM2.Processing.analysis.Analysis.setCoactivation"]], "setemg() (pycgm2.processing.analysis.analysis method)": [[312, "pyCGM2.Processing.analysis.Analysis.setEmg"]], "setemginfo() (pycgm2.processing.analysis.analysis method)": [[312, "pyCGM2.Processing.analysis.Analysis.setEmgInfo"]], "setexperimentalinfo() (pycgm2.processing.analysis.analysis method)": [[312, "pyCGM2.Processing.analysis.Analysis.setExperimentalInfo"]], "setgps() (pycgm2.processing.analysis.analysis method)": [[312, "pyCGM2.Processing.analysis.Analysis.setGps"]], "setgvs() (pycgm2.processing.analysis.analysis method)": [[312, "pyCGM2.Processing.analysis.Analysis.setGvs"]], "setkinematic() (pycgm2.processing.analysis.analysis method)": [[312, "pyCGM2.Processing.analysis.Analysis.setKinematic"]], "setkinematicinfo() (pycgm2.processing.analysis.analysis method)": [[312, "pyCGM2.Processing.analysis.Analysis.setKinematicInfo"]], "setkinetic() (pycgm2.processing.analysis.analysis method)": [[312, "pyCGM2.Processing.analysis.Analysis.setKinetic"]], "setkineticinfo() (pycgm2.processing.analysis.analysis method)": [[312, "pyCGM2.Processing.analysis.Analysis.setKineticInfo"]], "setmodelinfo() (pycgm2.processing.analysis.analysis method)": [[312, "pyCGM2.Processing.analysis.Analysis.setModelInfo"]], "setmuscledynamicinfo() (pycgm2.processing.analysis.analysis method)": [[312, "pyCGM2.Processing.analysis.Analysis.setMuscleDynamicInfo"]], "setmusclegeometry() (pycgm2.processing.analysis.analysis method)": [[312, "pyCGM2.Processing.analysis.Analysis.setMuscleGeometry"]], "setmusclegeometryinfo() (pycgm2.processing.analysis.analysis method)": [[312, "pyCGM2.Processing.analysis.Analysis.setMuscleGeometryInfo"]], "setscoreinfo() (pycgm2.processing.analysis.analysis method)": [[312, "pyCGM2.Processing.analysis.Analysis.setScoreInfo"]], "setstp() (pycgm2.processing.analysis.analysis method)": [[312, "pyCGM2.Processing.analysis.Analysis.setStp"]], "setstpinfo() (pycgm2.processing.analysis.analysis method)": [[312, "pyCGM2.Processing.analysis.Analysis.setStpInfo"]], "setsubjectinfo() (pycgm2.processing.analysis.analysis method)": [[312, "pyCGM2.Processing.analysis.Analysis.setSubjectInfo"]], "stpinfo (pycgm2.processing.analysis.analysis attribute)": [[312, "pyCGM2.Processing.analysis.Analysis.stpInfo"]], "stpstats (pycgm2.processing.analysis.analysis attribute)": [[312, "pyCGM2.Processing.analysis.Analysis.stpStats"]], "subjectinfo (pycgm2.processing.analysis.analysis attribute)": [[312, "pyCGM2.Processing.analysis.Analysis.subjectInfo"]], "analysisbuilder (class in pycgm2.processing.analysis)": [[313, "pyCGM2.Processing.analysis.AnalysisBuilder"]], "__init__() (pycgm2.processing.analysis.analysisbuilder method)": [[313, "pyCGM2.Processing.analysis.AnalysisBuilder.__init__"]], "computeemgenvelopes() (pycgm2.processing.analysis.analysisbuilder method)": [[313, "pyCGM2.Processing.analysis.AnalysisBuilder.computeEmgEnvelopes"]], "computekinematics() (pycgm2.processing.analysis.analysisbuilder method)": [[313, "pyCGM2.Processing.analysis.AnalysisBuilder.computeKinematics"]], "computekinetics() (pycgm2.processing.analysis.analysisbuilder method)": [[313, "pyCGM2.Processing.analysis.AnalysisBuilder.computeKinetics"]], "computemuscledynamic() (pycgm2.processing.analysis.analysisbuilder method)": [[313, "pyCGM2.Processing.analysis.AnalysisBuilder.computeMuscleDynamic"]], "computemusclegeometry() (pycgm2.processing.analysis.analysisbuilder method)": [[313, "pyCGM2.Processing.analysis.AnalysisBuilder.computeMuscleGeometry"]], "analysisfilter (class in pycgm2.processing.analysis)": [[314, "pyCGM2.Processing.analysis.AnalysisFilter"]], "__init__() (pycgm2.processing.analysis.analysisfilter method)": [[314, "pyCGM2.Processing.analysis.AnalysisFilter.__init__"]], "build() (pycgm2.processing.analysis.analysisfilter method)": [[314, "pyCGM2.Processing.analysis.AnalysisFilter.build"]], "setbuilder() (pycgm2.processing.analysis.analysisfilter method)": [[314, "pyCGM2.Processing.analysis.AnalysisFilter.setBuilder"]], "setinfo() (pycgm2.processing.analysis.analysisfilter method)": [[314, "pyCGM2.Processing.analysis.AnalysisFilter.setInfo"]], "analysisstructure (class in pycgm2.processing.analysis)": [[315, "pyCGM2.Processing.analysis.AnalysisStructure"]], "__init__() (pycgm2.processing.analysis.analysisstructure method)": [[315, "pyCGM2.Processing.analysis.AnalysisStructure.__init__"]], "data (pycgm2.processing.analysis.analysisstructure attribute)": [[315, "pyCGM2.Processing.analysis.AnalysisStructure.data"]], "optionaldata (pycgm2.processing.analysis.analysisstructure attribute)": [[315, "pyCGM2.Processing.analysis.AnalysisStructure.optionalData"]], "pst (pycgm2.processing.analysis.analysisstructure attribute)": [[315, "pyCGM2.Processing.analysis.AnalysisStructure.pst"]], "gaitanalysisbuilder (class in pycgm2.processing.analysis)": [[316, "pyCGM2.Processing.analysis.GaitAnalysisBuilder"]], "__init__() (pycgm2.processing.analysis.gaitanalysisbuilder method)": [[316, "pyCGM2.Processing.analysis.GaitAnalysisBuilder.__init__"]], "computeemgenvelopes() (pycgm2.processing.analysis.gaitanalysisbuilder method)": [[316, "pyCGM2.Processing.analysis.GaitAnalysisBuilder.computeEmgEnvelopes"]], "computekinematics() (pycgm2.processing.analysis.gaitanalysisbuilder method)": [[316, "pyCGM2.Processing.analysis.GaitAnalysisBuilder.computeKinematics"]], "computekinetics() (pycgm2.processing.analysis.gaitanalysisbuilder method)": [[316, "pyCGM2.Processing.analysis.GaitAnalysisBuilder.computeKinetics"]], "computemuscledynamic() (pycgm2.processing.analysis.gaitanalysisbuilder method)": [[316, "pyCGM2.Processing.analysis.GaitAnalysisBuilder.computeMuscleDynamic"]], "computemusclegeometry() (pycgm2.processing.analysis.gaitanalysisbuilder method)": [[316, "pyCGM2.Processing.analysis.GaitAnalysisBuilder.computeMuscleGeometry"]], "computespatiotemporel() (pycgm2.processing.analysis.gaitanalysisbuilder method)": [[316, "pyCGM2.Processing.analysis.GaitAnalysisBuilder.computeSpatioTemporel"]], "getanalysissection() (in module pycgm2.processing.analysishandler)": [[317, "pyCGM2.Processing.analysisHandler.getAnalysisSection"]], "getnumberofcycle() (in module pycgm2.processing.analysishandler)": [[318, "pyCGM2.Processing.analysisHandler.getNumberOfCycle"]], "getphases() (in module pycgm2.processing.analysishandler)": [[319, "pyCGM2.Processing.analysisHandler.getPhases"]], "getvalues() (in module pycgm2.processing.analysishandler)": [[320, "pyCGM2.Processing.analysisHandler.getValues"]], "iskeyexist() (in module pycgm2.processing.analysishandler)": [[321, "pyCGM2.Processing.analysisHandler.isKeyExist"]], "normalizedmusclelength_withpose() (in module pycgm2.processing.analysishandler)": [[322, "pyCGM2.Processing.analysisHandler.normalizedMuscleLength_withPose"]], "cycle (class in pycgm2.processing.cycle)": [[323, "pyCGM2.Processing.cycle.Cycle"]], "__init__() (pycgm2.processing.cycle.cycle method)": [[323, "pyCGM2.Processing.cycle.Cycle.__init__"]], "getanalogtimesequencedata() (pycgm2.processing.cycle.cycle method)": [[323, "pyCGM2.Processing.cycle.Cycle.getAnalogTimeSequenceData"]], "getanalogtimesequencedatanormalized() (pycgm2.processing.cycle.cycle method)": [[323, "pyCGM2.Processing.cycle.Cycle.getAnalogTimeSequenceDataNormalized"]], "getevents() (pycgm2.processing.cycle.cycle method)": [[323, "pyCGM2.Processing.cycle.Cycle.getEvents"]], "getpointtimesequencedata() (pycgm2.processing.cycle.cycle method)": [[323, "pyCGM2.Processing.cycle.Cycle.getPointTimeSequenceData"]], "getpointtimesequencedatanormalized() (pycgm2.processing.cycle.cycle method)": [[323, "pyCGM2.Processing.cycle.Cycle.getPointTimeSequenceDataNormalized"]], "setenableflag() (pycgm2.processing.cycle.cycle method)": [[323, "pyCGM2.Processing.cycle.Cycle.setEnableFlag"]], "cycles (class in pycgm2.processing.cycle)": [[324, "pyCGM2.Processing.cycle.Cycles"]], "__init__() (pycgm2.processing.cycle.cycles method)": [[324, "pyCGM2.Processing.cycle.Cycles.__init__"]], "cyclesbuilder (class in pycgm2.processing.cycle)": [[325, "pyCGM2.Processing.cycle.CyclesBuilder"]], "__init__() (pycgm2.processing.cycle.cyclesbuilder method)": [[325, "pyCGM2.Processing.cycle.CyclesBuilder.__init__"]], "getemg() (pycgm2.processing.cycle.cyclesbuilder method)": [[325, "pyCGM2.Processing.cycle.CyclesBuilder.getEmg"]], "getkinematics() (pycgm2.processing.cycle.cyclesbuilder method)": [[325, "pyCGM2.Processing.cycle.CyclesBuilder.getKinematics"]], "getkinetics() (pycgm2.processing.cycle.cyclesbuilder method)": [[325, "pyCGM2.Processing.cycle.CyclesBuilder.getKinetics"]], "getmuscledynamic() (pycgm2.processing.cycle.cyclesbuilder method)": [[325, "pyCGM2.Processing.cycle.CyclesBuilder.getMuscleDynamic"]], "getmusclegeometry() (pycgm2.processing.cycle.cyclesbuilder method)": [[325, "pyCGM2.Processing.cycle.CyclesBuilder.getMuscleGeometry"]], "getspatiotemporal() (pycgm2.processing.cycle.cyclesbuilder method)": [[325, "pyCGM2.Processing.cycle.CyclesBuilder.getSpatioTemporal"]], "cyclesfilter (class in pycgm2.processing.cycle)": [[326, "pyCGM2.Processing.cycle.CyclesFilter"]], "__init__() (pycgm2.processing.cycle.cyclesfilter method)": [[326, "pyCGM2.Processing.cycle.CyclesFilter.__init__"]], "build() (pycgm2.processing.cycle.cyclesfilter method)": [[326, "pyCGM2.Processing.cycle.CyclesFilter.build"]], "setbuilder() (pycgm2.processing.cycle.cyclesfilter method)": [[326, "pyCGM2.Processing.cycle.CyclesFilter.setBuilder"]], "gaitcycle (class in pycgm2.processing.cycle)": [[327, "pyCGM2.Processing.cycle.GaitCycle"]], "__init__() (pycgm2.processing.cycle.gaitcycle method)": [[327, "pyCGM2.Processing.cycle.GaitCycle.__init__"]], "getspatiotemporalparameter() (pycgm2.processing.cycle.gaitcycle method)": [[327, "pyCGM2.Processing.cycle.GaitCycle.getSpatioTemporalParameter"]], "gaitcyclesbuilder (class in pycgm2.processing.cycle)": [[328, "pyCGM2.Processing.cycle.GaitCyclesBuilder"]], "__init__() (pycgm2.processing.cycle.gaitcyclesbuilder method)": [[328, "pyCGM2.Processing.cycle.GaitCyclesBuilder.__init__"]], "getemg() (pycgm2.processing.cycle.gaitcyclesbuilder method)": [[328, "pyCGM2.Processing.cycle.GaitCyclesBuilder.getEmg"]], "getkinematics() (pycgm2.processing.cycle.gaitcyclesbuilder method)": [[328, "pyCGM2.Processing.cycle.GaitCyclesBuilder.getKinematics"]], "getkinetics() (pycgm2.processing.cycle.gaitcyclesbuilder method)": [[328, "pyCGM2.Processing.cycle.GaitCyclesBuilder.getKinetics"]], "getmuscledynamic() (pycgm2.processing.cycle.gaitcyclesbuilder method)": [[328, "pyCGM2.Processing.cycle.GaitCyclesBuilder.getMuscleDynamic"]], "getmusclegeometry() (pycgm2.processing.cycle.gaitcyclesbuilder method)": [[328, "pyCGM2.Processing.cycle.GaitCyclesBuilder.getMuscleGeometry"]], "getspatiotemporal() (pycgm2.processing.cycle.gaitcyclesbuilder method)": [[328, "pyCGM2.Processing.cycle.GaitCyclesBuilder.getSpatioTemporal"]], "analog_descriptivestats() (in module pycgm2.processing.cycle)": [[329, "pyCGM2.Processing.cycle.analog_descriptiveStats"]], "construcgaitcycle() (in module pycgm2.processing.cycle)": [[330, "pyCGM2.Processing.cycle.construcGaitCycle"]], "point_descriptivestats() (in module pycgm2.processing.cycle)": [[331, "pyCGM2.Processing.cycle.point_descriptiveStats"]], "spatiotemporelparameter_descriptivestats() (in module pycgm2.processing.cycle)": [[332, "pyCGM2.Processing.cycle.spatioTemporelParameter_descriptiveStats"]], "analysisexportfilter (class in pycgm2.processing.exporter)": [[333, "pyCGM2.Processing.exporter.AnalysisExportFilter"]], "__init__() (pycgm2.processing.exporter.analysisexportfilter method)": [[333, "pyCGM2.Processing.exporter.AnalysisExportFilter.__init__"]], "analysis (pycgm2.processing.exporter.analysisexportfilter attribute)": [[333, "pyCGM2.Processing.exporter.AnalysisExportFilter.analysis"]], "export() (pycgm2.processing.exporter.analysisexportfilter method)": [[333, "pyCGM2.Processing.exporter.AnalysisExportFilter.export"]], "setanalysisinstance() (pycgm2.processing.exporter.analysisexportfilter method)": [[333, "pyCGM2.Processing.exporter.AnalysisExportFilter.setAnalysisInstance"]], "xlsanalysisexportfilter (class in pycgm2.processing.exporter)": [[334, "pyCGM2.Processing.exporter.XlsAnalysisExportFilter"]], "__init__() (pycgm2.processing.exporter.xlsanalysisexportfilter method)": [[334, "pyCGM2.Processing.exporter.XlsAnalysisExportFilter.__init__"]], "analysis (pycgm2.processing.exporter.xlsanalysisexportfilter attribute)": [[334, "pyCGM2.Processing.exporter.XlsAnalysisExportFilter.analysis"]], "export() (pycgm2.processing.exporter.xlsanalysisexportfilter method)": [[334, "pyCGM2.Processing.exporter.XlsAnalysisExportFilter.export"]], "setanalysisinstance() (pycgm2.processing.exporter.xlsanalysisexportfilter method)": [[334, "pyCGM2.Processing.exporter.XlsAnalysisExportFilter.setAnalysisInstance"]], "xlsexportdataframefilter (class in pycgm2.processing.exporter)": [[335, "pyCGM2.Processing.exporter.XlsExportDataFrameFilter"]], "__init__() (pycgm2.processing.exporter.xlsexportdataframefilter method)": [[335, "pyCGM2.Processing.exporter.XlsExportDataFrameFilter.__init__"]], "dataframes (pycgm2.processing.exporter.xlsexportdataframefilter attribute)": [[335, "pyCGM2.Processing.exporter.XlsExportDataFrameFilter.dataframes"]], "export() (pycgm2.processing.exporter.xlsexportdataframefilter method)": [[335, "pyCGM2.Processing.exporter.XlsExportDataFrameFilter.export"]], "setdataframes() (pycgm2.processing.exporter.xlsexportdataframefilter method)": [[335, "pyCGM2.Processing.exporter.XlsExportDataFrameFilter.setDataFrames"]], "subjectmp() (in module pycgm2.qtm.qtmtools)": [[342, "pyCGM2.QTM.qtmTools.SubjectMp"]], "detectmeasurementtype() (in module pycgm2.qtm.qtmtools)": [[343, "pyCGM2.QTM.qtmTools.detectMeasurementType"]], "finddynamic() (in module pycgm2.qtm.qtmtools)": [[344, "pyCGM2.QTM.qtmTools.findDynamic"]], "findkneecalibration() (in module pycgm2.qtm.qtmtools)": [[345, "pyCGM2.QTM.qtmTools.findKneeCalibration"]], "findstatic() (in module pycgm2.qtm.qtmtools)": [[346, "pyCGM2.QTM.qtmTools.findStatic"]], "getfilename() (in module pycgm2.qtm.qtmtools)": [[347, "pyCGM2.QTM.qtmTools.getFilename"]], "getforceplateassigment() (in module pycgm2.qtm.qtmtools)": [[348, "pyCGM2.QTM.qtmTools.getForcePlateAssigment"]], "getkneefunctioncalibmethod() (in module pycgm2.qtm.qtmtools)": [[349, "pyCGM2.QTM.qtmTools.getKneeFunctionCalibMethod"]], "get_creation_date() (in module pycgm2.qtm.qtmtools)": [[350, "pyCGM2.QTM.qtmTools.get_creation_date"]], "get_modelled_trials() (in module pycgm2.qtm.qtmtools)": [[351, "pyCGM2.QTM.qtmTools.get_modelled_trials"]], "istype() (in module pycgm2.qtm.qtmtools)": [[352, "pyCGM2.QTM.qtmTools.isType"]], "kinematicsplotcomparisonviewer (class in pycgm2.report.viewers.comparisonplotviewers)": [[354, "pyCGM2.Report.Viewers.comparisonPlotViewers.KinematicsPlotComparisonViewer"]], "__init__() (pycgm2.report.viewers.comparisonplotviewers.kinematicsplotcomparisonviewer method)": [[354, "pyCGM2.Report.Viewers.comparisonPlotViewers.KinematicsPlotComparisonViewer.__init__"]], "plotpanel() (pycgm2.report.viewers.comparisonplotviewers.kinematicsplotcomparisonviewer method)": [[354, "pyCGM2.Report.Viewers.comparisonPlotViewers.KinematicsPlotComparisonViewer.plotPanel"]], "setconcreteplotfunction() (pycgm2.report.viewers.comparisonplotviewers.kinematicsplotcomparisonviewer method)": [[354, "pyCGM2.Report.Viewers.comparisonPlotViewers.KinematicsPlotComparisonViewer.setConcretePlotFunction"]], "setnormativedataset() (pycgm2.report.viewers.comparisonplotviewers.kinematicsplotcomparisonviewer method)": [[354, "pyCGM2.Report.Viewers.comparisonPlotViewers.KinematicsPlotComparisonViewer.setNormativeDataset"]], "kineticsplotcomparisonviewer (class in pycgm2.report.viewers.comparisonplotviewers)": [[355, "pyCGM2.Report.Viewers.comparisonPlotViewers.KineticsPlotComparisonViewer"]], "__init__() (pycgm2.report.viewers.comparisonplotviewers.kineticsplotcomparisonviewer method)": [[355, "pyCGM2.Report.Viewers.comparisonPlotViewers.KineticsPlotComparisonViewer.__init__"]], "plotpanel() (pycgm2.report.viewers.comparisonplotviewers.kineticsplotcomparisonviewer method)": [[355, "pyCGM2.Report.Viewers.comparisonPlotViewers.KineticsPlotComparisonViewer.plotPanel"]], "setconcreteplotfunction() (pycgm2.report.viewers.comparisonplotviewers.kineticsplotcomparisonviewer method)": [[355, "pyCGM2.Report.Viewers.comparisonPlotViewers.KineticsPlotComparisonViewer.setConcretePlotFunction"]], "setnormativedataset() (pycgm2.report.viewers.comparisonplotviewers.kineticsplotcomparisonviewer method)": [[355, "pyCGM2.Report.Viewers.comparisonPlotViewers.KineticsPlotComparisonViewer.setNormativeDataset"]], "saggitalgageplotviewer (class in pycgm2.report.viewers.customplotviewers)": [[356, "pyCGM2.Report.Viewers.customPlotViewers.SaggitalGagePlotViewer"]], "__init__() (pycgm2.report.viewers.customplotviewers.saggitalgageplotviewer method)": [[356, "pyCGM2.Report.Viewers.customPlotViewers.SaggitalGagePlotViewer.__init__"]], "plotpanel() (pycgm2.report.viewers.customplotviewers.saggitalgageplotviewer method)": [[356, "pyCGM2.Report.Viewers.customPlotViewers.SaggitalGagePlotViewer.plotPanel"]], "setnormativedataset() (pycgm2.report.viewers.customplotviewers.saggitalgageplotviewer method)": [[356, "pyCGM2.Report.Viewers.customPlotViewers.SaggitalGagePlotViewer.setNormativeDataset"]], "coactivationemgplotviewer (class in pycgm2.report.viewers.emgplotviewers)": [[357, "pyCGM2.Report.Viewers.emgPlotViewers.CoactivationEmgPlotViewer"]], "__init__() (pycgm2.report.viewers.emgplotviewers.coactivationemgplotviewer method)": [[357, "pyCGM2.Report.Viewers.emgPlotViewers.CoactivationEmgPlotViewer.__init__"]], "plotpanel() (pycgm2.report.viewers.emgplotviewers.coactivationemgplotviewer method)": [[357, "pyCGM2.Report.Viewers.emgPlotViewers.CoactivationEmgPlotViewer.plotPanel"]], "setconcreteplotfunction() (pycgm2.report.viewers.emgplotviewers.coactivationemgplotviewer method)": [[357, "pyCGM2.Report.Viewers.emgPlotViewers.CoactivationEmgPlotViewer.setConcretePlotFunction"]], "setcontext() (pycgm2.report.viewers.emgplotviewers.coactivationemgplotviewer method)": [[357, "pyCGM2.Report.Viewers.emgPlotViewers.CoactivationEmgPlotViewer.setContext"]], "setemgs() (pycgm2.report.viewers.emgplotviewers.coactivationemgplotviewer method)": [[357, "pyCGM2.Report.Viewers.emgPlotViewers.CoactivationEmgPlotViewer.setEmgs"]], "setmuscles() (pycgm2.report.viewers.emgplotviewers.coactivationemgplotviewer method)": [[357, "pyCGM2.Report.Viewers.emgPlotViewers.CoactivationEmgPlotViewer.setMuscles"]], "setnormativedataset() (pycgm2.report.viewers.emgplotviewers.coactivationemgplotviewer method)": [[357, "pyCGM2.Report.Viewers.emgPlotViewers.CoactivationEmgPlotViewer.setNormativeDataset"]], "envemggaitplotpanelviewer (class in pycgm2.report.viewers.emgplotviewers)": [[358, "pyCGM2.Report.Viewers.emgPlotViewers.EnvEmgGaitPlotPanelViewer"]], "__init__() (pycgm2.report.viewers.emgplotviewers.envemggaitplotpanelviewer method)": [[358, "pyCGM2.Report.Viewers.emgPlotViewers.EnvEmgGaitPlotPanelViewer.__init__"]], "plotpanel() (pycgm2.report.viewers.emgplotviewers.envemggaitplotpanelviewer method)": [[358, "pyCGM2.Report.Viewers.emgPlotViewers.EnvEmgGaitPlotPanelViewer.plotPanel"]], "selectemgchannels() (pycgm2.report.viewers.emgplotviewers.envemggaitplotpanelviewer method)": [[358, "pyCGM2.Report.Viewers.emgPlotViewers.EnvEmgGaitPlotPanelViewer.selectEmgChannels"]], "setconcreteplotfunction() (pycgm2.report.viewers.emgplotviewers.envemggaitplotpanelviewer method)": [[358, "pyCGM2.Report.Viewers.emgPlotViewers.EnvEmgGaitPlotPanelViewer.setConcretePlotFunction"]], "setemgmanager() (pycgm2.report.viewers.emgplotviewers.envemggaitplotpanelviewer method)": [[358, "pyCGM2.Report.Viewers.emgPlotViewers.EnvEmgGaitPlotPanelViewer.setEmgManager"]], "setnormalizedemgflag() (pycgm2.report.viewers.emgplotviewers.envemggaitplotpanelviewer method)": [[358, "pyCGM2.Report.Viewers.emgPlotViewers.EnvEmgGaitPlotPanelViewer.setNormalizedEmgFlag"]], "setnormativedataset() (pycgm2.report.viewers.emgplotviewers.envemggaitplotpanelviewer method)": [[358, "pyCGM2.Report.Viewers.emgPlotViewers.EnvEmgGaitPlotPanelViewer.setNormativeDataset"]], "multipleanalysis_envemgplotpanelviewer (class in pycgm2.report.viewers.emgplotviewers)": [[359, "pyCGM2.Report.Viewers.emgPlotViewers.MultipleAnalysis_EnvEmgPlotPanelViewer"]], "__init__() (pycgm2.report.viewers.emgplotviewers.multipleanalysis_envemgplotpanelviewer method)": [[359, "pyCGM2.Report.Viewers.emgPlotViewers.MultipleAnalysis_EnvEmgPlotPanelViewer.__init__"]], "plotpanel() (pycgm2.report.viewers.emgplotviewers.multipleanalysis_envemgplotpanelviewer method)": [[359, "pyCGM2.Report.Viewers.emgPlotViewers.MultipleAnalysis_EnvEmgPlotPanelViewer.plotPanel"]], "selectemgchannels() (pycgm2.report.viewers.emgplotviewers.multipleanalysis_envemgplotpanelviewer method)": [[359, "pyCGM2.Report.Viewers.emgPlotViewers.MultipleAnalysis_EnvEmgPlotPanelViewer.selectEmgChannels"]], "setconcreteplotfunction() (pycgm2.report.viewers.emgplotviewers.multipleanalysis_envemgplotpanelviewer method)": [[359, "pyCGM2.Report.Viewers.emgPlotViewers.MultipleAnalysis_EnvEmgPlotPanelViewer.setConcretePlotFunction"]], "setemgmanager() (pycgm2.report.viewers.emgplotviewers.multipleanalysis_envemgplotpanelviewer method)": [[359, "pyCGM2.Report.Viewers.emgPlotViewers.MultipleAnalysis_EnvEmgPlotPanelViewer.setEmgManager"]], "setnormalizedemgflag() (pycgm2.report.viewers.emgplotviewers.multipleanalysis_envemgplotpanelviewer method)": [[359, "pyCGM2.Report.Viewers.emgPlotViewers.MultipleAnalysis_EnvEmgPlotPanelViewer.setNormalizedEmgFlag"]], "setnormativedataset() (pycgm2.report.viewers.emgplotviewers.multipleanalysis_envemgplotpanelviewer method)": [[359, "pyCGM2.Report.Viewers.emgPlotViewers.MultipleAnalysis_EnvEmgPlotPanelViewer.setNormativeDataset"]], "temporalemgplotviewer (class in pycgm2.report.viewers.emgplotviewers)": [[360, "pyCGM2.Report.Viewers.emgPlotViewers.TemporalEmgPlotViewer"]], "__init__() (pycgm2.report.viewers.emgplotviewers.temporalemgplotviewer method)": [[360, "pyCGM2.Report.Viewers.emgPlotViewers.TemporalEmgPlotViewer.__init__"]], "ignorenormalactivty() (pycgm2.report.viewers.emgplotviewers.temporalemgplotviewer method)": [[360, "pyCGM2.Report.Viewers.emgPlotViewers.TemporalEmgPlotViewer.ignoreNormalActivty"]], "plotpanel() (pycgm2.report.viewers.emgplotviewers.temporalemgplotviewer method)": [[360, "pyCGM2.Report.Viewers.emgPlotViewers.TemporalEmgPlotViewer.plotPanel"]], "selectemgchannels() (pycgm2.report.viewers.emgplotviewers.temporalemgplotviewer method)": [[360, "pyCGM2.Report.Viewers.emgPlotViewers.TemporalEmgPlotViewer.selectEmgChannels"]], "setemgmanager() (pycgm2.report.viewers.emgplotviewers.temporalemgplotviewer method)": [[360, "pyCGM2.Report.Viewers.emgPlotViewers.TemporalEmgPlotViewer.setEmgManager"]], "setemgrectify() (pycgm2.report.viewers.emgplotviewers.temporalemgplotviewer method)": [[360, "pyCGM2.Report.Viewers.emgPlotViewers.TemporalEmgPlotViewer.setEmgRectify"]], "setnormativedataset() (pycgm2.report.viewers.emgplotviewers.temporalemgplotviewer method)": [[360, "pyCGM2.Report.Viewers.emgPlotViewers.TemporalEmgPlotViewer.setNormativeDataset"]], "normalizedgaitgrfintegrationplotviewer (class in pycgm2.report.viewers.groundreactionplotviewers)": [[361, "pyCGM2.Report.Viewers.groundReactionPlotViewers.NormalizedGaitGrfIntegrationPlotViewer"]], "__init__() (pycgm2.report.viewers.groundreactionplotviewers.normalizedgaitgrfintegrationplotviewer method)": [[361, "pyCGM2.Report.Viewers.groundReactionPlotViewers.NormalizedGaitGrfIntegrationPlotViewer.__init__"]], "plotpanel() (pycgm2.report.viewers.groundreactionplotviewers.normalizedgaitgrfintegrationplotviewer method)": [[361, "pyCGM2.Report.Viewers.groundReactionPlotViewers.NormalizedGaitGrfIntegrationPlotViewer.plotPanel"]], "setconcreteplotfunction() (pycgm2.report.viewers.groundreactionplotviewers.normalizedgaitgrfintegrationplotviewer method)": [[361, "pyCGM2.Report.Viewers.groundReactionPlotViewers.NormalizedGaitGrfIntegrationPlotViewer.setConcretePlotFunction"]], "setnormativedataset() (pycgm2.report.viewers.groundreactionplotviewers.normalizedgaitgrfintegrationplotviewer method)": [[361, "pyCGM2.Report.Viewers.groundReactionPlotViewers.NormalizedGaitGrfIntegrationPlotViewer.setNormativeDataset"]], "normalizedgaitmeangrfintegrationplotviewer (class in pycgm2.report.viewers.groundreactionplotviewers)": [[362, "pyCGM2.Report.Viewers.groundReactionPlotViewers.NormalizedGaitMeanGrfIntegrationPlotViewer"]], "__init__() (pycgm2.report.viewers.groundreactionplotviewers.normalizedgaitmeangrfintegrationplotviewer method)": [[362, "pyCGM2.Report.Viewers.groundReactionPlotViewers.NormalizedGaitMeanGrfIntegrationPlotViewer.__init__"]], "plotpanel() (pycgm2.report.viewers.groundreactionplotviewers.normalizedgaitmeangrfintegrationplotviewer method)": [[362, "pyCGM2.Report.Viewers.groundReactionPlotViewers.NormalizedGaitMeanGrfIntegrationPlotViewer.plotPanel"]], "setnormativedataset() (pycgm2.report.viewers.groundreactionplotviewers.normalizedgaitmeangrfintegrationplotviewer method)": [[362, "pyCGM2.Report.Viewers.groundReactionPlotViewers.NormalizedGaitMeanGrfIntegrationPlotViewer.setNormativeDataset"]], "normalizedgroundreactionforceplotviewer (class in pycgm2.report.viewers.groundreactionplotviewers)": [[363, "pyCGM2.Report.Viewers.groundReactionPlotViewers.NormalizedGroundReactionForcePlotViewer"]], "__init__() (pycgm2.report.viewers.groundreactionplotviewers.normalizedgroundreactionforceplotviewer method)": [[363, "pyCGM2.Report.Viewers.groundReactionPlotViewers.NormalizedGroundReactionForcePlotViewer.__init__"]], "plotpanel() (pycgm2.report.viewers.groundreactionplotviewers.normalizedgroundreactionforceplotviewer method)": [[363, "pyCGM2.Report.Viewers.groundReactionPlotViewers.NormalizedGroundReactionForcePlotViewer.plotPanel"]], "setconcreteplotfunction() (pycgm2.report.viewers.groundreactionplotviewers.normalizedgroundreactionforceplotviewer method)": [[363, "pyCGM2.Report.Viewers.groundReactionPlotViewers.NormalizedGroundReactionForcePlotViewer.setConcretePlotFunction"]], "setnormativedataset() (pycgm2.report.viewers.groundreactionplotviewers.normalizedgroundreactionforceplotviewer method)": [[363, "pyCGM2.Report.Viewers.groundReactionPlotViewers.NormalizedGroundReactionForcePlotViewer.setNormativeDataset"]], "musclenormalizedplotpanelviewer (class in pycgm2.report.viewers.muscleplotviewers)": [[364, "pyCGM2.Report.Viewers.musclePlotViewers.MuscleNormalizedPlotPanelViewer"]], "__init__() (pycgm2.report.viewers.muscleplotviewers.musclenormalizedplotpanelviewer method)": [[364, "pyCGM2.Report.Viewers.musclePlotViewers.MuscleNormalizedPlotPanelViewer.__init__"]], "plotpanel() (pycgm2.report.viewers.muscleplotviewers.musclenormalizedplotpanelviewer method)": [[364, "pyCGM2.Report.Viewers.musclePlotViewers.MuscleNormalizedPlotPanelViewer.plotPanel"]], "setconcreteplotfunction() (pycgm2.report.viewers.muscleplotviewers.musclenormalizedplotpanelviewer method)": [[364, "pyCGM2.Report.Viewers.musclePlotViewers.MuscleNormalizedPlotPanelViewer.setConcretePlotFunction"]], "setmuscleoutputtype() (pycgm2.report.viewers.muscleplotviewers.musclenormalizedplotpanelviewer method)": [[364, "pyCGM2.Report.Viewers.musclePlotViewers.MuscleNormalizedPlotPanelViewer.setMuscleOutputType"]], "setmuscles() (pycgm2.report.viewers.muscleplotviewers.musclenormalizedplotpanelviewer method)": [[364, "pyCGM2.Report.Viewers.musclePlotViewers.MuscleNormalizedPlotPanelViewer.setMuscles"]], "setnormalizationsuffix() (pycgm2.report.viewers.muscleplotviewers.musclenormalizedplotpanelviewer method)": [[364, "pyCGM2.Report.Viewers.musclePlotViewers.MuscleNormalizedPlotPanelViewer.setNormalizationSuffix"]], "setnormativedataset() (pycgm2.report.viewers.muscleplotviewers.musclenormalizedplotpanelviewer method)": [[364, "pyCGM2.Report.Viewers.musclePlotViewers.MuscleNormalizedPlotPanelViewer.setNormativeDataset"]], "gpsmapplotviewer (class in pycgm2.report.viewers.plotviewers)": [[365, "pyCGM2.Report.Viewers.plotViewers.GpsMapPlotViewer"]], "__init__() (pycgm2.report.viewers.plotviewers.gpsmapplotviewer method)": [[365, "pyCGM2.Report.Viewers.plotViewers.GpsMapPlotViewer.__init__"]], "plotpanel() (pycgm2.report.viewers.plotviewers.gpsmapplotviewer method)": [[365, "pyCGM2.Report.Viewers.plotViewers.GpsMapPlotViewer.plotPanel"]], "normalizedkinematicsplotviewer (class in pycgm2.report.viewers.plotviewers)": [[366, "pyCGM2.Report.Viewers.plotViewers.NormalizedKinematicsPlotViewer"]], "__init__() (pycgm2.report.viewers.plotviewers.normalizedkinematicsplotviewer method)": [[366, "pyCGM2.Report.Viewers.plotViewers.NormalizedKinematicsPlotViewer.__init__"]], "plotpanel() (pycgm2.report.viewers.plotviewers.normalizedkinematicsplotviewer method)": [[366, "pyCGM2.Report.Viewers.plotViewers.NormalizedKinematicsPlotViewer.plotPanel"]], "setconcreteplotfunction() (pycgm2.report.viewers.plotviewers.normalizedkinematicsplotviewer method)": [[366, "pyCGM2.Report.Viewers.plotViewers.NormalizedKinematicsPlotViewer.setConcretePlotFunction"]], "setnormativedataset() (pycgm2.report.viewers.plotviewers.normalizedkinematicsplotviewer method)": [[366, "pyCGM2.Report.Viewers.plotViewers.NormalizedKinematicsPlotViewer.setNormativeDataset"]], "normalizedkineticsplotviewer (class in pycgm2.report.viewers.plotviewers)": [[367, "pyCGM2.Report.Viewers.plotViewers.NormalizedKineticsPlotViewer"]], "__init__() (pycgm2.report.viewers.plotviewers.normalizedkineticsplotviewer method)": [[367, "pyCGM2.Report.Viewers.plotViewers.NormalizedKineticsPlotViewer.__init__"]], "plotpanel() (pycgm2.report.viewers.plotviewers.normalizedkineticsplotviewer method)": [[367, "pyCGM2.Report.Viewers.plotViewers.NormalizedKineticsPlotViewer.plotPanel"]], "setconcreteplotfunction() (pycgm2.report.viewers.plotviewers.normalizedkineticsplotviewer method)": [[367, "pyCGM2.Report.Viewers.plotViewers.NormalizedKineticsPlotViewer.setConcretePlotFunction"]], "setnormativedataset() (pycgm2.report.viewers.plotviewers.normalizedkineticsplotviewer method)": [[367, "pyCGM2.Report.Viewers.plotViewers.NormalizedKineticsPlotViewer.setNormativeDataset"]], "plotviewer (class in pycgm2.report.viewers.plotviewers)": [[368, "pyCGM2.Report.Viewers.plotViewers.PlotViewer"]], "__init__() (pycgm2.report.viewers.plotviewers.plotviewer method)": [[368, "pyCGM2.Report.Viewers.plotViewers.PlotViewer.__init__"]], "plotpanel() (pycgm2.report.viewers.plotviewers.plotviewer method)": [[368, "pyCGM2.Report.Viewers.plotViewers.PlotViewer.plotPanel"]], "setautomaticylimits() (pycgm2.report.viewers.plotviewers.plotviewer method)": [[368, "pyCGM2.Report.Viewers.plotViewers.PlotViewer.setAutomaticYlimits"]], "setnormativedata() (pycgm2.report.viewers.plotviewers.plotviewer method)": [[368, "pyCGM2.Report.Viewers.plotViewers.PlotViewer.setNormativeData"]], "spatiotemporalplotviewer (class in pycgm2.report.viewers.plotviewers)": [[369, "pyCGM2.Report.Viewers.plotViewers.SpatioTemporalPlotViewer"]], "__init__() (pycgm2.report.viewers.plotviewers.spatiotemporalplotviewer method)": [[369, "pyCGM2.Report.Viewers.plotViewers.SpatioTemporalPlotViewer.__init__"]], "plotpanel() (pycgm2.report.viewers.plotviewers.spatiotemporalplotviewer method)": [[369, "pyCGM2.Report.Viewers.plotViewers.SpatioTemporalPlotViewer.plotPanel"]], "setnormativedataset() (pycgm2.report.viewers.plotviewers.spatiotemporalplotviewer method)": [[369, "pyCGM2.Report.Viewers.plotViewers.SpatioTemporalPlotViewer.setNormativeDataset"]], "temporalkinematicsplotviewer (class in pycgm2.report.viewers.plotviewers)": [[370, "pyCGM2.Report.Viewers.plotViewers.TemporalKinematicsPlotViewer"]], "__init__() (pycgm2.report.viewers.plotviewers.temporalkinematicsplotviewer method)": [[370, "pyCGM2.Report.Viewers.plotViewers.TemporalKinematicsPlotViewer.__init__"]], "plotpanel() (pycgm2.report.viewers.plotviewers.temporalkinematicsplotviewer method)": [[370, "pyCGM2.Report.Viewers.plotViewers.TemporalKinematicsPlotViewer.plotPanel"]], "temporalkineticsplotviewer (class in pycgm2.report.viewers.plotviewers)": [[371, "pyCGM2.Report.Viewers.plotViewers.TemporalKineticsPlotViewer"]], "__init__() (pycgm2.report.viewers.plotviewers.temporalkineticsplotviewer method)": [[371, "pyCGM2.Report.Viewers.plotViewers.TemporalKineticsPlotViewer.__init__"]], "plotpanel() (pycgm2.report.viewers.plotviewers.temporalkineticsplotviewer method)": [[371, "pyCGM2.Report.Viewers.plotViewers.TemporalKineticsPlotViewer.plotPanel"]], "normalstp (class in pycgm2.report.normativedatasets)": [[372, "pyCGM2.Report.normativeDatasets.NormalSTP"]], "__init__() (pycgm2.report.normativedatasets.normalstp method)": [[372, "pyCGM2.Report.normativeDatasets.NormalSTP.__init__"]], "data (pycgm2.report.normativedatasets.normalstp attribute)": [[372, "pyCGM2.Report.normativeDatasets.NormalSTP.data"]], "normativedata (class in pycgm2.report.normativedatasets)": [[373, "pyCGM2.Report.normativeDatasets.NormativeData"]], "__init__() (pycgm2.report.normativedatasets.normativedata method)": [[373, "pyCGM2.Report.normativeDatasets.NormativeData.__init__"]], "data (pycgm2.report.normativedatasets.normativedata attribute)": [[373, "pyCGM2.Report.normativeDatasets.NormativeData.data"]], "addnormalactivationlayer() (in module pycgm2.report.plot)": [[374, "pyCGM2.Report.plot.addNormalActivationLayer"]], "addrectanglepatches() (in module pycgm2.report.plot)": [[375, "pyCGM2.Report.plot.addRectanglePatches"]], "addtemporalnormalactivationlayer() (in module pycgm2.report.plot)": [[376, "pyCGM2.Report.plot.addTemporalNormalActivationLayer"]], "consistencyplot() (in module pycgm2.report.plot)": [[377, "pyCGM2.Report.plot.consistencyPlot"]], "descriptiveplot() (in module pycgm2.report.plot)": [[378, "pyCGM2.Report.plot.descriptivePlot"]], "gaitconsistencyplot() (in module pycgm2.report.plot)": [[379, "pyCGM2.Report.plot.gaitConsistencyPlot"]], "gaitdescriptiveplot() (in module pycgm2.report.plot)": [[380, "pyCGM2.Report.plot.gaitDescriptivePlot"]], "gaitmeanplot() (in module pycgm2.report.plot)": [[381, "pyCGM2.Report.plot.gaitMeanPlot"]], "meanplot() (in module pycgm2.report.plot)": [[382, "pyCGM2.Report.plot.meanPlot"]], "stphorizontalhistogram() (in module pycgm2.report.plot)": [[383, "pyCGM2.Report.plot.stpHorizontalHistogram"]], "temporalplot() (in module pycgm2.report.plot)": [[384, "pyCGM2.Report.plot.temporalPlot"]], "plottingfilter (class in pycgm2.report.plotfilters)": [[385, "pyCGM2.Report.plotFilters.PlottingFilter"]], "__concreteplotviewer (pycgm2.report.plotfilters.plottingfilter attribute)": [[385, "pyCGM2.Report.plotFilters.PlottingFilter.__concretePlotViewer"]], "__init__() (pycgm2.report.plotfilters.plottingfilter method)": [[385, "pyCGM2.Report.plotFilters.PlottingFilter.__init__"]], "displaysignificantdiffererence() (pycgm2.report.plotfilters.plottingfilter method)": [[385, "pyCGM2.Report.plotFilters.PlottingFilter.displaySignificantDiffererence"]], "m_filename (pycgm2.report.plotfilters.plottingfilter attribute)": [[385, "pyCGM2.Report.plotFilters.PlottingFilter.m_fileName"]], "m_format (pycgm2.report.plotfilters.plottingfilter attribute)": [[385, "pyCGM2.Report.plotFilters.PlottingFilter.m_format"]], "m_path (pycgm2.report.plotfilters.plottingfilter attribute)": [[385, "pyCGM2.Report.plotFilters.PlottingFilter.m_path"]], "m_title (pycgm2.report.plotfilters.plottingfilter attribute)": [[385, "pyCGM2.Report.plotFilters.PlottingFilter.m_title"]], "plot() (pycgm2.report.plotfilters.plottingfilter method)": [[385, "pyCGM2.Report.plotFilters.PlottingFilter.plot"]], "setautomaticylimits() (pycgm2.report.plotfilters.plottingfilter method)": [[385, "pyCGM2.Report.plotFilters.PlottingFilter.setAutomaticYlimits"]], "setexport() (pycgm2.report.plotfilters.plottingfilter method)": [[385, "pyCGM2.Report.plotFilters.PlottingFilter.setExport"]], "sethorizontallines() (pycgm2.report.plotfilters.plottingfilter method)": [[385, "pyCGM2.Report.plotFilters.PlottingFilter.setHorizontalLines"]], "settitle() (pycgm2.report.plotfilters.plottingfilter method)": [[385, "pyCGM2.Report.plotFilters.PlottingFilter.setTitle"]], "setviewer() (pycgm2.report.plotfilters.plottingfilter method)": [[385, "pyCGM2.Report.plotFilters.PlottingFilter.setViewer"]], "setylimits() (pycgm2.report.plotfilters.plottingfilter method)": [[385, "pyCGM2.Report.plotFilters.PlottingFilter.setYlimits"]], "colorcontext() (in module pycgm2.report.plotutils)": [[386, "pyCGM2.Report.plotUtils.colorContext"]], "detectstart_fromthreshold() (in module pycgm2.signal.detector)": [[390, "pyCGM2.Signal.detector.detectStart_fromThreshold"]], "detect_cusum() (in module pycgm2.signal.detector)": [[391, "pyCGM2.Signal.detector.detect_cusum"]], "detect_onset() (in module pycgm2.signal.detector)": [[392, "pyCGM2.Signal.detector.detect_onset"]], "detect_peaks() (in module pycgm2.signal.detector)": [[393, "pyCGM2.Signal.detector.detect_peaks"]], "detect_seq() (in module pycgm2.signal.detector)": [[394, "pyCGM2.Signal.detector.detect_seq"]], "arraylowpassfiltering() (in module pycgm2.signal.signal_processing)": [[395, "pyCGM2.Signal.signal_processing.arrayLowPassFiltering"]], "downsample() (in module pycgm2.signal.signal_processing)": [[396, "pyCGM2.Signal.signal_processing.downsample"]], "enveloppe() (in module pycgm2.signal.signal_processing)": [[397, "pyCGM2.Signal.signal_processing.enveloppe"]], "forceplatefiltering() (in module pycgm2.signal.signal_processing)": [[398, "pyCGM2.Signal.signal_processing.forcePlateFiltering"]], "highpass() (in module pycgm2.signal.signal_processing)": [[399, "pyCGM2.Signal.signal_processing.highPass"]], "markerfiltering() (in module pycgm2.signal.signal_processing)": [[400, "pyCGM2.Signal.signal_processing.markerFiltering"]], "rectify() (in module pycgm2.signal.signal_processing)": [[401, "pyCGM2.Signal.signal_processing.rectify"]], "remove50hz() (in module pycgm2.signal.signal_processing)": [[402, "pyCGM2.Signal.signal_processing.remove50hz"]], "getanalognames() (in module pycgm2.tools.btktools)": [[404, "pyCGM2.Tools.btkTools.GetAnalogNames"]], "getmarkernames() (in module pycgm2.tools.btktools)": [[405, "pyCGM2.Tools.btkTools.GetMarkerNames"]], "_getsectionfrommd() (in module pycgm2.tools.btktools)": [[406, "pyCGM2.Tools.btkTools._getSectionFromMd"]], "applyonvalidframes() (in module pycgm2.tools.btktools)": [[407, "pyCGM2.Tools.btkTools.applyOnValidFrames"]], "applyrotation() (in module pycgm2.tools.btktools)": [[408, "pyCGM2.Tools.btkTools.applyRotation"]], "applytranslators() (in module pycgm2.tools.btktools)": [[409, "pyCGM2.Tools.btkTools.applyTranslators"]], "applyvalidframesonoutput() (in module pycgm2.tools.btktools)": [[410, "pyCGM2.Tools.btkTools.applyValidFramesOnOutput"]], "automatickineticdetection() (in module pycgm2.tools.btktools)": [[411, "pyCGM2.Tools.btkTools.automaticKineticDetection"]], "btkanalogtoktktimeseries() (in module pycgm2.tools.btktools)": [[412, "pyCGM2.Tools.btkTools.btkAnalogToKtkTimeseries"]], "btkpointtoktktimeseries() (in module pycgm2.tools.btktools)": [[413, "pyCGM2.Tools.btkTools.btkPointToKtkTimeseries"]], "buildtrials() (in module pycgm2.tools.btktools)": [[414, "pyCGM2.Tools.btkTools.buildTrials"]], "calculateanglefrom3points() (in module pycgm2.tools.btktools)": [[415, "pyCGM2.Tools.btkTools.calculateAngleFrom3points"]], "changesubjectname() (in module pycgm2.tools.btktools)": [[416, "pyCGM2.Tools.btkTools.changeSubjectName"]], "checkforceplateexist() (in module pycgm2.tools.btktools)": [[417, "pyCGM2.Tools.btkTools.checkForcePlateExist"]], "checkgap() (in module pycgm2.tools.btktools)": [[418, "pyCGM2.Tools.btkTools.checkGap"]], "checkmarkers() (in module pycgm2.tools.btktools)": [[419, "pyCGM2.Tools.btkTools.checkMarkers"]], "checkmetadata() (in module pycgm2.tools.btktools)": [[420, "pyCGM2.Tools.btkTools.checkMetadata"]], "checkmultiplesubject() (in module pycgm2.tools.btktools)": [[421, "pyCGM2.Tools.btkTools.checkMultipleSubject"]], "cleanacq() (in module pycgm2.tools.btktools)": [[422, "pyCGM2.Tools.btkTools.cleanAcq"]], "clearevents() (in module pycgm2.tools.btktools)": [[423, "pyCGM2.Tools.btkTools.clearEvents"]], "clearpoints() (in module pycgm2.tools.btktools)": [[424, "pyCGM2.Tools.btkTools.clearPoints"]], "constructmarker() (in module pycgm2.tools.btktools)": [[425, "pyCGM2.Tools.btkTools.constructMarker"]], "constructphantom() (in module pycgm2.tools.btktools)": [[426, "pyCGM2.Tools.btkTools.constructPhantom"]], "createphantoms() (in module pycgm2.tools.btktools)": [[427, "pyCGM2.Tools.btkTools.createPhantoms"]], "deletecontextevents() (in module pycgm2.tools.btktools)": [[428, "pyCGM2.Tools.btkTools.deleteContextEvents"]], "findmarkergap() (in module pycgm2.tools.btktools)": [[429, "pyCGM2.Tools.btkTools.findMarkerGap"]], "findvalidframes() (in module pycgm2.tools.btktools)": [[430, "pyCGM2.Tools.btkTools.findValidFrames"]], "getallparamanalysis() (in module pycgm2.tools.btktools)": [[431, "pyCGM2.Tools.btkTools.getAllParamAnalysis"]], "getforceplatewrench() (in module pycgm2.tools.btktools)": [[432, "pyCGM2.Tools.btkTools.getForcePlateWrench"]], "getframeboundaries() (in module pycgm2.tools.btktools)": [[433, "pyCGM2.Tools.btkTools.getFrameBoundaries"]], "getlabelsfromscalar() (in module pycgm2.tools.btktools)": [[434, "pyCGM2.Tools.btkTools.getLabelsFromScalar"]], "getnumberofforceplate() (in module pycgm2.tools.btktools)": [[435, "pyCGM2.Tools.btkTools.getNumberOfForcePlate"]], "getnumberofmodeloutputs() (in module pycgm2.tools.btktools)": [[436, "pyCGM2.Tools.btkTools.getNumberOfModelOutputs"]], "getparamanalysis() (in module pycgm2.tools.btktools)": [[437, "pyCGM2.Tools.btkTools.getParamAnalysis"]], "getscalar() (in module pycgm2.tools.btktools)": [[438, "pyCGM2.Tools.btkTools.getScalar"]], "getstartendevents() (in module pycgm2.tools.btktools)": [[439, "pyCGM2.Tools.btkTools.getStartEndEvents"]], "getvalidframes() (in module pycgm2.tools.btktools)": [[440, "pyCGM2.Tools.btkTools.getValidFrames"]], "getvisiblemarkersatframe() (in module pycgm2.tools.btktools)": [[441, "pyCGM2.Tools.btkTools.getVisibleMarkersAtFrame"]], "haschild() (in module pycgm2.tools.btktools)": [[442, "pyCGM2.Tools.btkTools.hasChild"]], "isanalogexist() (in module pycgm2.tools.btktools)": [[443, "pyCGM2.Tools.btkTools.isAnalogExist"]], "iseventexist() (in module pycgm2.tools.btktools)": [[444, "pyCGM2.Tools.btkTools.isEventExist"]], "isgap() (in module pycgm2.tools.btktools)": [[445, "pyCGM2.Tools.btkTools.isGap"]], "iskineticflag() (in module pycgm2.tools.btktools)": [[446, "pyCGM2.Tools.btkTools.isKineticFlag"]], "isphantom() (in module pycgm2.tools.btktools)": [[447, "pyCGM2.Tools.btkTools.isPhantom"]], "ispointexist() (in module pycgm2.tools.btktools)": [[448, "pyCGM2.Tools.btkTools.isPointExist"]], "ispointsexist() (in module pycgm2.tools.btktools)": [[449, "pyCGM2.Tools.btkTools.isPointsExist"]], "keepanddeleteotherpoints() (in module pycgm2.tools.btktools)": [[450, "pyCGM2.Tools.btkTools.keepAndDeleteOtherPoints"]], "markerunitconverter() (in module pycgm2.tools.btktools)": [[451, "pyCGM2.Tools.btkTools.markerUnitConverter"]], "markerstoarray() (in module pycgm2.tools.btktools)": [[452, "pyCGM2.Tools.btkTools.markersToArray"]], "modifyeventsubject() (in module pycgm2.tools.btktools)": [[453, "pyCGM2.Tools.btkTools.modifyEventSubject"]], "modifysubject() (in module pycgm2.tools.btktools)": [[454, "pyCGM2.Tools.btkTools.modifySubject"]], "renameevent() (in module pycgm2.tools.btktools)": [[455, "pyCGM2.Tools.btkTools.renameEvent"]], "smartappendanalog() (in module pycgm2.tools.btktools)": [[456, "pyCGM2.Tools.btkTools.smartAppendAnalog"]], "smartappendparamanalysis() (in module pycgm2.tools.btktools)": [[457, "pyCGM2.Tools.btkTools.smartAppendParamAnalysis"]], "smartappendpoint() (in module pycgm2.tools.btktools)": [[458, "pyCGM2.Tools.btkTools.smartAppendPoint"]], "smartcreateevent() (in module pycgm2.tools.btktools)": [[459, "pyCGM2.Tools.btkTools.smartCreateEvent"]], "smartgetevents() (in module pycgm2.tools.btktools)": [[460, "pyCGM2.Tools.btkTools.smartGetEvents"]], "smartgetmetadata() (in module pycgm2.tools.btktools)": [[461, "pyCGM2.Tools.btkTools.smartGetMetadata"]], "smartreader() (in module pycgm2.tools.btktools)": [[462, "pyCGM2.Tools.btkTools.smartReader"]], "smartsetmetadata() (in module pycgm2.tools.btktools)": [[463, "pyCGM2.Tools.btkTools.smartSetMetadata"]], "smartwriter() (in module pycgm2.tools.btktools)": [[464, "pyCGM2.Tools.btkTools.smartWriter"]], "sortedevents() (in module pycgm2.tools.btktools)": [[465, "pyCGM2.Tools.btkTools.sortedEvents"]], "export_cgmtomot() (in module pycgm2.tools.opensimtools)": [[466, "pyCGM2.Tools.opensimTools.export_CgmToMot"]], "footreactionmotfile() (in module pycgm2.tools.opensimtools)": [[467, "pyCGM2.Tools.opensimTools.footReactionMotFile"]], "mot2pointvalues() (in module pycgm2.tools.opensimtools)": [[468, "pyCGM2.Tools.opensimTools.mot2pointValues"]], "smartgetvalues() (in module pycgm2.tools.opensimtools)": [[469, "pyCGM2.Tools.opensimTools.smartGetValues"]], "sto2pointvalues() (in module pycgm2.tools.opensimtools)": [[470, "pyCGM2.Tools.opensimTools.sto2pointValues"]], "transformmarker_toosimreferencial() (in module pycgm2.tools.opensimtools)": [[471, "pyCGM2.Tools.opensimTools.transformMarker_ToOsimReferencial"]], "concatenateexcelfiles() (in module pycgm2.utils.files)": [[473, "pyCGM2.Utils.files.concatenateExcelFiles"]], "copypaste() (in module pycgm2.utils.files)": [[474, "pyCGM2.Utils.files.copyPaste"]], "copypastedirectory() (in module pycgm2.utils.files)": [[475, "pyCGM2.Utils.files.copyPasteDirectory"]], "copysessionfolder() (in module pycgm2.utils.files)": [[476, "pyCGM2.Utils.files.copySessionFolder"]], "createdir() (in module pycgm2.utils.files)": [[477, "pyCGM2.Utils.files.createDir"]], "deletedirectory() (in module pycgm2.utils.files)": [[478, "pyCGM2.Utils.files.deleteDirectory"]], "getc3dfiles() (in module pycgm2.utils.files)": [[479, "pyCGM2.Utils.files.getC3dFiles"]], "getdirname() (in module pycgm2.utils.files)": [[480, "pyCGM2.Utils.files.getDirname"]], "getdirs() (in module pycgm2.utils.files)": [[481, "pyCGM2.Utils.files.getDirs"]], "getfilecreationdate() (in module pycgm2.utils.files)": [[482, "pyCGM2.Utils.files.getFileCreationDate"]], "getfilename() (in module pycgm2.utils.files)": [[483, "pyCGM2.Utils.files.getFilename"]], "getfiles() (in module pycgm2.utils.files)": [[484, "pyCGM2.Utils.files.getFiles"]], "getikweightset() (in module pycgm2.utils.files)": [[485, "pyCGM2.Utils.files.getIKweightSet"]], "getmp() (in module pycgm2.utils.files)": [[486, "pyCGM2.Utils.files.getMp"]], "getmpfilecontent() (in module pycgm2.utils.files)": [[487, "pyCGM2.Utils.files.getMpFileContent"]], "gettranslators() (in module pycgm2.utils.files)": [[488, "pyCGM2.Utils.files.getTranslators"]], "is_json() (in module pycgm2.utils.files)": [[489, "pyCGM2.Utils.files.is_json"]], "is_yaml() (in module pycgm2.utils.files)": [[490, "pyCGM2.Utils.files.is_yaml"]], "loadanalysis() (in module pycgm2.utils.files)": [[491, "pyCGM2.Utils.files.loadAnalysis"]], "loadmodel() (in module pycgm2.utils.files)": [[492, "pyCGM2.Utils.files.loadModel"]], "loadmodelsettings() (in module pycgm2.utils.files)": [[493, "pyCGM2.Utils.files.loadModelSettings"]], "loadmp() (in module pycgm2.utils.files)": [[494, "pyCGM2.Utils.files.loadMp"]], "loadsettings() (in module pycgm2.utils.files)": [[495, "pyCGM2.Utils.files.loadSettings"]], "openfile() (in module pycgm2.utils.files)": [[496, "pyCGM2.Utils.files.openFile"]], "openjson() (in module pycgm2.utils.files)": [[497, "pyCGM2.Utils.files.openJson"]], "openpicklefile() (in module pycgm2.utils.files)": [[498, "pyCGM2.Utils.files.openPickleFile"]], "openyaml() (in module pycgm2.utils.files)": [[499, "pyCGM2.Utils.files.openYaml"]], "readcontent() (in module pycgm2.utils.files)": [[500, "pyCGM2.Utils.files.readContent"]], "readxml() (in module pycgm2.utils.files)": [[501, "pyCGM2.Utils.files.readXml"]], "renamefile() (in module pycgm2.utils.files)": [[502, "pyCGM2.Utils.files.renameFile"]], "saveanalysis() (in module pycgm2.utils.files)": [[503, "pyCGM2.Utils.files.saveAnalysis"]], "savejson() (in module pycgm2.utils.files)": [[504, "pyCGM2.Utils.files.saveJson"]], "savemodel() (in module pycgm2.utils.files)": [[505, "pyCGM2.Utils.files.saveModel"]], "savemp() (in module pycgm2.utils.files)": [[506, "pyCGM2.Utils.files.saveMp"]], "savepicklefile() (in module pycgm2.utils.files)": [[507, "pyCGM2.Utils.files.savePickleFile"]], "saveyaml() (in module pycgm2.utils.files)": [[508, "pyCGM2.Utils.files.saveYaml"]], "try_as() (in module pycgm2.utils.files)": [[509, "pyCGM2.Utils.files.try_as"]], "checksimilarelement() (in module pycgm2.utils.utils)": [[510, "pyCGM2.Utils.utils.checkSimilarElement"]], "getsimilarelement() (in module pycgm2.utils.utils)": [[511, "pyCGM2.Utils.utils.getSimilarElement"]], "homogeneizearguments() (in module pycgm2.utils.utils)": [[512, "pyCGM2.Utils.utils.homogeneizeArguments"]], "isinrange() (in module pycgm2.utils.utils)": [[513, "pyCGM2.Utils.utils.isInRange"]], "str() (in module pycgm2.utils.utils)": [[514, "pyCGM2.Utils.utils.str"]], "tobool() (in module pycgm2.utils.utils)": [[515, "pyCGM2.Utils.utils.toBool"]]}})